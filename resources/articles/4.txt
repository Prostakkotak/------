ТЕХНОЛОГИИ ОПТИМИЗАЦИИ РАБОТЫ САЙТА НА ПРИМЕРЕ АНАЛИТИЧЕСКОЙ СИСТЕМЫ ПУБЛИКАЦИОННОЙ АКТИВНОСТИ ПЕНЗЕНСКОГО ГОСУДАРСТВЕННОГО УНИВЕРСИТЕТА


Оптимизация производительности web-сайтов является приоритетом
при их администрировании в современных условиях борьбы за трафик. Согласно отчету о цифровой сфере Digital 2020 число активных пользователей
© Торопкин Р. А., Зиновьев Я. В., Рассказов Н. С., Митрохин М. А., 2020
72
интернета достигло отметки 4,5 млрд человек [1]. Растет и количество webсайтов, а вместе с тем развивается и их структура. Из простых ресурсов, содержащих статический контент, web-приложения эволюционировали до
сложно сконструированных платформ, решающих большой спектр задач в
области визуализации данных сети Internet.
Избыток информации приводит к тому, что пользователь становится
более прихотливым в процессе поиска информации и к современным сайтам
предъявляются все более высокие требования, в том числе и по скорости загрузки. Исследование компании Radware показало, что 47 % пользователей
ожидают, что страница загрузится не более чем за 2 с, а если время загрузки
составляет более 3 с, то 40 % клиентов сразу покинут сайт [2]. Поэтому задача оптимизации скорости загрузки сайта является одной из наиболее приоритетных.
На рынке существует множество способов, позволяющих уменьшить
время загрузки страниц, но все они решают задачи:
− уменьшения объема загружаемых данных;
− сохранения части информации на устройстве пользователя или кэширования;
− «визуальной» оптимизации web-страницы.
В ходе решения данных задач рассмотрим наиболее эффективные варианты клиентской оптимизации и их применение на примере аналитической
системы публикационной активности ПГУ.
Материалы и методы
Современные web-приложения используют все больше вычислений на
стороне клиента, что вместе со сторонними библиотеками значительно увеличивает объем передаваемой на пользовательское устройство информации.
Данную проблему помогают решить минификация кода и применение различных инструментов для сборки, таких как gulp, Webpack. Так называемые
«сборщики» обладают огромным функционалом по оптимизации webприложения, который позволяет:
− указывать среду, это означает, что при компиляции в финальную
сборку не будут включаться различные артефакты тестирования и разработки;
− минимизировать исходные JavaScript-файлы, а также различные
версии исходной карты (source map), размер которой также возможно уменьшить до двух раз;
− использовать различные плагины для оптимизации сборки, дающие
возможность формировать .gz файлы, импортировать только отдельные модули из библиотек или дедуплицировать похожие файлы. Наиболее популярные из них: compression-webpack-plugin, dedupe-plugin, uglifyjs-plugin, ignoreplugin;
− анализировать размеры используемых зависимостей;
− создавать дерево зависимостей и определять необходимые ресурсы
для каждой страницы. Данный подход к оптимизации доступен для React и
Vue и позволяет значительно ускорить загрузку каждой страницы.
73
Серьезным шагом в развитии web-технологий стало использование
Single Page Applications (SPA), т.е. разработка таких сайтов, в ходе взаимодействия с которыми происходит загрузка только необходимой информации,
а не всей страницы целиком. Классические многостраничные web-ресурсы
(Multi Page Application (MPA)) отправляют запрос при каждом незначительном изменении на странице, что приводит к ее принудительному обновлению. Single Page Applications устроены немного иначе, они используют динамическое обновление DOM-дерева, что позволяет исключить перезагрузку
web-страницы.
Сравнение технологий многостраничных и одностраничных webприложений приведено на рис. 1.
Рис. 1. Сравнение Multi Page Application и Single Page Applications
Наиболее популярны SPA-решения с использованием таких JavaScript
библиотек и фреймворков, как React.js, Vue.js, Angular.js. Например, во Vue.js
и React технология SPA организована следующим образом: происходит копирование DOM-дерева, его обработка и сравнение с исходным вариантом,
далее фреймворк заменяет части только тех элементов, которые отличаются
от первоначальной структуры DOM-дерева.
В последнее время набирает популярность «отложенная загрузка» − оптимизация загрузки медиафайлов и компонентов, не критичных для отображения web-страницы и взаимодействия с интерфейсом. Чаще всего «ленивая
загрузка» применяется для элементов, расположенных за линией видимости
пользователя и отображаемых только после прокрутки. Отложенная загрузка
реализована во многих современных JavaScript фрейморках, таких как Vue.js,
Angular и React, где возможна настройка динамической загрузки маршрутов
и компонентов. Оценить, насколько эффективным окажется применение отложенной загрузки изображений возможно для конкретного сайта, проверив
его на ресурсе Google PageSpeed Insights (рис. 2).
74
Рис. 2. Рекомендации Google PageSpeed Insights
Также рекомендуется использование экономичных форматов файлов,
позволяющих сократить объем передаваемого трафика. Например, формат
WebP дает возможность экономить до 34 % при конвертировании картинки
из JPG и 45 % для PNG [3]. Поддержка данного формата уже присутствует у
79,2 % пользователей интернета. Результаты анализа представлены на рис. 3.
Рис. 3. Результат анализа наличия поддержки браузерами формата WebP
Еще одним способом, позволяющим уменьшить объем загружаемых
файлов, а также снизить нагрузку на устройство при рендеринге страницы,
является использование серверного рендеринга, при этом вся нагрузка по
отображению страницы ложится на сервер, а ресурсы клиентского устройства
освобождаются для других процессов [4]. Скорость загрузки при серверном
рендеринге увеличивается до двух раз, так как отсутствует обработка кода
JavaScript процессором, а загружаются только текст и ссылки. Схема отображений страниц представлена на рис. 4.
Одним из прогрессивных способов кэширования является использование «сервис-воркеров». В данном случае сайт разделяется на две части: со
статическим и динамическим контентом, при этом при повторной загрузке,
скачивается только часть с уникальным контентом и объединяется со статическим [5]. Сравнение скорости загрузки по метрике First Contentful Paint, характеризующей скорость загрузки на сайте первых элементов, показало снижение нагрузки на сетевой трафик на 47,6 % и повышение скорости
отображения первых элементов на 40 % (рис. 5).
75
Рис. 4. Загрузка страницы при серверном рендеринге
Рис. 5. Сравнение скорости рендера элементов на сайте
Результаты
Описанные технологии были применены в аналитической системе публикационной активности ПГУ. Современные аналитические системы содержат множество числовых данных, оптимальным представлением для которых
является использование графиков и диаграмм. С технической точки зрения
визуализация информации посредством диаграмм довольно трудозатратна и
требует большого количества вычислительных ресурсов. Данную проблему
решает JavaScript библиотека – Chart.js. Использование формата svg в совокупности с частичным аппаратным ускорением позволяет добиться значительного прироста производительности. В библиотеке Chart.js применена
технология асинхронного рендеринга, что позволяет не загружать ядро
JavaScript продолжительное время. Таким образом, данный модуль позволил
внедрить «живые» графики на сайт анализа публикационной активности
ПГУ1 без сильного ущерба производительности. Более того, это дало воз-

1 При поддержке конкурса «Ректорские гранты – 2020». Номер договора:
ХП-107/20.
76
можность сократить срок разработки, так на реализацию собственного решения с помощью встроенной библиотеки canvas ушло бы много ресурсов, что
является критическим фактором при создании web-приложений.
При разработке высоконагруженных систем немаловажным параметром остается качество сборки web-приложения. Проектируя web-ресурс, разработчик взаимодействует с множеством различных библиотек и модулей,
с десятками, а порой и сотнями файлов .js и .css. Появляется очевидная проблема, состоящая в сложности управления порядком загрузки различных
файлов и модулей для поддержания работоспособности приложения. Для решения данной проблемы в системе анализа публикационной активности ПГУ
был применен статический модульный сборщик для приложений «Webpack».
Данный инструмент позволяет выполнять сборку js-файлов в оптимальном,
правильном порядке. Стоит отметить, что Webpack v4+ по умолчанию поддерживает минимизацию кода, что в общем случае дало возможность сократить
размер файлов сайта от 30 до 40 %, исходя из анализа, представленного
на рис. 3. В итоге удалось увеличить время загрузки web-сайта на 40 %.
За счет использования технологии SPA, применяемой в системе публикационной активности ПГУ, удалось значительно повысить производительность конечного web-сайта. По статистике среднее значение глубины
просмотра для информационного портала составляет 3–4 страницы [6]. В результате применения Single Page Applications пользователь в среднем получает доступ к информации на 9–12 с раньше по сравнению с Multi Page Application (при средней скорости загрузки страницы в 2 с [7] при использовании
MPA). Данная технология позволила в кратчайшие сроки добавить новый
модуль выгрузки данных. Данный подход дал возможность:
− избавиться от создания новых страниц;
− не дублировать html/css код;
− сохранить единообразие контента;
− использовать существующий API.
Заключение
Таким образом, построение эффективных высоконагруженных систем
требует комплекса мероприятий, направленных на повышение отклика,
а также скорости загрузки и отображения конечного web-ресурса. Применение рассмотренных методов оптимизации web-интерфейса позволяет сократить время загрузки страницы на 40 % по сравнению с неоптимизированным
вариантом. Минимизация времени отклика способствует более комфортной
работе с web-приложением, что наряду с оптимизацией web-интерфейса позволяет сформировать положительный опыт эксплуатации пользователям. 
