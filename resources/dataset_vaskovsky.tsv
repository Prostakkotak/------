Пути построения системы	управления	корпоративным веб-сайтом
"Предпосылкой успешного функционирования предприятия в условиях
информационного общества является развитие его веб-ресурсов и становление
предприятия как сетевой организации. Для построения сетевой организации
критически важным фактором является стратегический подход к"		
"управлению корпоративными веб-ресурсами и, в первую очередь, корпоративным веб-
сайтом. Именно веб-сайт, содержащий актуальную, доступную"		
"и достоверную информацию, является связующим звеном между организацией и его
контрагентами. Вопрос о том, насколько верно на корпоративном веб-сайте
предоставлена информация, имеет прямое отношение к
качеству корпоративного управления."		
"До недавнего времени большинство руководителей предприятий считали, что
управление сайтом сводится к чисто техническим задачам по формированию контента
и администрированию, и все проблемы управления сайтом делегировали менеджерам
среднего звена. Однако в связи с возрастанием роли Internet в деятельности
предприятия пришло осознание, что отсутствие корпоративного подхода к управлению
сайтом порождает множество различных проблем, которые невозможно решить на
среднем уровне управления. Кроме того, корпоративный веб-сайт стал играть
существенную роль в достижении стратегических целей компании. Это вызвало
потребность в построения системы принятия стратегических решений в области
управления веб-сайтом или руководства корпоративным вебсайтом. В англоязычной
литературе для этого применяется термин Vebsite Governance [8]. В процессе
построения руководства необходимо решить вопросы с областями принятия решений,
механизмами управления и распределением ролей среди лиц, принимающих
решения. В связи с тем, что проблемы управления корпоративными веб-ресурсами
все чаще выносятся на повестку дня заседаний руководящих органов предприятий,
задача по формированию подхода к построению эффективного руководства веб-
сайтом является актуальной и не в полной мере исследованной. Для решения этой
задачи необходимо проанализировать существующие модели управления
корпоративными веб-ресурсами и методы организации руководства корпоративным
веб-сайтом, выявить специфику руководства веб-сайтом, предложить подход к
построению системы принятия решений в области управления веб-ресурсами. Анализ
отечественных литературных источников в области управления Internet-технологиями
на предприятиях показывает,что основное внимание в них уделяется техническим
аспектам построения и администрирования сайтов, проблемам их оптимизации и
продвижения, а также методам управления контентом. В то же время вопросы
управления корпоративными вебресурсами освещены незначительно. Напротив, в
англоязычной литературе этим вопросам уделяется значительное внимание, что
свидетельствует о более высоком уровне зрелости ИТ-менеджмента в развитых
странах. В англоязычной литературе имеется целый ряд монографий, статей и
нормативных документов, описывающих различные методы, модели и технологии
управления корпоративными веб-ресурсами, в том числе управления корпоративным
сайтом [1, 3, 4, 7].Анализ источников позволяет сделать вывод о наличии целого ряда
формализованных зарубежных подходов к построению руководства корпоративным
веб-сайтом [1, 3–5, 7]. Руководство корпоративными ресурсами предполагает
определение того, как лица, ответственные за управление конкретным видом"		
"ресурсов, принимают стратегические решения и как контролируют выполнение этих
решений. К основным корпоративным ресурсам относят: человеческие, финансовые,
физические, информационные, ресурсы интеллектуальной собственности, а также
ресурсы взаимоотношений. В последнее время к ключевым корпоративным ресурсам
стали относить и веб-ресурсы. Для разработки эффективного руководства по
управлению ресурсами строится модель в форме матрицы распределения
обязанностей, которая отражает основные компоненты модели: области принятия
решений; механизмы принятия решений; стили принятия решений. Правильное
определение всех этих компонентов позволяет построить модель, которая далее
используется для построения структуры руководства и разработки регламента его
функционирования, именуемого как «Соглашение о руководстве» [6]. Естественно, что
определение компонентов модели руководства зависит от специфики предприятия и
масштаба его деятельности. Модель руководства предполагает согласование целей
руководства конкретным видом ресурсов с корпоративными бизнес-целями и бизнес-
моделями. Построение модели руководства осуществляется, как правило, в форме
консалтингового проекта. Рассмотрим основные компоненты модели руководства
применительно к корпоративному веб-сайту. Анализ источников, связанных с
управлением корпоративными сайтами, позволяет сделать вывод, что система
управления корпоративным вебсайтом включает в себя принятие решений в
следующих областях: – принципы использования веб-сайта; – архитектура веб-сайта;
– ИТ-инфраструктура; – веб-приложения; – веб-контент; – инвестиции в Internet-
технологии [4]. Рассмотрим подробней все эти области принятия решений. Принципы
использования веб-сайта формируются на основе обобщения накопленного
пользовательского опыта с целью обеспечения пользователей сайта точной и
актуальной информацией [7]. Принципы позволяют правильно расставить приоритеты
в области управления корпоративным веб-сайтом, а также разработать стандарты,
правила и политики, регламентирующие управление. Следующей областью принятия
решений является архитектура сайта, под этим термином принято понимать систему
организации информационного наполнения, виртуальных страниц или файлов,
находящихся на корпоративном сайте. Концептуальные ошибки способны
существенно снизить эффективность и результативность сайта. Основной целью
архитектуры является создание проекта, позволяющего пользователям максимально
быстро находить необходимую информацию. Согласно Шейлу Дефиле, автору
справочника Website Manager’s Handbook, который является первом практическим
руководством по управлению Web, сайт характеризуется тремя основными
характеристиками (рис. 1): размер, активность, сложность [8]. Эти характеристики
являются универсальными для всех сайтов и позволяют провести их классификацию с
целью оказания помощи при создании системы управления сайтом. Основным
преимуществом использования этой шкалы является определение ресурсов,
необходимых для управления сайтами определенного масштаба. Следующей
областью принятия решений является ИТ-инфраструктура веб-сайта, которая
представляет комплекс аппаратных и программных средств передачи и обработки
данных, включающий персональные компьютеры (рабочие станции), серверы, сетевые
и периферийные устройства, системы хранения и резервирования данных, системы
связи и телекоммуникаций, системы безопасности сайта [2]. Еще одной областью
являются веб-приложения, которые представлены разнообразными функциями,
которыми пользователь может воспользоваться. Это функции регистрации,
авторизации, поиска, скачивания, просмотра информации и т.п. Кроме того"
"корпоративный сайт способен поддерживать бизнес-процессы, помогать
взаимодействию с контрагентами, осуществлять представительство в Internet. Контент
является информационным наполнением сайта. Это могут быть изображения, текст
или видеоролики. В переводе с английского контент переводится, как содержание. В
глобальной сети Internet контентом считается все то, что посетитель может прочитать,
увидеть или услышать. Также очень часто под контентом подразумевается текстовое
содержание. Посетители веб-сайта в первую очередь обращают внимание на качество
контента. Он должен быть легок для восприятия, релевантен, актуален, а также
грамотно и интересно написан.У посетителей должно появиться желание поместить
прочитанную страницу в избранное, а может даже переслать ссылку знакомым. И
последней областью принятия решений являются инвестиции в Internet-технологии – 
это финансовые ресурсы, которые привлечены и потрачены на управление и развитие
веб-сайтом. Как было сказано выше, директорат зачастую по всем
вышеперечисленным областям делегирует право принятия решений среднему звену,
представителями которых являются – веб-мастер, дизайнер, контент-менеджер,
редактор сайта. Эти менеджеры и специалисты фактически не несут ответственности
за достижение сайтом корпоративных бизнес-целей и отсутствие прибыли. Для того
чтобы корпоративный сайт использовался для достижения бизнес-целей, должны
быть сформированы механизмы принятия стратегических решений по управлению им."
"Процесс осуществления руководства состоит из следующих этапов: подготовка
информации для принятия решений, коллегиальное обсуждение проблем и
нахождение вариантов решения, расстановка приоритетов, доведение решения до
исполнителей, контроль выполнения решения. Коллегиальные органы, участвующие в
выработке решений, принято называть органами руководства или как трактует их П."
"Уэйл механизмами руководства [4]. Применительно к корпоративному веб-сайту
такими органами могут быть комитет по управлению корпоративным веб-сайтом,
комиссия по политикам и стандартам, группа по формированию контента и т.п."
"Механизмы могут быть формальными, например, в виде комитета, либо
неформальными, такими, как обсуждения с коллегами. Третьим компонентом модели
руководства являются стили. Стиль руководства определяет, кто готовит документы
для принятия решений и кто принимает эти решения, особенно, какие уровни
руководства и, в частности, сотрудники вовлечены в этот процесс. Различные стили
руководства подразумевают различные сочетания руководителей бизнеса и ИТ на
разных уровнях организации [1]. Для удобства используется общепринятое
соглашение о наименовании стилей: • «Империя бизнеса – решения принимаются
директором; • «Империя ИТ» – решения принимаются функциональными
руководителями; • «Феодальное устройство» – решения принимаются на форуме
руководителей бизнес-подразделений; • «Федеральное устройство» – решения
принимаются на форуме корпоративного центра и руководителей бизнес-
подразделений; • «Дуополия» – решения принимаются на форуме функциональных
руководителей и руководителей бизнес-подразделений; • «Анархия» – решения
принимаются кем угодно. У каждого стиля руководства есть много механизмов,
которые позволяют реализовать этот стиль. Грамотное определение областей, стилей
и механизмов позволяет сформировать действенную систему управления
корпоративным сайтом. Для этого строится модель в форме матрицы, относящейся к
широко известной матрице ответственностей RACI, используемой для распределения
ответственности и ролей в бизнес-процессах и рабочих процедурах [7]. Часто метод
RACI называют диаграммой или таблицей, но по сути это именно матрица"
"ответственностей. Термин RACI (или ARCI) является аббревиатурой: R – Responsible 
(исполняет); A – Accountable (несет ответственность); C – Consult before doing 
(консультирует до исполнения); I – Inform after doing (оповещается после исполнения)."
"Иногда можно встретить вариант аббревиатуры – RACIS, где S – supported (оказывает
поддержку). Матрица RACI (рис. 2) используется для распределения ролей и не
предоставляет информацию, на каком уровне было принято решение: на уровне
директора или делегировано на уровень ниже. Для построения модели руководства
существует известная модель П.Уэйла, которая также представляется в форме
матрицы, но в этой модели определяются стили для принятия решений. Недостаток
модели П.Уэйла заключается в том, что она только описывает входную информацию и
принятые решения, не включая в себя такую основную функцию, как мониторинг
решений. Применительно к управлению корпоративным сайтом можно предложить
модель матрицы, представленной на рис. 4. По сравнению с матрицей Уэйла в ней
представлены шесть выше описанных областей принятия решений и добавлена роль
для контроля исполнения решений [3]. Решение Архитип Принципы использования ИТ
ИТархитектура Инфраструктура ИТ Потребности в бизнесприложениях Инвестиции в
ИТ ВИ Р ВИ Р ВИ Р ВИ Р ВИ Р Империя бизнеса Империя ИТ Феодальное устройство
Федеральное устройство Дуополия Рис. 2. Матрица RACI. О – ответственный, П – 
подотчетен, К – консультации, И – информирование Рис. 3. Модель ИТ-управления
П.Уэйла [4]. ВИ – входная информация, Р – решения Диаграмма RACI Сотрудники
Операция Сотрудник 1 Сотрудник 2 Сотрудник 3 Сотрудник 4 Сотрудник 5 
Определение П О И И И Проектирование И П О К К Разработка И П О К К
Тестирование П И И О И Решение Архитип Принципы использования Архитектура
сайта Инфраструктура сайта Вебсервисы Контент Инвестиции ВИ Р К ВИ Р К ВИ Р К
ВИ Р К ВИ Р К ВИ Р К Империя бизнеса Империя ИТ Феодальное устройство
Федеральное устройство Дуополия Рис. 4. Матрица системы управления
корпоративным сайтом. ВИ – входная информация, Р – решения, К – контроль Бизнес-
информатика 318 Вестник НГУЭУ • 2014 • № 1 Процесс построения матрицы может
осуществляться в следующем порядке: построение модели для существующего
руководства (матрица AS IS), анализ модели, выявление недостатков, нахождение
путей их устранения и построения перспективной модели руководства (матрица TO 
BE). При заполнении данной матрицы все процессы принятия решений разбиваются
на шесть областей: принципы использования, архитектура сайта, инфраструктура
сайта, веб-сервисы, контент, инвестиции. Таким образом, в каждой области принятия
решений участвует один или несколько механизмов (или органов принятия решений)
на определенном иерархическом уровне (стиль руководства). Матрица системы
управления корпоративным сайтом показывает, какие уровни слабо задействованы в
процессе принятия решений, в каких плохо осуществляется контроль. Выявление
недостатков и проблем в существующей системе управления позволяет построить
перспективную модель руководства, в которой будут учтены все замечания. На основе
представленного подхода можно выявить недостатки в системе управления
корпоративным сайтом, определить, какие решения и каким образом необходимо
принимать на стратегическом уровне, какие спустить на уровень среднего звена, а
также построить систему оценки эффективности управления корпоративным сайтом. В
заключение можно сделать следующие выводы. Система управления корпоративным
веб-сайтом организована не всегда на должном уровне, зачастую руководители,
снимая с себя ответственность, спускают вопросы принятия решений на средний
уровень менеджмента. Существующие в мировой практике модели предлагают"
"выделять несколько областей в системе управления корпоративным сайтом и
принимать решения в каждой области отдельно.Предложенная модель к построению
руководства корпоративным сайтом поможет написать руководящие документы,
определить процедуры принятия решений, составить регламенты управления сайтом."											
ERP СИСТЕМЫ	И КОРПОРАТИВНЫЕ	ПОРТАЛЫ									
ERP-системы,	это системы,	которые соединяют такие	сферы								
предприятия,	как	производство	и операции,	управление трудовыми							
ресурсами,	менеджмент	финансов	и	управление	активами, направленные	на					
постоянную	балансировку	и	оптимизацию	ресурсов	предприятия						
посредством	специализированного	интегрированного	пакета	прикладного							
пакета программ,	обеспечивающего общую	модель	данных	и	процессов	для					
всех	сфер	деятельности.	Боле	доступным	языком	можно	сказать	что	ERPсистемы, это системы		
позволяющие	получать	необходимую	информацию	о							
текущем	положении	дел	на	предприятии	для	принятия	оперативных	решений.			
«Компания	принимаем решения	о	том, что	и	когда	нужно произвести,	какое				
сырье	и в	каких	объемах	потребуется	закупить, какие	финансы	для	этого			
понадобятся».											
В качестве	основной	характеристики	ERP-системы	отмечается четкий							
"""Экономика"	и	"социум"" №4(23)"	2016 www.iupr.ru 789								
подход	к	использованию	единой	системы	для	подавляющего	большинства				
операций	и	бизнес-процессов	организации,	вне	зависимости	от					
функционального	и территориального	разнообразия	мест	их	возникновения и						
прохождения, обязательное	сведение	всех	операций	в	единую	базу	для				
последующей	обработки	и	получения	сбалансированных	планов	в	реальном				
времени.	Раньше	разработчики	стремились	к разработке	так сказать	единого					
монолита	- системного	пакета	«все	в	одном»,	который	включал в себя все				
сферы	ERP-системы,	но	на	данный момент	среди	потребителей	чувствуется				
потребность	в	наличии связанных	между	собой	модулях, что	гораздо	удобней,				
ведь	можно	настраивать	каждый модуль	отдельно	и	более	точно.	Так	же		
разработчики	все	чаще	стали	подключать	к	ERP-системам	облачные сервисы				
(интернет	сервис	на	котором	хранятся все	нужные	файлы,	доступ	к	которым		
происходит	по средству	подключения	к	интернету).	Эти	сервисы	дали	некое			
преимущество	перед	обычными	средами	хранения, ведь	с	помощью	облачных				
систем не	нужно	хранить	огромное	кол-во	информации	на	одном	или			
нескольких компьютерах,	соединённых	ERP-системой,	этим	будет заниматься							
отдельный	сервер,	доступ	к	которому	для	предприятия	открыт	все	время.		
При	наличии	ERP-системы	мы	можем	получить	различные					
преимущества,	выгоды	и	удобства.	Но	есть	и	минусы.	Не	существует	ни	одной
ERP-системы,	которая	полностью	учитывает	все требования.	В	большинстве					
случаев	ERP-системы	подходят	для	больших	производств с	хорошей					
рентабельностью	и	инвестициями.	По	сути,	ERP- системы	это	конструктор,				
который собирается	под	каждое	предприятие	отдельно.	Иногда	к	западным				
разработкам	лучше	«привинтить»	разработку,	сделанную	в	России, в большей					
степени	соответствующую местным	реалиям.	При	работе	с	ERP-системой					
очень важен	человеческий	фактор,	без	него	точность	расчетов	будет	ниже.			
Плюсы	ERP- системы:										
объединение	всех	бизнес-процессов	предприятия	по	единым						
правилам	в	рамках	одной	системы;							
оперативное	получение	руководством	информации	о	всех						
сторонах	деятельности предприятия;							
планирование	и	контроль	деятельности компании (краткосрочные					
и	долгосрочные	планы	различных	подразделений	увязываются	между	собой).	
Минусы	ERP-системы:							
Высокая	стоимость ERP-систем	(цена	одной	лицензии	составляет			
от 1500$ до	8000$);							
Сложность	внедрения	(Согласно	статистике	только 30% всех				
внедрений	оказываются	успешными,	то	есть	затраты	на	ERP-системы	
окупаются.).								
Корпоративный	портал — это	веб-интерфейс	для	доступа	сотрудника			
к корпоративным	данным и	приложениям.	Часто	корпоративный	портал			
воспринимается,	как	синоним	интранета(локальной	сети). Альтернативная				
"""Экономика"	и	"социум"" №4(23)"	2016 www.iupr.ru 790					
точка	зрения	воспринимает	корпоративный	портал	как	видимую	для	
пользователя	часть	интернета.						
Изначальным	назначением	корпоративных	порталов являются	функции				
внутреннего сайта	организации:							
• публикация	новостей	и	других материалов	для	сотрудников			
• создание	внутрисетевой	базы	данных	для файлов	и	документов		
• форум	для	внутреннего	общения	предприятия				
Большинство	программных	продуктов	для	создания	корпоративных			
порталов	до	сих	пор	ограничены	функционалом.	Основным отличием таких		
порталов	от	публичных	сайтов	является	система	управления	правами	доступа,
которая обеспечивает	безопасность	коммерческой	информации.					
Развитием	корпоративных	порталов	стало	появление	в	их	функционале	
инструментов	для	совместной	работы.	Как	правило,	современные		
корпоративные	порталы	позволяют	создавать	виртуальные	рабочие			
пространства	для	отдельных	проектов	или	отделов	предприятия.	В таком	
рабочем	пространстве	сотрудники	могут	использовать	групповой	календарь,		
хранилище	документов	с	учетом	версий, а	также	систему	управления	
задачами и	др.							
Последней	стадией	в	эволюции	корпоративных	порталов	стала	их роль	
в	качестве	инструмента	соединения	корпоративных	данных	и приложений.		
Целью	этого объединения	является	предоставление	пользователю	единой			
точки	доступа	к	информационной	инфраструктуре организации.				
Достоинства:	Корпоративный	портал	доступен	в	любое	время,	без	
каких-либо	ограничений.	Организация,	которая имеет	в	своем	распоряжении		
корпоративный	сайт,	имеет	солидный	и надежный	вид	в	глазах пользователей.	
С помощью	корпоративного	портала в компанию	обращаются	потребители,				
которые	заинтересованы	в	получении	услуг, а	не	случайные пользователи.		
Корпоративный	сайт	не	имеет ограничений на	объем	информации.			
Информацию	можно	в	любое время	изменить.	При	постоянном		
отслеживании,	ее	актуальность	будет	постоянной.				
Недостатки:	Для	современных	корпоративных	порталов,	можно			
отметить	их	недостаточно	широкий	функционал,	присущий	традиционному		
программному	обеспечению для	организации	групповых	мероприятий. При				
этом	набор	инструментов для	привязки	веб-сервера	к базе	данных	и прочим	
вспомогательным	системам ограничен.	Вместо	того	чтобы	пользоваться			
единой системой,	как,	например,	пакеты	для	групповой	работы,		
корпоративным	порталам	требуется	организация	и	поддержка			
функционирования	каждой	отдельной	прикладной	системы.				
ОСОБЕННОСТИ ИСПОЛЬЗОВАНИЯ НИЗКОУРОВНЕВОГО	ПРОЦЕССОРНОГО КОДА	С
ИСПОЛЬЗОВАНИЕМ WEBASSEMBLY		
"Введение. Для веб-разработки, которая с каждым годом приобретает всё большую
популярность"		
"и технологические новшества, остаётся актуальным по-прежнему один очень важный
вопрос – быстрое"		
"исполнение кода в браузере. Современный браузер является мультиинструментом
разработчика – он позволяет не только просматривать страницы, но и отлаживать код,
следить за состоянием приложения, его"		
"ресурсами, сетью, безопасностью. Соответственно, нет сомнений в том, что
множество улучшений"		
"в сфере веб-технологий может появиться и со стороны браузера, который уже давно
функционально"		
"намного шире, чем многим кажется. Языком-монополистом в области веб-технологий
и как минимум"		
"во всех популярных браузерах является JavaScript, то есть на данный момент все
манипуляции вокруг"		
"веб-программирования по крайней мере на клиентской стороне будут опираться на
данный язык."		
"JavaScript – это современный независимый язык, который обладает очень хорошей
поддержкой"		
"со стороны разработчика, а также очень большим количеством активно используемых
и развивающихся"		
"фреймворков и библиотек. Как известно, JavaScript изначально создавался как
скриптовый язык, с помощью"		
"которого можно выполнять небольшие клиентские задачи в браузере, он не был
приспособлен под быструю"		
"комплексную работу. Более того, JS однопоточен, хотя сейчас и есть некоторые
способы, позволяющие"		
"частично обойти это ограничение. Конечно же, на основе этого нельзя сказать, что
JavaScript неэффективен,"		
"но тем не менее у языка есть определенные внутренние ограничения и особенности,
которые сильно"		
"ограничивают перспективы ускорения. Соответственно, было бы приоритетно то
решение, которое имеет"		
"отличную совместимость с JavaScript, поскольку в современных условиях отказаться
от него просто"		
невозможно, но и между тем большую скорость исполнения.		
"Технология WebAssembly, о которой пойдет речь в данной работе, как раз является
таким решением,"		
"она представлена новым форматом байт-кода, который доступен к исполнению во
всех современных"		
"браузерах. Технология дает доступ к использованию в браузере таких языков, как C, 
C++, Rust и многих"		
других, за счет сборки кода предварительно в набор низкоуровневых инструкций.
Полученный формат
"является компактным, с одной стороны, при этом имеет производительность ближе к
процессорной,"
"нежели сам JavaScript. В то же время он также позволяет работать непосредственно и
с JavaScript, который"
в данном случае обеспечивает передачу данных между браузером и WASM [1].
"Так как на данный момент рассмотрение проблемы быстрого исполнения кода в
браузере далеко"
"не новое явление, то к решению проблемы также прилагаются некоторые
сопутствующие требования,"
"которые опираются на современное сообщество разработчиков:
кроссплатформенность, поддержка мобильных устройств, нескольких операционных
систем;"
"скорость исполнения в пределах скорости машинного кода процессора, о чем
упоминалось"
ранее;
"решение на базе самого браузера, то есть без установки;
безопасность;"
удобство использования разработчика, инструменты отладки.
"Таким образом, в данной работе будут рассмотрены имеющиеся способы и подходы
в использовании машинного кода в веб-программировании, а также фактическом
использовании других"
языков, отличных от JavaScript, для решения задач в среде веб-разработки.
Результаты данного
"исследования могут быть использованы в качестве руководства для разработчиков,
которые хотят"
"ускорить ресурсоёмкие операции на клиенте, используя доступные и удобные
средства. Ведь"
"оптимизация на стороне клиента для конечного пользователя влечет за собой
определенную выгоду"
"использования – более быструю загрузку самого приложения, ускорение ряда
операций, либо появление"
"совершенно новой функциональности, которая доступна только за счет использования
какого-то"
"уникального API, доступного на базе совсем другого языка. Все перечисленные пункты
чаще всего"
"подразумевают сокращение времени ожидания клиента, а значит, улучшение опыта
использования"
"со стороны пользователя – соответственно, это подчеркивает необходимость
проведения исследования"
CASPIAN JOURNAL: Control and High Technologies, 2022, 2 (58)
70
"и его актуальность. Основной же задачей в данном случае является исследование
способов применения,"
"выявление достоинств и недостатков, а также использование современной технологии
WebAssembly."
"Обзор существующих решений. Ниже будет приведён перечень технологий, которые
так или иначе"
"применялись в решении поставленной проблемы частично или полностью. Для начала
перечислим"
"решения, которые уже не поддерживаются по тем или иным причинам, – это ActiveX, 
Adobe Flash,"
Microsoft Silverlight, Native Client и Portable Native Client.
"ActiveX представляет собой фреймворк, определяющий программные компоненты,
которые могут"
"быть использованы и написаны на разных языках программирования. Приложение
собирается"
из нескольких подобных компонентов и может использовать их функциональность.
"В основе технологии лежит использование решений Microsoft, основывающихся на
технологиях"
"OLE (Object Linking and Embedding) и COM (Component Object Model), использующихся
для связывания"
"и внедрения объектов в другие объекты и документы. Технология обеспечивает
соединение между"
"различными слоями приложения, что позволяет им вместе работать через Internet, а
также иметь систему,"
которая направляет программный трафик.
"В настоящее время ActiveX официально считается вредоносной из-за существенных
проблем"
"с безопасностью. Microsoft отказалась от поддержки ActiveX в Internet Explorer 10 и в
Windows 8, а в 2015 г."
поддержка ActiveX была полностью прекращена.
"Adobe Flash – это платформа компании Adobe Systems, использовалась для создания
вебприложений. Получила широкое применение в разработке игр, анимации,
рекламных баннеров, была"
одной из лидирующих технологий воспроизведения видео и аудио на веб-страницах.
Среди основных
"серьезных недостатков можно отметить чрезмерную нагрузку на центральный
процессор, связанную"
"с невысокой эффективностью виртуальной машины Flash Player, а также рядом
уязвимостей, одной"
"из которых является угроза перехвата flash-приложением содержимого буфера
обмена. В 2017 г."
поддержка данного продукта была прекращена.
"Microsoft Silverlight – программная платформа, использовавшаяся для написания и
запуска"
"многофункциональных интернет-приложений RIA. Она похожа на Adobe Flash, 
поскольку также имеет"
"модуль для браузера, который использовался для демонстрации видео,
воспроизведения аудио, показа"
"анимации, работы с векторной графикой. Поддержка этой технологии окончательно
прекратилась в 2015 г."
"Native Client (NaCl) и Portable Native Client (PNaCl) – технология для запуска кода на
платформах"
"x86, x86-64, ARM и MIPS, позволяющая безопасно запускать машинный код
непосредственно в браузере"
"независимо от операционной системы. Эта технология также может быть
использована для создания"
"защищённых плагинов для браузера, частей какого-либо приложения либо самих
приложений."
"Помимо создания барьера против нежелательных побочных эффектов, модули NaCl 
переносимы как"
"между операционными системами, так и между веб-браузерами и поддерживают
функции,"
"ориентированные на производительность, такие как инструкции по обработке потоков
и векторизации,"
"расширение набора инструкций, таких как SSE, а также использование встроенных
функций компилятора"
и написанного вручную ассемблера.
"При этом сами разработчики выделяли потенциально слабые с точки зрения
безопасности"
"системные компоненты технологии и сами это рассматривали [2]
внутренняя песочница: бинарная проверка;
внешняя песочница: перехват системных вызовов ОС;
загрузчик бинарных модулей во время выполнения службы;
сервисные интерфейсы трамплина во время выполнения;
интерфейс связи IMC;"
интерфейс NPAPI.
"Разработчики подробно рассматривали аспекты безопасности и внедряли различные
механизмы,"
"включающие уровни защиты на основе собственной уверенности в надежности
различных компонентов"
"и достижения наилучшего баланса между производительностью, гибкостью и
безопасностью."
"Но, несмотря на множественные усилия, технология не нашла поддержки других
браузеров кроме"
"Chrome, в итоге в 2017 г. Google объявила об отказе от PNaCl в пользу WebAssembly,
на которой делается"
акцент в данной работе [3].
"У всех вышеописанных решений были те или иные проблемы с безопасностью, либо
же они не"
"выдержали испытания временем и конкуренции. В современных условиях эти
технологии не прижились,"
"и их поддержка и развитие прекратились. Таким образом их можно разделить на две
группы:"
"выполнение родного кода прямо в браузере;
исполнение кода в рамках виртуальной машины."
"Примерами технологий из первой группы являются ActiveX, NaCl. К минусам здесь
можно отнести"
"отсутствие портируемости, потенциальные или подтвержденные проблемы с
безопасностью."
"Примерами технологий из второй группы являются Java Applets, Flash, Silverlight. 
Здесь к минусам"
"можно отнести необходимость наличия плагина и/или специальной среды
выполнения, другими словами,"
отсутствует возможность запуска сразу «из коробки»
"ПРИКАСПИЙСКИЙ ЖУРНАЛ: управление и высокие технологии, № 2 (58), 2022 г. 71
Далее можно выделить более современное решение, которое в сравнении с
рассмотренными ранее"
"решениями делает уверенный шаг вперед – это asm.js. Asm.js является
подмножеством JavaScript, с более"
"высокой оптимизацией. При работе с asm.js вводятся определенные ограничения – 
только конструкции"
"«if» и «while», данные только в числовом формате, то есть строки и объекты в
использовании недоступны,"
функции только в именованном формате [4].
"Скрипты, написанные на этом подмножестве, подлежат эффективной компиляции:
типы данных"
"переменных определяются статически с использованием вывода типов. Используется
в основном"
"в качестве промежуточного языка для компиляции с таких языков, как C/C++ и
используется в связке"
с такими инструментами, как Emscripten или Mandreel.
"Emscripten позволяет произвести оптимизацию кода и превратить его в asm.js-
нотацию, одной"
из примечательных черт которой является наличие множества побитовых ИЛИ (табл.
1).
Таблица 1 – Представление кода на asm.js
C/C++ Asm.js
int add(int a, int b){
return a + b;
}
function add(a, b){
return a | 0 + b | 0
}
"Это побитовое ИЛИ делает кое-что интересное со значениями. В этом случае оно
действует как"
"неявное приведение числа с плавающей запятой к числу int. Можно ознакомиться с
данным примером"
в консоли:
var x = 3.5 | 0
console.log(x) // 3
"Если скомпилированный код asm.js выполняет некоторую визуализацию, то, скорее
всего, он"
"обрабатывается WebGL и визуализируется с использованием OpenGL. Таким
образом, весь конвейер (рис. 1)"
"технически использует JavaScript и браузер, но почти полностью обходит фактический,
нормальный путь"
выполнения кода и рендеринга, который использует JavaScript на веб-странице [5].
Рисунок 1 – Компиляция и исполнение asm.js
"Как уже отмечено, asm.js – это подмножество JavaScript, которое сильно ограничено в
том, что он"
"может делать и как он может работать. Это сделано для того, чтобы
скомпилированный код asm.js мог"
"работать как можно быстрее, делая как можно меньше предположений, преобразуя
код asm.js"
"непосредственно в сборку. Вот основные моменты, которые позволяют asm.js быть
быстрее"
и эффективнее JavaScript:
"asm.js отказывается от абстракций высокого уровня, таких как объекты JavaScript;
asm.js не создает мусора, поэтому не нужно тратить время на сбор мусора;
asm.js использует преимущества рабочих потоков, открывая более быстрый
асинхронный код;"
"asm.js позволяет использовать некоторые библиотеки C/C++, такие как OpenCV и
Qhull."
"Тем не менее, несмотря на все преимущества asm.js, в данной работе отдается
большее предпочтение"
CASPIAN JOURNAL: Control and High Technologies, 2022, 2 (58)
72
"в сторону WebAssembly, который детально рассматривается далее. Asm.js мог
работать в основном"
"с естественной скоростью, но на самом деле он никогда не работал стабильно во всех
браузерах. Причина"
"в том, что кто-то пытался оптимизировать его одним способом, кто-то – другим, с
разными результатами."
"Со временем все стало сходиться, но основная проблема заключалась в том, что
asm.js не был фактическим"
"стандартом: это была неофициальная спецификация подмножества JavaScript, 
написанная одним"
"поставщиком, которая лишь постепенно вызывала интерес и признание со стороны
других."
"WebAssembly, с другой стороны, был разработан совместно со всеми разработчиками
основных"
"браузеров. В отличие от JavaScript, который можно было сделать быстрым, только
используя творческие"
"методы, или asm.js, который можно было сделать быстрым, используя простые
методы, хотя не все браузеры"
"делают это, WebAssembly предоставляет более формальный подход к тому, как его
оптимизировать [6]."
"Таким образом по рассмотренным решениям сформируем таблицу и добавим в нее
непосредственно"
WebAssembly (табл. 2).
"Таблица 2 – Сравнение решений, решающих проблему браузерного эффективного
исполнения кода"
Технология Годы
поддержки
Языки Архитектура Платформа
ActiveX 1996–2015 C++, Delphi, Visual Basic,
C#/VB.NET
"Механизмы OLE и COM Microsoft Windows,
macOS, Solaris"
Adobe Flash 1996–2017
ActionScript Виртуальная машина,
песочница
Microsoft Windows,
Android, Linux, macOS,
Solaris, BlackBerry OS
Microsoft
Silverlight 2007–2015
C#, C++, JavaScript,
Extensible Application
Markup Language, Visual
Basic
RIA (rich internet
application), песочница
Microsoft Windows,
macOS, Symbian OS
Native Client
(NaCi) и Portable
Native Client
(PNaCi)
2011–2017
C, C++, JavaScript,
Python, Ruby, Lua, Go
Песочница Windows, Linux, macOS,
Chrome OS
asm.js 2013 – наст.
время
C, C++, JavaScript, Rust,
Lua, Perl, Python, Ruby
Подмножество JavaScript,
AOT (ahead-of-time)
компиляция
Кроссплатформенное
WebAssembly 2017 – наст.
время
C, C++, C#, JavaScript,
Python, Go, Rust, Java,
PHP, Lua, COBOL and
other
Виртуальная машина,
песочница
Кроссплатформенное
"Основные особенности WebAssembly. WASM или WebAssembly – это бинарный
формат, который"
"совместим с браузером. Внутри технологии это – виртуальная машина, а на выходе – 
скомпилированное"
"представление с поддерживаемого высокоуровневого языка. При этом WASM – не
отдельный новый язык,"
"а скорее инструмент. В качестве примера можно представить Java байт-код для
виртуальной машины Java –"
"это результат компиляции, то есть запускаемый блок кода (табл. 3). WASM-формат
поставляется в браузер"
"и там же обрабатывается, однако само исполнение формально осуществляется не
браузером, а движком"
"самого JavaScript. Отсюда же следует, чтоб браузер не единственный вариант
использования, есть,"
"например, среда NodeJS, которая служит чаще всего для реализации серверной
составляющей приложений."
Таблица 3 – Информация о WebAssembly
WebAssembly
бинарный формат: виртуальная машина: результат компиляции:
(module
(table $table0 0 funcref)
(memory $memory (;0;)
"(export ""memory"") 1)"
"(func $fib (;0;) (export ""fib"") (param"
$var0 i32) (result i32)
(local $var1 i32)
block $label0
local.get $var0
…
"Сильные стороны технологии, за счет которых она выигрывает у рассмотренных
решений ранее,"
можно обобщить в 3 крупных пункта – актуальность, семантика и представление.
"Под актуальностью можно понимать активное развитие технологии, высокое
упоминание"
"в сообществе разработчиков, более простую интеграцию с современными
инструментами, множество"
доступных примеров и документации.
"Под семантикой имеется в виду независимость от языка, платформы, аппаратной
части, а также"
быстрое выполнение, безопасность и детерминированность.
file.wasm VM
"ПРИКАСПИЙСКИЙ ЖУРНАЛ: управление и высокие технологии, № 2 (58), 2022 г. 73
Представление – отличный формат, который достаточно компактный, простой для
генерации,"
"быстрый при декодировании, быстрый при компиляции, подходит для потоковой
передачи, а также"
допускает параллелизм.
"WebAssembly отличен от JavaScript, но он не предназначен для замены, он
используется для"
"дополнения и работы вместе с JavaScript, позволяя веб-разработчикам использовать
сильные стороны"
обоих языков.
"JavaScript – это гибкий язык высокого уровня, достаточно выразительный для
написания"
"масштабируемых веб-приложений и не только, часто он используется в
робототехнике,"
"программировании различных плат, игровой индустрии и мобильной разработке. У
него много"
"преимуществ – он динамически типизируется и имеет огромную экосистему, которая
предоставляет"
мощные фреймворки, библиотеки и другие инструменты [7].
"WebAssembly – это низкоуровневый язык, похожий на ассемблер, с компактным
двоичным"
"форматом, который предоставляется языкам с низкоуровневыми моделями памяти,
такими, как,"
"например, C и Rust. Цель компиляции заключается в том, чтобы они могли работать в
вебе, то есть"
"структурно WASM можно представлять как связующую прослойку между такими
языками и браузером."
"Также WebAssembly имеет высокоуровневую цель поддержки языков с моделями
памяти со сборкой"
мусора в будущем [8].
"В глобальном смысле WebAssembly – это виртуальная стековая машина с памятью,
исполняющая"
"инструкции. Простота данной концепции позволяет быть доступной ей для
современного процессора."
"Схема взаимодействия браузера в качестве среды исполнения, канала сообщений
представленного"
"JavaScript и непосредственно формата WASM, полученного при компиляции из другого
языка,"
представлена на рисунке 2.
Рисунок 2 – Схема работы WebAssembly в браузере
"Предлагаемые решения. В первую очередь ознакомиться с данной технологией можно
с помощью"
простого онлайн-инструмента WasmFiddle, представленного на рисунке 3.
Интересовать здесь могут 4 области:
в левом верхнем углу – исходный код на языке C;
"в левом нижнем углу – результат компиляции, доступный в нескольких форматах
(текстовом,"
JavaScript-массиве чисел, Firefox x86-формате и др.);
"в правом верхнем – собранная и подготовленная к выполнению на JavaScript сборка;
в правом нижнем – результат выполнения, вывод."
"Для того чтобы опробовать WasmFiddle, будем использовать рекурсивную функцию
расчёта n-го"
числа Фиббоначи:
int fibRecursive(int number) {
if (number == 0) return 0;
else {
if ((number == 1) || (number == -1)) return 1;
else {
"if (number > 0) return fibRecursive(number - 1) + fibRecursive(number - 2);
else return fibRecursive(number + 2) - fibRecursive(number + 1);"
}
}
}
CASPIAN JOURNAL: Control and High Technologies, 2022, 2 (58)
74
Рисунок 3 – Интерфейс WasmFiddle
"На выходе компиляции результатом становится WASM-файл, его текстовое
представление"
"позволяет разобраться в том, что именно содержит сборка, какие таблицы, операции и
код. С его помощью"
"можно определять, что именно экспортируется наружу в виде страницы памяти и
функций. Также это"
"представление используется для отладки (табл. 3). В готовом виде для использования
в JavaScript-среде"
"это будет выглядеть следующим образом (один из вариантов представления WASM):
const wasmCodeArray = new Uint8Array([0, 0, 1, 1, 11, 10, 7, 112, 7, 2, 11, 109, 114, 10, 0,
0, 1, 134, 128,"
"0, 10, 0 , 96, 1, 11, 1, 127, 12, 127, 3, 13, 12, 128, 22, 10, 1 … 0, 65, 12, 11, 12, 1, 11, 1, 11, 
10, 10, 1, 1, 0, 1, 1,"
0, 0]);
"Здесь WASM описывается в виде массива чисел, но на практике WASM-файл будет
значительно"
"больше, и его загрузка должна быть выполнена соответствующим образом с какого-
либо источника,"
например со стороны сервера.
"Исполнение WebAssembly в браузере происходит следующим образом: браузер
отрисовывает htmlстраницу в обычном режиме с привязанными к ней скриптами,
которые, в свою очередь, уже выполняют"
"загрузку и подготавливают к работе WebAssembly – получается особый модуль
(WebAssembly module),"
"а затем создаётся его экземпляр, после этих действий с его помощью можно вызывать
доступные для"
экспорта функции [9].
"const module = new WebAssembly.Module(wasmCodeArray);
const wasmInstance = new WebAssembly.Instance(module, []);
console.log(wasmInstance.exports.fibRecursive (12));"
"Данный способ подходит для понимания работы технологии, однако использовать
такой подход"
"в выпускаемом продукте нецелесообразно, и здесь становится актуален компилятор,
например"
"Emscripten. Это наиболее предпочтительный компилятор для работы с asm.js и
WebAssembly при"
"получении их из C/C++. Также существуют компиляторы и под другие языки, например
Go, C#, Python,"
Rust, TypeScript и многие другие.
Компиляция в asm.js: > emcc -o1 fibRecursive.c -o fibRecursive.html
"Компиляция в wasm: > emcc -o1 fibRecursive.c -o fibRecursive.html –s WASM=1
Установка Emscripten довольно проста – загрузка с официального сайта, распаковка
файлов"
"и выполнение нескольких консольных команд. После этого компилятор можно
свободно использовать."
"В результате мы получаем html-файл с основной структурой, js-файл с набором общих
сервисных"
функций и, конечно же, wasm-файл.
"Emscripten успешно развивается и уже поддерживает ряд привлекательных
возможностей, среди них:"
стандартные библиотеки для С и С++;
OpenGL, EGL - 2D/3D-графика на основе WebGL;
SDL 2 – различный ввод (клавиатура/мышь/джойстики), видео, звук;
OpenAL – звук;
эмуляция файловой системы (Emscripten File System Overview);
"EM_ASM(""JS code"") – исполнение JavaScript-кода, сформированного в виде строки
[10]."
"ПРИКАСПИЙСКИЙ ЖУРНАЛ: управление и высокие технологии, № 2 (58), 2022 г. 75
Обзор нескольких видов программ. Для исследования скорости исполнения WASM-
модулей"
"будем использовать некоторые функции, написанные на языке C/C++ и собранные в
качестве модулей"
"WebAssembly с помощью WasmFiddle, рассмотренного ранее, и противопоставленные
им функции"
на языке JavaScript.
Среди примеров кода представлены:
"рекурсивная функция расчёта n-го числа Фиббоначи, на примере которой была
рассмотрена"
работа с WasmFiddle;
"итеративная реализация предыдущей функции:
function fibIter (number) {"
let a = 0; let b = 1;
for (let i = 2; i <= number; i++) {
let c = b;
b = a + b;
a = c;
}
return b;
}
простая функция перемножения чисел:
function jsMultiplyInt(a, b, size) {
let c = 1.0;
for (let i = 0; i < size; i++) {
c = c * a * b;
}
return c;
}
простая функция перемножения векторов:
function jsMultiplyIntVec(src1, src2, res, size) {
for (let i = 0; i < size; i++) {
res[i] = src1[i] * src2[i];
}
}
"Сама процедура тестирования будет проходить с помощью специального скрипта,
нацеленного"
"на фиксирование времени исполнения стандартной функции, а затем функции уже в
WASM-формате"
с последующим расчетом ускорения.
"JavaScript-файл будет содержать помимо самих тестируемых функций ещё и логику
самого"
"тестирования. В специальном объекте storage по уникальным ключам будет храниться
время исполнения"
той или иной функции:
const jsId = 'js';
const wasmId = 'wasm'
let storage = {};
storage[jsId] = 0;
storage[wasmId] = 0;
"Далее реализована функция, которая выполняет замер времени исполнения
переданной в качестве"
"аргумента функции и аргументов для неё, представленных массивом. Выглядит она
следующим образом:"
function execFunc(func, execFuncOptions) {
"const { arrArgs, funcCallCount } = execFuncOptions;
func(...arrArgs); // warming up"
let elapsedTime = 0;
for (let i = 0; i < funcCallCount; i++) {
const start = performance.now();
func(...arrArgs);
const end = performance.now();
elapsedTime += end - start;
}
return elapsedTime;
}
"Здесь перед замером производится неучитываемый запуск вне цикла, для
однозначного понимания"
"работоспособности переданной функции, после производятся временные замеры с
помощью"
"специальной стандартной функции языка performance.now(), вычисляется разность
между временной"
"меткой до начала выполнения и временной меткой после выполнения вычислений, что
как раз таки будет"
"означать время исполнения самой функции, далее полученное время возвращается
наружу."
"Далее подготовим сами функции к тестированию и данные для них. Функция на
JavaScript:"
CASPIAN JOURNAL: Control and High Technologies, 2022, 2 (58)
76
function jsMultiplyInt(a, b, n) {
let c = 1.0;
for (ley i = 0; i < n; i++)
c = c * a * b;
return c;
}
И она же (в исходном виде на C), но только в виде WASM-модуля:
"const wasmCodeArr = new Uint8Array([1, 1, 0, 97, 115, 109, 1, 0, 0, 0, 2, 2, 6, 100, 101, 
109, 1, 136, 128,"
"128, 128, 127, … 128, 0, 1, 0, 132, 2, 128, 128, 1, 128, 1, 0, 1, 112, 0, 0, 0, 11, 5, 131, 1, 2, 
2, 65, 127, 106, 34,"
10, 2, 13, 0, 11, 11, 10, 32, 3, 10, 21, 11]);
const wasmExportModule = new WebAssembly.Module(wasmCodeArr);
"const wasmInstanceFunctions = new WebAssembly.Instance(wasmExportModule, []);
Данные для тестирования будем использовать следующие:
const num = 99999999;"
const arr = [num, num, num];
"Осуществим печать полученных функций в консоль:
const jsFunc = jsMultiplyInt;"
"const wasmFunc = wasmInstanceFunctions.exports.multiplyInt;
console.log(jsFunc);"
console.log(wasmFunc);
"И наконец реализация самой основной функции, test-запуск которой полностью
производит нужный"
"тест. Представлен будет основной фрагмент без промежуточных приготовлений:
setTimeout(() => {"
"const wasmTime = execFunc(wasmFunc, execFuncOptionsWasm, wasmId);
storage[wasmId] += wasmTime;"
setTimeout(() => {
"const jsTime = execFunc(jsFunc, execFuncOptionsJs, jsId);
storage[jsId] += jsTime;"
const wasmAcceleration = jsTime / wasmTime;
"console.log(`WASM acceleration = (jsTime: ${jsTime} / wasmTime: ${wasmTime}) =
${wasmAcceleration}`);"
resetStorage(storage, jsId, wasmId);
});
});
Здесь стоит коснуться основных моментов:
"каждый запуск execFunc с помощью setTimeout выносится в независимый стек
вызовов, то есть"
"запуск производится в независимом пространстве, где основным вычислениям ничего
мешать не будет;"
"для корректной записи результатов используются ранее созданные идентификаторы
jsId"
"и wasmId, которые нужны для доступа к объекту storage;
после вычислений производится расчет ускорения."
"Результаты и замеры. Далее в уже рассмотренном формате произведём замеры для
всех"
"представленных ранее видов программ с помощью реализованного скрипта. Разница
в тестах будет"
"минимальная – обеспечить нужно будет лишь подачу различных аргументов на вход
функциям."
"Таблица 4 – Рекурсивная функция расчёта n-го числа Фибоначчи, количество запусков
10"
N JS, мс. WASM, мс. Ускорение
40 10106,2 5710,5 1,77
41 16361,3 9191,8 1,78
42 27074,2 15094,1 1,79
43 44069,4 24318,9 1,81
44 70758,5 38957,2 1,81
"ПРИКАСПИЙСКИЙ ЖУРНАЛ: управление и высокие технологии, № 2 (58), 2022 г. 77
Рисунок 4 – Рекурсивная функция расчёта n-го числа Фибоначчи, количество запусков
10"
"Таблица 5 – Итеративная функция расчёта n-го числа Фибоначчи, количество запусков
1 000 000,"
диапазон значений 40–44
N JS, мс. WASM, мс. Ускорение
40 468,9 454,0 1,03
41 477,3 441,0 1,08
42 466,89 434,0 1,07
43 468,4 479,2 0,98
44 471,0 446,1 1,05
"Рисунок 5 – Итеративная функция расчёта n-го числа Фибоначчи, количество запусков
1 000 000, диапазон значений"
40–41
CASPIAN JOURNAL: Control and High Technologies, 2022, 2 (58)
78
"Таблица 6 – Итеративная функция расчёта n-го числа Фибоначчи, количество запусков
1 000 000,"
диапазон значений 100–500
N JS, мс. WASM, мс. Ускорение
100 585,7 553,8 1,06
200 777,7 616,2 1,26
300 937 680,1 1,37
400 1087,8 745,2 1,46
500 1250,6 774,4 1,61
"Рисунок 6 – Итеративная функция расчёта n-го числа Фибоначчи, количество запусков
1 000 000, диапазон значений"
100–500
"Таблица 7 – Итеративная функция расчёта n-го числа Фибоначчи, количество запусков
1 000 000,"
диапазон значений 1000–5000
N JS, мс. WASM, мс. Ускорение
1000 2111,7 966,0 2,19
2000 3785,3 1464,5 2,58
3000 5399 1945,8 2,77
4000 6945,5 2491,3 2,79
5000 8549,5 3039,9 2,81
"Рисунок 7 – Итеративная функция расчёта n-го числа Фибоначчи, количество запусков
1 000 000, диапазон значений"
1000–5000
585.7
777.7
937
1,087.8
1,250.6
553.8
616.2
680.1
745,2 774,4
0
200
400
600
800
1000
1200
1400
1.002E+14
Время исполнения, мс.
Число последовательности
Итеративная функция Фибоначи
JS WASM
2,111.7
3,785.3
5399
6,945.5
8,549.5
966
1,464.5
1,945.8
2,491.3
3,039.9
0
1000
2000
3000
4000
5000
6000
7000
8000
9000
1.0002E+19
Скорость исполнения, мс.
Итеративная функция Фибоначи
JS WASM
"ПРИКАСПИЙСКИЙ ЖУРНАЛ: управление и высокие технологии, № 2 (58), 2022 г. 79
Таблица 8 – Функция перемножения целых чисел, где n – число перемножений
(аргументы: a = 33,"
b = –4), количество запусков 100 000
N JS, мс. WASM, мс. Ускорение
10 42,5 41,2 1,03
25 50,2 47,6 1,05
50 56,8 48,2 1,18
75 72,8 48,6 1,5
100 78 50,5 1,54
125 78,9 55,3 1,43
150 85,1 57,6 1,48
"Рисунок 8 – Функция перемножения целых чисел, где n– число перемножений
(аргументы: a = 33, b = –4), количество"
запусков 100 000
"Таблица 9 – Функция перемножения целых чисел, где n – число перемножений
(аргументы: a = 33,"
b = –4), количество запусков 100 000
N JS, мс. WASM, мс. Ускорение
1000 311,5 143,6 2,17
2000 599 255,10 2,34
3000 859,2 344,5 2,5
4000 1115,8 440,7 2,53
5000 1426,0 559,2 2,55
6000 1676,3 651,2 2,57
"Рисунок 9 – Функция перемножения целых чисел, где n – число перемножений
(аргументы: a = 33, b = –4), количество"
запусков 100 000
42.5
50.2
56.8
72.8
7,878.9
85.1
41.2
47,6 48,2 48,6 50,5 55,3 57,6
0
20
40
60
80
100
1.02551E+16
Скорость исполнения, мс.
Число перемножений
Функция перемножения целых чисел
JS WASM
311.5
599
859.2
1,115.8
1426
1,676.3
143.6
255,1 344,5 440,7
559,2 651,2
0
500
1000
1500
2000
1.0002E+23
Скорость исполнения, мс.
Число перемножений
Функция перемножения целых чисел
JS WASM
CASPIAN JOURNAL: Control and High Technologies, 2022, 2 (58)
80
"Таблица 10 – Функция перемножения целых чисел, где n – число перемножений
(аргументы: a = 33,"
b = –4), количество запусков 100 000
N JS, мс. WASM, мс. Ускорение
10000 2753,1 1063 2,58
25000 6820,6 2621,5 2,6
50000 13571,2 5105,9 2,65
75000 20556,8 7701,5 2,67
100000 27000,4 10293,6 2,62
"Рисунок 10 – Функция перемножения целых чисел, где n – число перемножений
(аргументы: a = 33, b = –4),"
количество запусков 100 000
"Таблица 11 – Функция перемножения векторов размерности N, количество запусков 10
Рисунок 11 – Функция перемножения векторов размерности N, количество запусков 10, 
размерности 250, 500, 100"
2,753.1
6,820.6
13,571.2
20,556.8
27,000.4
1063
2,621.5
5,105.9
7,701.5
10,293.6
0
5000
10000
15000
20000
25000
30000
1.00003E+25
Скорость исполнения, мс.
Число перемножений
Функция перемножения целых чисел
JS WASM
0.3
0.7
1.4
0.199
0.6
1.7
0
0.5
1
1.5
2
2505001000
Скорость исполнения, мс.
Размерность вектора
Функция перемножения векторов
JS WASM
N JS, мс. WASM, мс. Ускорение
250 0,3 0,199 1,5
500 0,7 0,6 1,166
1000 1,4 1,7 0,823
6000 3,7 10,9 0,34
10000 3,2 13,9 0,23
16000 2,2 25,5 0,024
"ПРИКАСПИЙСКИЙ ЖУРНАЛ: управление и высокие технологии, № 2 (58), 2022 г. 81
Рисунок 12 – Функция перемножения векторов размерности N, количество запусков 10, 
размерности 250, 500, 100"
Оценим полученные результаты по каждой из протестированных функций.
"Рекурсивная функция расчёта n-го числа Фибоначчи. В работе рекурсивной функции
WASM"
"прослеживается стабильное ускорение на 25–35 %. В тесте представлен диапазон
значений от 40 до 44,"
"однако изменение входных значений функции кардинального влияния на полученное
ускорение не"
"оказывает. Таким образом, в случае использования функций с нагруженным стеком
вызовов есть смысл"
отдать предпочтение в сторону использования WASM-версии.
"Итеративная функция расчёта n-го числа Фибоначчи. В отличие от рекурсивного
варианта,"
"итеративный вариант функции, который сам по себе является гораздо более
эффективным, не может"
"гарантировать хотя бы такую же скорость исполнения, как и функция на стандартном
JavaScript. Было"
"взято несколько диапазонов входных значений, как те, что были использованы для
тестирования"
"рекурсивной функции, так и намного большие. Наблюдалась небольшая тенденция
роста ускорения"
"с увеличением входных данных в пределах трёхзначных значений, но так или иначе
это все еще хуже"
"исходного JavaScript-варианта без портирования кода. То есть в случае данного теста
нет никакой выгоды"
в использовании WASM.
"Функция перемножения целых чисел. Тестирование производилось с одинаковыми
аргументами"
"с увеличением количества перемножений. JavaScript показывал лучшие результаты с
малым числом"
"перемножений, при 25 перемножений результаты стали одинаковыми, далее с
последующим"
"увеличением числа перемножений ускорение в пользу WASM было равно в пределах
10 %."
"Функция перемножения векторов. При векторном перемножении WASM показывал
хорошие"
"результаты на относительно небольших векторах (длина 250–500). С увеличением
длин векторов очень"
сильно упала производительность и смысл использования технологии пропал вообще.
"Полученные результаты дают возможность сделать вывод о том, что использовать
WebAssembly"
"не всегда эффективно, а иногда и очень невыгодно с точки зрения
производительности. Выделим"
несколько моментов, влияющих на производительность.
"Работа с памятью и вызовы функций. WebAssembly может терять в
производительности при"
"многократных вызовах JavaScript-кода. Технология пока ещё теряет в
производительности при работе"
"с памятью: обращение выполняет проверку на выход за границы доступного блока
памяти."
"Также WebAssembly может выигрывать за счёт типа целых переменных. В JS есть
только тип"
"Number, фактически это всегда 64-разрядный тип с плавающей точкой и целые числа
здесь – это"
"плавающее число без дробной части. При JS-компиляции для целочисленных в
движке используется"
"64-разрядный целый тип [11]. В WASM же предоставляется возможность
самостоятельно выбрать"
"разрядность типа, и если мы используем 32-разрядный целый тип, то есть
возможность получить"
"преимущество в скорости вычислений, так как операции над 32-разрядными числами
немного быстрее,"
чем над 64-разрядными целыми в JavaScript [10].
"Как показала практика, для каждого алгоритма стоит индивидуально определять,
будет ли получен"
"прирост скорости с применением WebAssembly. Произведенные опыты позволяют
сделать основной"
"вывод, что для обильных вычислений, скорее всего, будет получена более или менее
ощутимая выгода."
"Выводы. В сравнении с JavaScript, получается, что в среднем WASM быстрее, но при
этом"
"возможны индивидуальные ситуации, в которых необходимо разбираться детальнее,
потому что"
3,7 3,2 2,2
10.9
13.9
25.5
0
5
10
15
20
25
30
6.0001E+13
Скорость исполнения, мс.
Размерность вектора
Функция перемножения векторов
JS WASM
CASPIAN JOURNAL: Control and High Technologies, 2022, 2 (58)
82
"возможен случай получения производительности не только в несколько раз лучше, но
так и значительно"
хуже. Это может зависеть и от используемого браузера, а также его версии.
"В каком-то смысле максимально допустимая производительность JS и WASM 
одинакова, так как оба"
"в итоге преобразуются к низкоуровнему коду процессора. WASM показывает хорошие
результаты"
"на объёмных вычислениях, но там, где много операций с памятью WASM, уступает,
поскольку основная"
проблема здесь – это медленный канал общения между JS и WASM.	
"В июле 2019 года вышла статья «Not So Fast: Analyzing the Performance of 
WebAssembly vs. Native"	
"Code» [12]. Авторами была реализована возможность запуска консольных утилит Linux 
с использованием"	
"WASM, а также ряда тестов для определения производительности в сравнении с
этими же тестами,"	
запущенными на asm.js и стандартном коде.	
Результаты были получены следующие:	
"WASM в среднем на 30 % быстрее, чем JavaScript (на рассмотренных тестах);
WASM в среднем на 50 % медленнее, чем родной код (на рассмотренных тестах)."	
"Авторы статьи также произвели анализ того, что именно не позволяет WASM работать
быстрее:"	
"примерно вдвое больше операций загрузки/сохранения данных по сравнению с
родным кодом;"	
"больше ветвлений – необходимость дополнительных проверок при обращении к
памяти;"	
больше «кеш-промахов» уровня L1 [12].	
"В результате проделанного исследования можно выделить основные причины
применения"	
рассмотренной технологии:	
увеличение скорости ряда вычислений;	
"использование кода на сторонних языках – портирование (C/C++);
уменьшение времени загрузки приложения."	
"Уже сейчас WebAssembly активно применяется в следующем:
графические редакторы, CAD-системы – например, Figma, AutoCAD;
эмуляторы, виртуальные машины – например, DOSBox;
веб-клиенты, активно использующие шифрование;
кодеки и фильтры для аудио/видео – например, ffmpeg;
базы данных– например, sqlite;"	
игры, игровые движки, движки физики, VR/AR – например, Godot, Doom 3.	
"В будущем среди новых возможностей технологии ожидаются блоковые операции над
памятью,"	
поддержка SIMD-инструкций, поддержка и использование потоков [10].	
"Так или иначе WASM – это новая развивающаяся технология, которая, как и любая
другая"	
"поддерживаемая, предоставляет полезную и интересную альтернативу в мире веб-
технологий для"	
"решения ряда различных задач. Её применение в определённой обстановке может
положительно"	
"повлиять на скорость выполнения кода в браузере, следовательно, следить за
развитием данной"	
технологии и по возможности внедрять достаточно целесообразно.	
ТЕХНОЛОГИИ ОПТИМИЗАЦИИ РАБОТЫ САЙТА	НА ПРИМЕРЕ АНАЛИТИЧЕСКОЙ СИСТЕМЫ
ПУБЛИКАЦИОННОЙ АКТИВНОСТИ ПЕНЗЕНСКОГО ГОСУДАРСТВЕННОГО УНИВЕРСИТЕТА	
Оптимизация производительности web-сайтов является приоритетом
"при их администрировании в современных условиях борьбы за трафик. Согласно
отчету о цифровой сфере Digital 2020 число активных пользователей
© Торопкин Р. А., Зиновьев Я. В., Рассказов Н. С., Митрохин М. А., 2020
72"
"интернета достигло отметки 4,5 млрд человек [1]. Растет и количество webсайтов, а
вместе с тем развивается и их структура. Из простых ресурсов, содержащих
статический контент, web-приложения эволюционировали до"
"сложно сконструированных платформ, решающих большой спектр задач в
области визуализации данных сети Internet."
"Избыток информации приводит к тому, что пользователь становится
более прихотливым в процессе поиска информации и к современным сайтам
предъявляются все более высокие требования, в том числе и по скорости загрузки."
"Исследование компании Radware показало, что 47 % пользователей
ожидают, что страница загрузится не более чем за 2 с, а если время загрузки
составляет более 3 с, то 40 % клиентов сразу покинут сайт [2]. Поэтому задача
оптимизации скорости загрузки сайта является одной из наиболее приоритетных."
"На рынке существует множество способов, позволяющих уменьшить
время загрузки страниц, но все они решают задачи:"
− уменьшения объема загружаемых данных;
"− сохранения части информации на устройстве пользователя или кэширования;
− «визуальной» оптимизации web-страницы."
"В ходе решения данных задач рассмотрим наиболее эффективные варианты
клиентской оптимизации и их применение на примере аналитической
системы публикационной активности ПГУ."
Материалы и методы
Современные web-приложения используют все больше вычислений на
"стороне клиента, что вместе со сторонними библиотеками значительно увеличивает
объем передаваемой на пользовательское устройство информации."
"Данную проблему помогают решить минификация кода и применение различных
инструментов для сборки, таких как gulp, Webpack. Так называемые
«сборщики» обладают огромным функционалом по оптимизации webприложения,
который позволяет:"
− указывать среду, это означает, что при компиляции в финальную
"сборку не будут включаться различные артефакты тестирования и разработки;
− минимизировать исходные JavaScript-файлы, а также различные"
"версии исходной карты (source map), размер которой также возможно уменьшить до
двух раз;"
− использовать различные плагины для оптимизации сборки, дающие
"возможность формировать .gz файлы, импортировать только отдельные модули из
библиотек или дедуплицировать похожие файлы. Наиболее популярные из них:
compression-webpack-plugin, dedupe-plugin, uglifyjs-plugin, ignoreplugin;
− анализировать размеры используемых зависимостей;"
− создавать дерево зависимостей и определять необходимые ресурсы
"для каждой страницы. Данный подход к оптимизации доступен для React и
Vue и позволяет значительно ускорить загрузку каждой страницы."
73
Серьезным шагом в развитии web-технологий стало использование
"Single Page Applications (SPA), т.е. разработка таких сайтов, в ходе взаимодействия с
которыми происходит загрузка только необходимой информации,
а не всей страницы целиком. Классические многостраничные web-ресурсы
(Multi Page Application (MPA)) отправляют запрос при каждом незначительном
изменении на странице, что приводит к ее принудительному обновлению. Single Page 
Applications устроены немного иначе, они используют динамическое обновление DOM-
дерева, что позволяет исключить перезагрузку
web-страницы."
"Сравнение технологий многостраничных и одностраничных webприложений приведено
на рис. 1."
Рис. 1. Сравнение Multi Page Application и Single Page Applications
"Наиболее популярны SPA-решения с использованием таких JavaScript
библиотек и фреймворков, как React.js, Vue.js, Angular.js. Например, во Vue.js"
"и React технология SPA организована следующим образом: происходит копирование
DOM-дерева, его обработка и сравнение с исходным вариантом,
далее фреймворк заменяет части только тех элементов, которые отличаются
от первоначальной структуры DOM-дерева."
"В последнее время набирает популярность «отложенная загрузка» − оптимизация загрузки
медиафайлов и компонентов, не критичных для отображения web-страницы и взаимодействия
с интерфейсом. Чаще всего «ленивая"
"загрузка» применяется для элементов, расположенных за линией видимости
пользователя и отображаемых только после прокрутки. Отложенная загрузка
реализована во многих современных JavaScript фрейморках, таких как Vue.js,
Angular и React, где возможна настройка динамической загрузки маршрутов"
"и компонентов. Оценить, насколько эффективным окажется применение отложенной
загрузки изображений возможно для конкретного сайта, проверив
его на ресурсе Google PageSpeed Insights (рис. 2)."
74
Рис. 2. Рекомендации Google PageSpeed Insights
"Также рекомендуется использование экономичных форматов файлов,
позволяющих сократить объем передаваемого трафика. Например, формат
WebP дает возможность экономить до 34 % при конвертировании картинки
из JPG и 45 % для PNG [3]. Поддержка данного формата уже присутствует у
79,2 % пользователей интернета. Результаты анализа представлены на рис. 3."
"Рис. 3. Результат анализа наличия поддержки браузерами формата WebP
Еще одним способом, позволяющим уменьшить объем загружаемых
файлов, а также снизить нагрузку на устройство при рендеринге страницы,
является использование серверного рендеринга, при этом вся нагрузка по
отображению страницы ложится на сервер, а ресурсы клиентского устройства
освобождаются для других процессов [4]. Скорость загрузки при серверном
рендеринге увеличивается до двух раз, так как отсутствует обработка кода
JavaScript процессором, а загружаются только текст и ссылки. Схема отображений
страниц представлена на рис. 4."
"Одним из прогрессивных способов кэширования является использование «сервис-
воркеров». В данном случае сайт разделяется на две части: со
статическим и динамическим контентом, при этом при повторной загрузке,"
"скачивается только часть с уникальным контентом и объединяется со статическим [5]. 
Сравнение скорости загрузки по метрике First Contentful Paint, характеризующей
скорость загрузки на сайте первых элементов, показало снижение нагрузки на сетевой
трафик на 47,6 % и повышение скорости"
отображения первых элементов на 40 % (рис. 5).
75
Рис. 4. Загрузка страницы при серверном рендеринге
Рис. 5. Сравнение скорости рендера элементов на сайте
Результаты
"Описанные технологии были применены в аналитической системе публикационной
активности ПГУ. Современные аналитические системы содержат множество числовых
данных, оптимальным представлением для которых"
"является использование графиков и диаграмм. С технической точки зрения
визуализация информации посредством диаграмм довольно трудозатратна и
требует большого количества вычислительных ресурсов. Данную проблему"
"решает JavaScript библиотека – Chart.js. Использование формата svg в совокупности с
частичным аппаратным ускорением позволяет добиться значительного прироста
производительности. В библиотеке Chart.js применена"
"технология асинхронного рендеринга, что позволяет не загружать ядро
JavaScript продолжительное время. Таким образом, данный модуль позволил
внедрить «живые» графики на сайт анализа публикационной активности
ПГУ1 без сильного ущерба производительности. Более того, это дало воз-"
"1 При поддержке конкурса «Ректорские гранты – 2020». Номер договора:
ХП-107/20."
76
"можность сократить срок разработки, так на реализацию собственного решения с
помощью встроенной библиотеки canvas ушло бы много ресурсов, что
является критическим фактором при создании web-приложений."
"При разработке высоконагруженных систем немаловажным параметром остается
качество сборки web-приложения. Проектируя web-ресурс, разработчик
взаимодействует с множеством различных библиотек и модулей,
с десятками, а порой и сотнями файлов .js и .css. Появляется очевидная проблема,
состоящая в сложности управления порядком загрузки различных"
"файлов и модулей для поддержания работоспособности приложения. Для решения
данной проблемы в системе анализа публикационной активности ПГУ
был применен статический модульный сборщик для приложений «Webpack»."
"Данный инструмент позволяет выполнять сборку js-файлов в оптимальном,
правильном порядке. Стоит отметить, что Webpack v4+ по умолчанию поддерживает
минимизацию кода, что в общем случае дало возможность сократить
размер файлов сайта от 30 до 40 %, исходя из анализа, представленного
на рис. 3. В итоге удалось увеличить время загрузки web-сайта на 40 %."
"За счет использования технологии SPA, применяемой в системе публикационной
активности ПГУ, удалось значительно повысить производительность конечного web-
сайта. По статистике среднее значение глубины"
"просмотра для информационного портала составляет 3–4 страницы [6]. В результате
применения Single Page Applications пользователь в среднем получает доступ к"
"информации на 9–12 с раньше по сравнению с Multi Page Application (при средней
скорости загрузки страницы в 2 с [7] при использовании"
"MPA). Данная технология позволила в кратчайшие сроки добавить новый
модуль выгрузки данных. Данный подход дал возможность:"
− избавиться от создания новых страниц;
− не дублировать html/css код;
− сохранить единообразие контента;
− использовать существующий API.
Заключение
"Таким образом, построение эффективных высоконагруженных систем
требует комплекса мероприятий, направленных на повышение отклика,
а также скорости загрузки и отображения конечного web-ресурса. Применение
рассмотренных методов оптимизации web-интерфейса позволяет сократить время
загрузки страницы на 40 % по сравнению с неоптимизированным
вариантом. Минимизация времени отклика способствует более комфортной
работе с web-приложением, что наряду с оптимизацией web-интерфейса позволяет
сформировать положительный опыт эксплуатации пользователям."
"Разработка корпоративной информационной системы для управления контентом
интернет-ресурса предприятия"
"По данным Федеральной службы государственной статистики, в Московском регионе в
производственной сфере 99.8% организаций используют глобальные
информационные сети. В Таблице 1 представлены сведения о доле"
Центр научного сотрудничества «Интерактив плюс»
2 https://interactive-plus.ru
"Содержимое доступно по лицензии Creative Commons Attribution 4.0 license (CC-BY 4.0)
организаций Московского региона, применявших глобальные информационные
сети, разграниченные по некоторым видам экономической деятельности в сфере
производства."
Таблица 1
"Число организаций Московского региона, использовавших глобальные
информационные сети, по видам экономической деятельности"
"(в процентах от общего числа обследованных организаций
соответствующего вида деятельности)"
Организации,
использовавшие
глобальные
информационные сети
Из них сеть
Интернет
Организации,
имевшие интернетресурс
"Металлургическое производство и производство готовых
металлических изделий"
100,0 100,0 83,3
"Производство машин и оборудования производство электрооборудования,
электронного и"
оптического оборудования
100,0 100,0 81,1
Производство транспортных
средств и оборудования 100,0 100,0 81,3
"Управление контентом – информационным содержимым – интернет-ресурса
предприятия осуществляется с использованием специализированного программного
обеспечения. Существующие программные продукты, предназначенные для решения
такого рода задач, признаны специалистами надёжными и безопасными."
"Однако, стоит обратить внимание на следующую проблему: анкетирование
сотрудников, не являющихся техническими специалистами, показало, что
программные продукты, обладающие, по данным сравнительных анализов, наиболее
широкими функциональными возможностями, являются трудными для освоения."
"Программы обучения, разработанные авторизованными учебными центрами,
помогают пользователям овладеть только самыми простыми операциями."
"По данным опросов слушателей учебных курсов по работе с информационными
системами для управления контентом, пользовательский интерфейс наиболее
Scientific Cooperation Center ""Interactive plus"""
3
"Content is licensed under the Creative Commons Attribution 4.0 license (CC-BY 4.0)
распространённых и качественных программных продуктов, решающих данные
задачи, не является интуитивно понятным для них. Большинству слушателей не
удаётся овладеть навыками грамотного и профессионального контент-менеджмента."
"Отсутствие на рынке коммерческого программного обеспечения качественного,
безопасного и доступного для освоения пользователям программного продукта для
управления контентом интернет-ресурса предприятия делает необходимым
разработку такого продукта и требований к нему."
Интернет-ресурс предприятия выполняет следующие задачи:
1. Представление информации о деятельности предприятии.
2. Представление информации о продукции предприятия.
3. Представление информации об истории и структуре предприятия.
4. Привлечение клиентов и партнёров.
5. Приём и обработка заказов.
6. Представление информации об актуальных вакансиях предприятия.
7. Представление информации о достижениях предприятия.
"8. Проведение специалистами маркетингового отдела исследований целевой
аудитории."
9. Представление актуальной информации о проводимых мероприятиях.
10. Представление актуальной информации об отрасли.
11. Организация электронного документооборота.
12. Получение и обработка почты.
13. Организация рассылок для пользователей и сотрудников.
"В связи с необходимостью решения данных задач к интернет-ресурсу предприятия
предъявляются следующие требования:"
1. Актуальность представляемой информации.
"2. Обеспечение круглосуточного и географически независимого доступа к
информации."
3. Корректная работа функциональных элементов.
Центр научного сотрудничества «Интерактив плюс»
4 https://interactive-plus.ru
"Содержимое доступно по лицензии Creative Commons Attribution 4.0 license (CC-BY 4.0)
4. Оптимизированный с точки зрения юзабилити интерфейс, интуитивно
понятный пользователям и сотрудникам."
5. Продуманная навигация интернет-ресурса.
6. Быстрый поиск необходимой информации.
7. Оптимально структурированная подача информации.
"Программный продукт, с помощью которого контент-менеджер осуществляет
управление контентом интернет-ресурса предприятия, должен быть эргономичным
инструментом для наполнения и редактирования интернет-ресурсов, соответствующих
данным требованиям и выполняющих поставленные задачи."
"Кроме того, он должен обеспечивать защиту корпоративной информации, позволять
оперативно вносить изменения в интернет-ресурс и предусматривать потенциальное
расширение функционала в соответствии с нуждами и особенностями
конкретного предприятия."
"Сотрудники, осуществляющие работу с контентом, должны иметь независимые
учётные записи, возможности которых зависят от набора рабочих задач
каждого пользователя. Руководители отделов и технические специалисты
должны иметь возможность управления уровнями доступа и набором возможностей
пользователей."
"Программный продукт должен позволять гибкую интеграцию в существующую
информационную систему предприятия, иметь возможность учитывать
структуру компании и поддерживать работу с большим количеством пользователей
разных отделов."
"Так как существующие программные продукты обладают достаточно широкими
функциональными возможностями, особое внимание при проектировании"
новой информационной системы следует уделить вопросам юзабилити и эргономики.
КОРПОРАТИВНЫЕ ИНФОРМАЦИОННЫЕ СИСТЕМЫ
"Особую роль среди информационных технологий играет технология
организационного управления. Информационная технология представляет собой
методы обработки и организационно-управленческие концепции формирования
и использования информации, а также совокупность всех видов
информационной техники; единство процедур сбора, накопления, хранения,
обработки и передачи данных с использованием определенного комплекса
технических средств. Поэтому наряду с понятием «корпорация» появилось и
широко используется такое понятие, как «корпоративная информационная
система» (КИС)."
"Понятие «корпорация» является очень широким, поэтому дать строгое
определение понятию КИС сложно. Будем определять КИС, как
информационную систему, пронизывающую все составляющие, которые
определяют функционирование корпорации. В частности, КИС включает
распределенный корпоративный комплекс технических средств, корпоративную"
"коммуникационную сеть, распределенную корпоративную базу данных,
корпоративную подсистему документооборота, корпоративную подсистему
поддержки принятия решений и т.д."		
"В современных условиях жизнедеятельность корпорации немыслима без
использования КИС. Неэффективная организация работы КИС грозит
значительными убытками для корпорации. Поэтому одним из важнейших
свойств, которыми должна обладать КИС – это живучесть. КИС, обладающая
свойством живучести, при возникновении нештатных ситуаций позволяет
использовать необходимые элементы защиты своего функционирования и
обеспечить стабильную работу корпорации [5]."		
"АБС – это комплекс программного и технического обеспечения,
направленный на автоматизацию банковской деятельности[4]."		
"Раньше при выполнении различных необходимых банковских процессов,
возникала необходимость обращаться к множеству различных систем для
выполнения разных задач, таких как управление взаимоотношениями с
клиентами контакт-центр банка, построение и управление бизнес-процессами и
так далее, что могло привести к множеству неудобств, таких как: допущение
большого числа ошибок, которые могли возникнуть в следствии
невнимательности человека, а также более долгий срок выполнения задач."		
"Сейчас существуют системы, которые охватывают функционал одновременно
нескольких систем – автоматизированные банковские системы. Использование
автоматизированных систем повышает уровень автоматизации деятельности
банка и формирует его общее информационное пространство [2]. Что в свою
очередь позволяет повысить эффективность работы филиалов банка, объединить
бухгалтерский и управленческий учет, обеспечить защиту информации и
высокую надежность сделок. Автоматизированные банковские системы
применяются как с целью увеличения прибыли коммерческого банка, так и для
расширения и развития банковского бизнеса в будущем [1]."		
"Наиболее часто используемыми программными продуктами для
автоматизации банковской деятельности являются: программные продукты
фирмы «Диасофт», среди них – «WorkFlow», «5NT», «Новая Афина», «Datagy»,
«Master», «Flextera»; продукты фирмы «Инверсия», к ним относятся: «БАНК XXI
ВЕК», Система «ФАКТОРИНГ»."		
"Позволяют работать с клиентами в различных часовых поясах, увеличить
объем предлагаемых банковских услуг для всех целевых категорий клиентов."		
ПРОЕКТИРОВАНИЕ	КОРПОРАТИВНОЙ ИНФОРМАЦИОННОЙ СИСТЕМЫ	ПРЕДПРИЯТИЯ
"Любая деятельность предприятия состоит из взаимодействия руководителя-заказчика
и подчиненного-исполнителя. Это касается как отношений"		
"внутри предприятия, так и взаимоотношений с внешними заказчиками, поставщиками,
и т.п."		
"Согласно требованиям стандарта ISO 9000:2000 выработаны 8 принципов,
позволяющих облегчить достижение поставленных перед компанией
задач [5]:"
1 Магистрант направления «Прикладная информатика».
"Информационно-коммуникационные технологии в управлении предприятием 135
– Фокус на потребителя – организации зависят от своих потребителей и,
следовательно, должны понимать их текущие и будущие потребности, должны
отвечать их требованиям и стремиться превзойти их ожидания."
"– Взаимовыгодные отношения с поставщиками – способность организации создавать
ценность усиливается посредством взаимовыгодных отношений;"
"– Руководство (лидерство) – руководители устанавливают согласованность цели,
управления и внутренней структуры организации."
"Они создают среду, в которой работники могут стать полностью вовлеченными в
достижение целей организации;"
"– Процессный подход – желаемый результат достигается более эффективно, если
соответствующими работами и ресурсами руководят как процессом [7]."
"– Вовлечение работников – работники всех уровней представляют
сущность организации, их полное вовлечение способствует тому,
чтобы их потенциал использовался с максимальной выгодой для
организации."
"– Системный подход к управлению – выявление, понимание и управление системой
взаимосвязанных процессов, предназначенных для
достижения некоторой заданной цели."
– Непрерывное улучшение [1];
"– Фактический подход к принятию решений – эффективные решения
базируются на логическом и интуитивном анализе данных."
"Именно огромные объемы информации, обрабатываемые при принятии
решений, и породили понятие информационной технологии и информационной
системы. Статья 2 федерального закона Российской Федерации от 27 июля
2006 г. № 149-ФЗ «Об информации, информационных технологиях и защите
информации» определяет информационную систему как «совокупность содержащейся
в базах данных информации и обеспечивающих ее обработку
информационных технологий и технических средств» [5]."
"Под корпоративной информационной системой принято понимать системы, в которых
функционально объединяются системы для решения задач
автоматизации учета и управления производством, финансами, снабжением
и сбытом, кадрами и информационными ресурсами."
"Неотъемлемой чертой корпоративных информационных систем, характеризующихся
повышенной сложностью всех своих компонентов, является"
"подсистема контекстной помощи, обеспечивающая пользователя подробным
описанием структуры корпоративной информационной системы и каждого компонента
в отдельности [4]."
"Комплексная система автоматизации управления предприятием – система управления
финансово-хозяйственной деятельностью предприятия,
136 ЭКОНОМИКА И УПРАВЛЕНИЕ В XXI ВЕКЕ: ТЕНДЕНЦИИ РАЗВИТИЯ"
"обеспечивающая принятие обоснованных управленческих решений на основе
качественной и достоверной информации, получаемой с помощью современных
управленческих и информационных технологий. Обеспечивает"
ведение оперативного, бухгалтерского и управленческого учета и строится
"на основе единого информационного пространства, охватывая и координируя всю
совокупность управленческих процессов предприятия."
"Комплексная система управления предприятием (ERP – enterprise resources planning 
system) обеспечивает комплексное управление ключевыми"
"аспектами деятельности предприятия и охватывает сферы производства,
планирования, финансового и бухгалтерского учета, материально-технического
снабжения, управления человеческими ресурсами, сбыта, управления
запасами и предоставления услуг."
"Здесь нужно отметить, что в процессе автоматизации деятельности предприятия в
основном выделяются две тенденции [2]:"
– Первая заключается в том, что предприятие пытается постепенно
"внедрить системы автоматизации лишь на отдельных участках своей деятельности,
предполагая в дальнейшем стянуть их в единую"
"систему, либо довольствуясь кусочной автоматизацией. Несмотря
на то, что этот путь на первый взгляд кажется менее затратным,
опыт внедрения таких систем показывает, что минимальные затраты в таких проектах
чаще всего оборачиваются минимальной отдачей, а то и вовсе не приносят желаемого
результата."
"– Вторая тенденция – комплексное внедрение систем автоматизации,
что позволяет охватить все уровни менеджмента от низового уровня
производственных подразделений до верхнего управленческого
уровня."
"Целями внедрения комплексной системы управления предприятием являются:
– общее повышение уровня управляемости бизнеса;"
– снижение стоимости выполнения процессов;
"– ощутимые экономические результаты за счет сокращения затрат и
управления себестоимостью;"
– повышение уровня удовлетворенности клиентов.
"Системы управления предприятием имеют ряд узконаправленных решений, таких как:
– управление фондами предприятия (EAM – Enterprise Asset Management) [3];
– управление цепочками поставок (SCM – Supply Chain Management);"
"– оперативное управление производством и ремонтами (MES – Manufacturing 
Execution System);"
– управление персоналом (HRM – Human Resource Management);
"– управление взаимоотношениями с клиентом (CRM – Customer Relationship 
Management)."
"ПРИМЕНЕНИЕ МИКРОСЕРВИСНОЙ АРХИТЕКТУРЫ ПРИ РАЗРАБОТКЕ
КОРПОРАТИВНЫХ ВЕБ-ПРИЛОЖЕНИЙ"
"Возрастающие требования к современным корпоративным веб-приложениям,
такие как возможность предоставление программного интерфейса (API), интеграция с
другими веб-приложениями через различные веб-службы, обработка большого"
"количества запросов, масштабируемость, обеспечение необходимой скорости доступа
к информации, обеспечение высокой надёжности с точки зрения информационной
безопасности, исключение и минимизация рисков утечки корпоративных данных,
приводят к тому, что корпоративные веб-приложения с монолитной архитектурой
становятся неудобными в разработке, сложно тестируются и вводятся в эксплуатацию
с большими временными задержками."
"В уточнении выше сказанному, корпоративные веб-приложения с монолитной
архитектурой, как правило, представляют из себя приложения с 3-х уровневой
архитектурой, где каждый уровень отвечает за формирование определённого
представления для пользователя, обработку бизнес-логики приложения, обеспечения
доступа к данным."
Международный научный журнал «ВЕСТНИК НАУКИ» № 5 (14) 
Т.2…..………………………….. МАЙ 2019 г.
"_________________________________________________________________________
_____________________"
"__________________________________ 150 _______________________________
Уровень представления - уровень, с которым взаимодействует пользователь,
включает компоненты пользовательского интерфейса, такие как CSS- стили,
статически"
"html - страницы, JavaScript код. Главная функция уровня представления - это
отображение информации и интерпретация вводимых пользователем команд с
преобразованием их в соответствующие операции в контексте бизнес-логики."
"Уровень бизнес-логики - уровень набор компонентов, которые отвечают за
обработку данных, полученных от уровня представления, непосредственно
взаимодействует с уровнем доступа к данным, может быть реализован с помощью
технологий Java EE, ASP.NET."
"Уровень доступа к данным - хранит модели данных, используемых сущностей в
рамках бизнес-логики приложения, отвечает за мониторинг транзакций и
поддерживает"
"консистентное состояние данных. Для большинства корпоративных веб-приложений
основная часть логики уровня доступа к данным сосредоточена в СУБД (Система
управления базами данных) таких, как MySQL, Oracle и PostgreSQL."
"Между тем, корпоративные веб-приложения стремительно эволюционируют,
становятся распределёнными, могут предоставлять определенную функциональность
и"
"использоваться в составе другого веб-приложения с помощью веб-сервисов,
основанных на протоколах REST, SOAP и XML-RPC. Это приводит к тому, что
корпоративные веб-приложения с монолитной архитектурой испытывают сложности с
наличием уязвимостей в безопасности из-за участия в процессах множества систем,
испытывают сложности с реализацией асинхронной связи между приложениями,
испытывают потребность в сложных механизмах управления транзакциями при
взаимодействиях между логически раздельными системами и их уровнями."
"Особое внимание следует уделить к возрастающим требованиям к повышению
гибкости и улучшению масштабируемости корпоративного веб-приложения,
слабосвязанности его программных компонентов и возможность построения сложных
систем путем интеграции сервисов от различных производителей независимо от
используемых языков программирования и технологий."
Основные недостатки монолитной архитектуры:
Международный научный журнал «ВЕСТНИК НАУКИ» № 5 (14) 
Т.2…..………………………….. МАЙ 2019 г.
"_________________________________________________________________________
_____________________"
__________________________________ 151 _______________________________
"- сложно или практически невозможно изменить технологический стек вебприложения
во время разработки."
"- необходимость полного обновления системы при изменении незначительных
деталей приложения;"
"- если веб-приложение аварийно завершает работу, то весь функционал
недоступен для пользователей;"
- сложности при масштабировании;
"Монолитная архитектура корпоративных веб-приложений не позволяет быстро и
оперативно реагировать на изменения требований к бизнес-логике веб-приложения."
"Микросервисная архитектура родилась из монолитной архитектуры. Главное
отличие микросервисной архитектуры от монолитной - использование микросервисов,
специализированных программ (модулей) для выполнения бизнес-логики
корпоративного веб-приложения."
"Концепция декомпозиции сложной системы корпоративного веб-приложения на
микросервисы - это способ создания веб-приложения в виде набора небольших
сервисов, каждый из которых исполняется как отдельный процесс, который
обменивается данными, используя либо синхронные протоколы, такие как
HTTPs(HTTP) или асинхронные протоколы, такие как AMQP."
"Микросервисы могут разрабатываться и развертываться независимо друг от
друга. Каждый микросервис может имеет свою собственную базу данных, чтобы быть
отделенной от других служб. Микросервисы инкапсулируют определённый
функционал системы и создаются исходя из особенностей предметной области
корпоративного веб-приложения."
"Следует отметить, что микросервисы - это разновидность сервисориентированной
архитектуры (SOA), применяемая для формирования распределенных
программных систем при разработке корпоративных веб-приложений. На данный
момент микросервисы постепенно становятся стандартом развития корпоративных
программных систем."
Основные преимущества микросервисной архитектуры :
Международный научный журнал «ВЕСТНИК НАУКИ» № 5 (14) 
Т.2…..………………………….. МАЙ 2019 г.
"_________________________________________________________________________
_____________________"
"__________________________________ 152 _______________________________
- использование различных языков программирования и программных средств,
оптимальных для реализации каждого микросервиса;"
- взаимозаменяемость микросервисов;
"- независимость микросервисов друг от друга, каждый микросервис может быть
развернут независимо от других служб;"
"- упрощение процесса масштабирования разрабатываемого веб- приложения;
- организация микросервисов как модулей вокруг отдельных функций;"
"Каждый микросервис - это небольшая монолитная программа, которая выполняет
свою функцию. В корпоративных веб-приложениях с микросервисной архитектурой"
"можно добавлять любое количество новых микросервисов, расширяя
функциональность системы."
"Микросервисная архитектура устраняет вышеназванные недостатки монолитной
архитектуры корпоративных веб-приложений, обеспечив изоляцию и минимизацию
изменений системы, ускорение разработки приложений. Важно учитывать, что система
на базе микросервисной архитектуры больше подвержена ошибкам из-за
использования"
"сети передачи данных для взаимодействия между микросервисами, что приводит к
дополнительным издержкам при обработке пользовательских запросов и сложнее
реализовать общее поведение для всех микросервисов (авторизация запросов,
агрегация"
данных).
"Подводя итоги, прежде чем принять решение о разработке корпоративного
вебприложения на базе микросервисной архитектуры, необходимо проанализировать
перечисленные ниже факторы."
Новые технологические шаблоны: Микросервисы - это совершенно иной подход
"к разработке корпоративных веб-приложений. Они требуют наличия нового множества
сопутствующих компонентов, так как основаны на сетевом взаимодействии,
необходимые технологии для обнаружения микросервисов, координация нагрузки,
управление модулями и среды ведения журналов, уже существуют, однако их нужно
собрать воедино, что требует значительных затрат времени на экспериментирование,
наработку соответствующих навыков и обучение разработчиков."
Методы интеграции приложений
"При разработке и внедрении информационных систем возникает задача их интеграции
как в уже сложившуюся информационную среду предприятия, так и в среду
окружающего экономического сообщества. Несмотря на то, что задача интеграции
корпоративных приложений не нова, она по-прежнему остается одной из
серьезнейших задач, с которыми время от времени приходится сталкиваться многим
компаниям."
"Интеграция приложений – это сложная и многогранная задача, которая охватывает
все уровни корпоративной системы – ее архитектуру, аппаратное и программное
обеспечение и процессы."
"При интеграции бизнес-процессов компания должна определять, реализовывать и
управлять процессами обмена корпоративной информацией между различными
бизнессистемами. Благодаря этому организация может упростить операции, сократить
расходы и улучшить реагирование на запросы клиентов. Комплексная интеграция
включает"
"управление процессами, моделирование процессов и технологический процесс,
который охватывает различные задачи, процедуры, архитектуры, требуемую входную
и выходную информацию, а также средства, необходимые для каждого шага в
бизнеспроцессе."
Рис. Методы интеграции
"Интеграция приложений. На этом уровне интеграции целью является объединение
данных или функции одного приложения с другим, благодаря чему обеспечивается"
"интеграция, близкая к реальному времени. Интеграция приложений используется – и
это"
"далеко не полный список – для интеграции B2B, внедрения CRM-систем, которые
интегрированы с корпоративными серверными приложениями, web-интеграции и
построения"
"web-сайтов, которые поддерживают многочисленные бизнес системы. Кроме того,
может"
193
"потребоваться проведение специальной интеграции, особенно когда требуется
интегрировать существующее приложение с вновь устанавливаемым приложением."
"Интеграция данных. Залогом успешной интеграции приложений и бизнеспроцессов
является интеграция данных и систем баз данных. Прежде чем приступать к
интеграции, необходимо идентифицировать (определить местонахождение) и
каталогизировать данные, построить модель данных. По завершении этих трех шагов
данные"
можно совместно использовать/распространять в системах баз данных.
"Интеграция платформ. Чтобы завершить интеграцию систем – базовой архитектуры,
аппаратного и программного обеспечения – необходимо интегрировать разнесенные
части гетерогенной сети. Интеграция платформ касается процессов и инструментов, с
помощью которых эти системы могут осуществлять безопасный и оптимальный
обмен информацией. В результате данные могут беспрепятственно передаваться по
различным приложениям. Например, определение того, как нужно надежно
передавать"
"информацию с NT- на UNIX-машину, является чрезвычайно непростой задачей по
интеграции всей корпоративной системы."
"В технологиях интеграции принята следующая терминология: интеграция
корпоративных приложений (enterprise application integration, сокр. EAI), интеграция
корпоративной информации (enterprise information integration, сокр. EII) и программное
обеспечение для извлечения, преобразования и загрузки данных (extract, transform and
load,"
сокр. ETL).
"EAI – это технология, с помощью которой организация добивается централизации
и оптимизации интеграции корпоративных приложений, обычно используя те или иные
формы технологии оперативной доставки информации (push technology), которая
управляется внешними событиями (event-driven)."
"ETL – это технология, которая преобразует данные (обычно с помощью их пакетной
обработки) из операционной среды, включающей гетерогенные технологии, в
интегрированные, согласующиеся между собой данные, пригодные для использования
в"
процессе поддержки принятия решений.
"EII – это технология для интеграции в режиме реального времени несопоставимых
типов данных из многочисленных источников как внутри, так и за пределами
корпорации. Инструменты EII обеспечивают универсальный уровень доступа к данным
и"
"используют технологию поиска информации (pull technology) или возможности работы
по запросам."
"Как известно, при решении большинства интеграционных задач данные должны быть
преобразованы тем или иным способом – структурно (например, чтобы снять различия"
"между исходной и целевой схемами для обеспечения согласованности данных) или
семантически (например, чтобы устранить несоответствия в бизнес-значениях в
различных системах). Технологии интеграции данных могут существенно отличаться
друг от друга с"
"точки зрения возможностей преобразования – от незначительной поддержки
трансформирования или ее отсутствия (в случае использования таких технологий, как
передача файлов) до широких возможностей преобразования (например, средства
ETL)."
"В завершение свежует отметить, что IT-отделам, стремящимся эффективно управлять
интеграцией, следует останавливаться на использовании стандартных технологиях,
которые могут быть использованы во всей организации. Следует оценивать
инструменты с точки зрения информационной архитектуры. А поскольку для решения
задач"
"интеграции данных нет универсального подхода, то необходимо соотносить
требования, предъявляемые к интеграционному решению, с реальными
характеристиками"
имеющихся технологий.
"О ПОДХОДЕ ИСПОЛЬЗОВАНИЯ HEADLESS CMS ПРИ РАЗРАБОТКЕ
КОРПОРАТИВНЫХ ИНТЕРНЕТ-САЙТОВ"
"В современном мире многие компании и организации создают свои корпоративные
сайты в"
"интернете. На таких сайтах обычно рассказывается о том, чем занимается компания,
об услугах и"
"товарах, контакты, а также адрес расположения. Корпоративный сайт – необходимый
атрибут"
"бизнеса компании. При просмотре различных корпоративных сайтов можно сделать
вывод о том,"
"что они похожи друг на друга по своей структуре. Находясь в постоянном развитии,
технологии"
"устаревают, а следовательно, устаревают системы и приложения, которые были
созданы при помощи этих технологий."
"На сегодняшний день большая часть корпоративных сайтов разработаны с помощью
CMS [1]."
"CMS, или Content Management System – информационная система или компьютерная
программа,"
"используемая для обеспечения и организации совместного процесса создания,
редактирования и"
"управления содержимым сайта. В целом CMS можно разделить на два вида:
традиционные и"
"headless. Headless CMS как правило не предоставляет возможность управления
дизайном сайта, а"
"позволяет только редактировать контент, который отображается на сайте [2]. Для
управления"
"структурой страниц сайта можно использовать классическую CMS, но такой подход не
всегда"
"удобен ввиду того, что такие системы зачастую оказываются довольно сложными для
простого"
"пользователя и могут включать множество ненужных модулей. Для решения данной
проблемы"
Коваль М.Е., Шинкарев А.А., О подходе использования headless CMS
Логиновская В.О. при разработке корпоративных интернет-сайтов
Вестник ЮУрГУ. Серия «Компьютерные технологии, управление, радиоэлектроника».
2022. Т. 22, № 1. С. 147–153
149
"далее рассмотрим компонентный подход, который объединяет преимущества
классических и"
"headless CMS в одной системе и позволяет добавлять новые компоненты на страницы
сайта без"
участия разработчиков [3].
1. Отличия headless от традиционных CMS
"Главное преимущество headless CMS заключается в том, что они обеспечивают
большую гибкость в дизайне веб-сайта. Фронтенд-разработчики могут извлекать
данные из CMS и представлять их любым способом, который они хотят, что открывает
гораздо больше возможностей [4]."
"Вместо того чтобы придерживаться ограниченных функций и стандартных шаблонов
традиционной CMS, компании с выделенной командой фронтенд-разработчиков могут
использовать headless CMS для разработки крупномасштабных и уникальных веб-
сайтов, которые могут выделиться среди конкурентов."
"Разделение контента и пользовательского интерфейса также обеспечивает большую
гибкость"
"во время разработки. Традиционные инструменты CMS обычно требуют
использования определенных фреймворков и языков, тогда как headless CMS 
позволяют разработчикам использовать"
"все, что угодно. Они также позволяют создателям контента и разработчикам работать
параллельно, что может повысить общую продуктивность. Разделение также
упрощает изменение конструкции в будущем. В традиционных CMS контент глубоко
привязан к макету, что затрудняет изменение аспектов дизайна; для серьезных
изменений может даже потребоваться совершенно новая CMS [5]."
"Контент, управляемый headless CMS, может легко отображаться на нескольких
платформах."
"С другой стороны, контент и макет переплетаются в традиционной CMS, поэтому она
не может"
поддерживать платформы, для которых они не были изначально разработаны.
"Headless CMS является гибкой и ориентированной на будущее, что позволяет ей
использовать другие платформы,"
даже если они не входят в ваш текущий план развития продукта [6].
"Традиционные системы управления контентом также имеют свои преимущества,
самым"
"большим из которых является то, что традиционное программное обеспечение CMS 
намного"
"проще в установке и использовании. Все, от управления контентом до дизайна и
пользовательского интерфейса, собрано в одном месте, что упрощает быструю
разработку и публикацию"
контента.
"Традиционная CMS может быть лучшим вариантом для небольших организаций, не
имеющих необходимых ресурсов для эффективного использования автономной CMS. 
Это также лучший вариант для простых веб-сайтов, у которых нет функций, которые
может не иметь стандартный шаблон CMS. Но если вы не хотите использовать
шаблон для своего веб-сайта или хотите"
"добавить функциональность, которую традиционные инструменты CMS не могут
предоставить,"
в таком случае стоит рассмотреть использование headless CMS [7].
2. Выбор headless CMS
"Одним из главных требований к CMS была возможность редактирования макета
сайта, возможность конструирования страниц из набора готовых компонентов. Это
было нужно для того,"
"чтобы в дальнейшем пользователи данной CMS могли самостоятельно добавлять
новые страницы на свой сайт без привлечения сторонних разработчиков."
Планировалось, что система будет
"поддерживать server-side rendering для обеспечения возможности построения дерева
компонентов"
на основе информации, полученной от CMS, чтобы отобразить их на странице сайта.
"Также требовалось, чтобы CMS поддерживала возможность веб-хуки (webhooks) для
вызова функции перезагрузки сайта и его обновления."
"Были рассмотрены такие headless CMS, как Strapi, Orchard. Данные CMS очень просты
для"
"понимания и использования. Однако они предоставляют возможность только плоских
моделей и"
"не обеспечивают возможность создания вложенных моделей. Такой подход подходит
для создания простых сайтов, в которых не требуется сложных программных и
дизайнерских решений."
"Также был проведен анализ Directus CMS. Данная система предоставляет функционал
редактирования контента посредством таблицы. Данный функционал показался не
очень удобным ввиду"
не очень понятного отображения данных [8–10].
Краткие сообщения
Brief Reports
150 Bulletin of the South Ural State University. Ser.
Из всех рассмотренных CMS
"Эта система реализует компонентный подход к управлению контентом. Поддерживает
функци"
нал для предпросмотра вносимых на сайт изменений.
"контент для различных языков, что позволяет сделать сайт мультиязычным. Имеет
встроенный"
"механизм для пагинации данных в таблицах. Все эти функции позволяют сократить
время на их"
"реализацию с нуля, а следовательно, экономят средства заказчика и обеспечивают
еще больше"
простоты для дальнейшей работы. Но самое главное то, что данная
"ность формирования деревьев компонентов, которое отображается на сайте, а значит,
удовле"
"ряет главному требованию, которое описано выше. Единственный минус, который
стоит отм"
"тить, – данная CMS предоставляется как сервис, поэтому развернуть ее на
собственных серверах"
"не получится. Однако существующие тарифы на покупку данной системы довольн
а также имеется бесплатный тариф с ограниченным функционалом [11]."
3. Пример использования компонентного подхода
"В данной главе будет представлен пример, который демонстрирует возможности
компонен"
ного подхода и динамическое встраивание
"зовании Storyblok. Для того чтобы использовать данный подход, требуется базовое
понимание"
работы ReactJS и Next.js. Также предполагается, что
"ходимые библиотеки. Инструкции по установке и подключению можно изучить в
документ"
к Storyblok. Далее будет описан предлагаемый подход [12].
При открытии главной страницы
пе можно добавить нужные страницы.
"После добавления необходимых страниц следует перейти к редактированию
компонентов,"
которые можно применять для создания структуры страниц сайта.
"лагает компонент Grid. Наш подход заключается в том, что нужно изменить данный
компонент и"
"создать несколько своих, это позволит строить страницы из нескольких колонок и
добавлять л"
"бое содержимое в эти колонки независимо друг от друга. Для этого нужно выбрать
вкладку"
"ponents в меню Storyblok. Сначала требуется создать компонент
его структура."
После этого переходим в компонент
держать в себе компонент column
Данная структура компонентов позволяет в поле
другой компонент, дерево которых затем будет отображаться на странице сайта.
Далее можно
"использовать созданные компоненты и добавлять их на нужные страницы [13
пользования изображен на рис. 4."
"Bulletin of the South Ural State University. Ser. Computer Technologies, Automatic Control, 
Radio Electronics"
2022.
CMS особое внимание обратили на систему с названием
"Эта система реализует компонентный подход к управлению контентом. Поддерживает
функци"
вносимых на сайт изменений. Storyblok дает возможность настраивать
"контент для различных языков, что позволяет сделать сайт мультиязычным. Имеет
встроенный"
"механизм для пагинации данных в таблицах. Все эти функции позволяют сократить
время на их"
ю с нуля, а следовательно, экономят средства заказчика и обеспечивают еще больше
"простоты для дальнейшей работы. Но самое главное то, что данная CMS 
поддерживает возмо"
"ность формирования деревьев компонентов, которое отображается на сайте, а значит,
удовле"
"ряет главному требованию, которое описано выше. Единственный минус, который
стоит отм"
"предоставляется как сервис, поэтому развернуть ее на собственных серверах
не получится. Однако существующие тарифы на покупку данной системы довольн
а также имеется бесплатный тариф с ограниченным функционалом [11]."
Пример использования компонентного подхода
"В данной главе будет представлен пример, который демонстрирует возможности
компонен"
"ного подхода и динамическое встраивание компонентов в разметку страницы сайта
при испол"
". Для того чтобы использовать данный подход, требуется базовое понимание
. Также предполагается, что уже имеется проект и подключены все н
трукции по установке и подключению можно изучить в документ"
. Далее будет описан предлагаемый подход [12].
"При открытии главной страницы CMS выводится список страниц сайта (рис. 1). На
этом эт"
пе можно добавить нужные страницы.
Рис. 1. Главная страница Storyblok
Fig. 1. Main page of Storyblok
"После добавления необходимых страниц следует перейти к редактированию
компонентов,"
"которые можно применять для создания структуры страниц сайта. Storyblok
ш подход заключается в том, что нужно изменить данный компонент и"
"создать несколько своих, это позволит строить страницы из нескольких колонок и
добавлять л"
"бое содержимое в эти колонки независимо друг от друга. Для этого нужно выбрать
вкладку"
. Сначала требуется создать компонент Column. На рис. 2 изображена
"После этого переходим в компонент Grid и изменяем его таким образом, чтобы он мог
с"
column (рис. 3).
"Данная структура компонентов позволяет в поле body компонента Column
другой компонент, дерево которых затем будет отображаться на странице сайта."
Далее можно
"использовать созданные компоненты и добавлять их на нужные страницы [13
пользования изображен на рис. 4."
Computer Technologies, Automatic Control, Radio Electronics.
2. Vol. 22, no. 1. P. 147–153
особое внимание обратили на систему с названием Storyblok.
"Эта система реализует компонентный подход к управлению контентом. Поддерживает
функциодает возможность настраивать"
"контент для различных языков, что позволяет сделать сайт мультиязычным. Имеет
встроенный"
"механизм для пагинации данных в таблицах. Все эти функции позволяют сократить
время на их"
"ю с нуля, а следовательно, экономят средства заказчика и обеспечивают еще больше
поддерживает возможность формирования деревьев компонентов, которое
отображается на сайте, а значит, удовлетворяет главному требованию, которое
описано выше. Единственный минус, который стоит отмепредоставляется как сервис,
поэтому развернуть ее на собственных серверах"
"не получится. Однако существующие тарифы на покупку данной системы довольно
невысоки,"
"В данной главе будет представлен пример, который демонстрирует возможности
компоненткомпонентов в разметку страницы сайта при исполь-"
". Для того чтобы использовать данный подход, требуется базовое понимание
проект и подключены все необтрукции по установке и подключению можно изучить в
документации"
"выводится список страниц сайта (рис. 1). На этом этаПосле добавления необходимых
страниц следует перейти к редактированию компонентов,
Storyblok по умолчанию предш подход заключается в том, что нужно изменить данный
компонент и"
"создать несколько своих, это позволит строить страницы из нескольких колонок и
добавлять любое содержимое в эти колонки независимо друг от друга. Для этого
нужно выбрать вкладку Com-"
. На рис. 2 изображена
"и изменяем его таким образом, чтобы он мог соColumn вставлять любой
другой компонент, дерево которых затем будет отображаться на странице сайта."
Далее можно
"использовать созданные компоненты и добавлять их на нужные страницы [13–15]. 
Пример ис-"
Коваль М.Е., Шинкарев А.А.,
Логиновская В.О.
Вестник ЮУрГУ. Серия «Компьютерные технологии, управление, радиоэлектроника».
2022. Т. 22, № 1. С. 147–153
Рис. 2. Структура компонента Column
Fig. 2. Structure of Column component
Рис. 4. Пример использования компонентов
Заключение
"В свете изложенного в статье можно увидеть, что традиционные и
достоинства и недостатки. Достоинства традиционных
ко и быстро могут быть развернуты на серверах, одна"
чие множества зачастую ненужных модулей и сложности при редактировании страниц.
Можно
"сказать, что если корпоративный сайт компании разработан с помощью традиционной
для его поддержки может понадобиться помо"
Однако существует такое решение, как
"предложенного компонентного подхода, можно достичь того, что страницы сайта
сможет реда"
тировать пользователь, который далек от информационных технологий.
Следовательно, подход
"позволяет избежать привлечения сторонних разработчиков для поддержки и
обновления сайта,"
их участие требуется только при создании каркаса сайта и подключении
редь позволяет сократить затраты компании на поддержку корпоративного сайта.
О подходе использования
при разработке корпоративных интернет
Вестник ЮУрГУ. Серия «Компьютерные технологии, управление, радиоэлектроника».
"В свете изложенного в статье можно увидеть, что традиционные и headless
достоинства и недостатки. Достоинства традиционных CMS состоят в том, что они
довольно ле"
"ко и быстро могут быть развернуты на серверах, однако они имеют и недостатки,
такие как нал"
чие множества зачастую ненужных модулей и сложности при редактировании страниц.
Можно
"сказать, что если корпоративный сайт компании разработан с помощью традиционной
для его поддержки может понадобиться помощь сторонних разработчиков."
"Однако существует такое решение, как headless CMS. Разрабатывая сайт с
применением"
"предложенного компонентного подхода, можно достичь того, что страницы сайта
сможет реда"
тировать пользователь, который далек от информационных технологий.
Следовательно, подход
"позволяет избежать привлечения сторонних разработчиков для поддержки и
обновления сайта,"
"их участие требуется только при создании каркаса сайта и подключении CMS
редь позволяет сократить затраты компании на поддержку корпоративного сайта."
Анализ актуальных угроз безопасности веб-приложений
"Всемирная паутина уже давно стала неотъемлемой частью современного общества и
несёт тысячи потенциальных угроз для информации, которая циркулирует внутри её."
Вместе
"с этим появляется новый вид незаконных действий - «Киберпреступность». Угрозы
возрастают пропорционально развитию технологий, но анализируя многолетний опыт,
можно сказать, что основные атаки осуществляются с помощью стандартных
уязвимостей. К"
"ним можно отнести отсутствие фильтрации обрабатываемых данных, уязвимости в
программном обеспечении и ненадлежащее исполнение системным администратором
своих"
обязанностей.
"Для современного Веб-пентестинга (тестирование на проникновение) требуется
минимальная компетенция в вопросах аудита компьютерных систем и сетей. При
оценке"
"безопасности используется специальное программное обеспечение для сканирования
webприложений. Зная название и версию используемой CMS (система управления
содержимым),"
злоумышленник может использовать уже известные уязвимости, которые способны
"нарушить работу всей системы. Исходя из этого, аудит сайта происходит с позиции
атакующего и включает в себя: пассивный сбор информации; определение Веб-
окружения,"
"платформы, CMS; сканирование портов; поиск публичных эксплойтов; автоматическое
сканирование; ручной анализ; анализ данных и векторов атаки; составление отчёта. В
процессе аудита проводятся следующие процессы над исследуемым приложением:
поиск"
"уязвимостей серверных компонентов и в Веб-окружении сервера; проверка на
удалённое"
"выполнение произвольного кода, на наличие переполнений и инъекций (внедрение
кода);"
"попытки обхода системы аутентификации web-приложения, попытки произвести
Remote File"
"Inclusion / Local File Inclusion; перехват привилегированных аккаунтов (сессии
аккаунтов);"
"сканирование директорий и файлов, используя перебор и «googlehack»; атаки класса
racecondition; подбор паролей. Тестирование делится на 3 этапа: Black Box, Grey Box, 
Grey"
"Box с использованием результатов прошлого этапа. Black Box – проверка без
использования"
"аутентификационной информации о тестируемой системе. Grey Box – тестирование с
применением информации, предоставленной заказчиком и правами обычного
пользователя с"
"попыткой расширения своих прав до администратора. И третий этап проводит анализ
с"
"помощью информации из прошлого аудита. Детально изучается структура, топология
и"
"документация web-приложения. Результаты аудита представляются в отчёте с
обнаруженными уязвимостями, возможные угрозы и потери, примеры атак и
рекомендациями по устранению. Обычно это детальный технический отчет и отчет
для"
"руководства. В основе проверки лежат методологии Open Web Application Security 
Project"
"(OWASP), The Web Application Security Consortium (WASC), Open Source Security 
Testing"
Methodology Manual (OSSTMM).
"Характер воздействия на систему может быть абсолютно разный: от некорректной
работы отдельных элементов до полного прекращения работы. В первую очередь
необходимо понимать, что основное направление атаки это информация, которая
хранится в"
"специальных базах данных. Управление данными производится с помощью запросов
на"
"декларированном языке программирования SQL (structuredquerylanguage — «язык
структурированных запросов»).SQL позволяет пользователям читать, добавлять,
редактировать и удалять записи в базе данных. Из-за недостаточной обработки
запросов от"
"пользователя, нарушитель может модифицировать обращение, внедрив в него код
своего"
"запроса. Данная атака получила название SQL-injections (SQL-инъекции). Она
позволяет"
"злоумышленнику просматривать, редактировать и удалять информацию. Тем самым
создаётся опасность для целостности и конфиденциальности личных данных. В
случае"
"отсутствия проверки запросов злоумышленник, манипулируя с запросами, может
наделить"
"себя правами суперпользователя. Данный подход относится к виду атак с общим
названием"
"Современные технологии обеспечения гражданской обороны
и ликвидации последствий чрезвычайных ситуаций"
67
«Ошибки валидации».
"Для защиты от инъекции создаются фильтры входящих данных: фильтрация
строковых и целочисленных параметров. Один из методов защиты - усечение входных
параметров, позволяющее исключить изменения в логике запросов. Особую помощь
злоумышленнику оказывает информация о базе данных и её структуре. Для
регистрации"
"запросов в хронологическом порядке используется log-файл. Сам процесс
регистрации не"
"спасает от атаки и нанесения ущерба, но помогает найти слабые места, устранить
уязвимость, изучить закономерности на основе информации о действиях
пользователя."
"Исходя из этого, log-файл должен регистрировать максимально детально все
параметры и"
"действия в приложении: откуда пришёл пользователь, время и длительность работы,
характер работы, параметры браузера, операционная система, IP-адрес."
"При работе с пользователями системе необходимо распознать каждого и не допустить
ошибку. После успешного ввода логина и пароля, в браузере сохраняются небольшие
фрагменты данных – файлы cookie, содержащие индивидуальный идентификатор."
Именно с
"помощью его браузер представляется серверу. Украв файлы cookie, злоумышленник
может"
"обойти авторизацию и получить привилегии для работы с информацией. Кража этих
происходит с помощью другого типа атаки – XSS (Cross Site Scripting). XSS 
(Межсайтовое"
"выполнение сценариев) – уязвимость в валидации данных, которая позволяет
добавить и"
"выполнить код на стороне клиента с использованием HTML-тегов и сценария на
JavaScript."
"Внедрение кода происходит из-за отсутствия фильтрации входящих данных. Данная
атака"
"позволяет украсть сессионные файлы cookie и вводимую информацию на зараженной
странице (например, CVC-код кредитной карты). XSS не несёт опасности для сервера
и"
"направлен на пользователей. Но стоит учитывать, что если злоумышленник украл
файлы"
"cookie лица, имеющего доступ к панели управления, то он без проблем может
получить"
"доступ к ней. XSS – уязвимость среднего уровня риска, занимающая лидирующую
позицию,"
опережая Cross-Site Request Forgery(CSRF), Open Redirect, кликджекинг и спуфинг.
Согласно
данным Positive Technologies в 2019 г. XSS занимала 77,9 %, а в 2018 г. 88,5 % [1].
"Известными жертвами атак являлись такие сайты: Twitte [2], ВКонтакте [3], YouTube
[4],"
"Facebook. На данный момент уже реализовано программное обеспечение по аудиту
webприложений и поиску XSS-уязвимостей по всей структуре сайта (XSSF, XenoTix,
Wapiti,"
XSpider (MAX-Patrol), Nemesida Scanner, Acunetix Online Web Security Scanner).
"Аудит безопасности сайта необходимый процесс для объективной оценки рисков
безопасности системы, создания сценарий атак и мер по их предотвращению. Это не
разовое"
"мероприятие, а постоянный процесс, направленный на мониторинг состояния
безопасности"
"приложения. От политики безопасности приложения зависит его деловая репутация,
развитие и экономический рост"
Меры и требования к защищенным веб-приложениям
Развитие глобальной сети Интернет и увеличение доступности ресурсов
"в ней привело к расширению разнообразности задач, решаемых с использованием
веб-технологий. В связи с этим получил распространение особый вид
приложений – веб-приложения, от которых напрямую зависит функционирование
бизнес-процессов многих организаций. Веб-приложение – это клиентсерверное
приложение, где в качестве клиента выступает браузер, который ото-
14"
"бражает пользовательский интерфейс, формирует запросы к серверу и обрабатывает
ответы от него. А серверная часть представляет собой веб-сервер, обрабатывающий
запросы клиентов. Взаимодействие между клиентом и сервером,
как правило, осуществляется посредством протокола HTTP [1]."
"Основными особенностями, повлиявшими на распространение вебприложений,
являются:"
"1) доступность – данный вид приложений не привязан к определенному
терминалу или локальной сети, доступ может осуществляться из любой точки
Земного шара, где присутствует соединение с Интернет;"
"2) кроссплатформенность – клиенту достаточно иметь браузер, соответствующий
стандартам, а операционная система и тип устройства не имеют никакого значения."
"Не требуется установка и настройка отдельного приложения на
клиентском устройстве;"
"3) автоматическое обновление – клиент всегда работает с самой актуальной
версией приложения, так как все обновления происходят на стороне сервера."
Но в то же время в процессе эволюции веб-приложений разработчики
"сталкивались с рядом проблем, среди которых выделяется проблема безопасности
веб-приложений. Проблемы безопасности вытекают из основных особенностей веб-
приложений, например, из-за невозможности изолировать веб-приложения от попыток
несанкционированного доступа извне ввиду их доступности."
"Целью данной работы является выбор оптимальных мер и требований для
обеспечения информационной безопасности веб-приложений."
Методы обеспечения безопасности веб-приложений
"Актуальность проблем безопасности веб-приложений подкрепляется тем,
что в них используется конфиденциальная информация, например:"
– персональные данные;
"– сведения, составляющие коммерческую, банковскую или государственную тайну;
– другие сведения и процессы, зависящие от рода деятельности компании
[2]."
"В связи с этим среди разработчиков появились рекомендации к обеспечению
безопасности веб-приложений, которые вылились в проект под названием:
Open Web Application Security Project (OWASP)."
"OWASP – это открытый проект обеспечения безопасности веб-приложений, который
включает в себя корпорации, образовательные организации"
"и индивидуальных разработчиков, которые совместными усилиями формируют
статьи, рекомендации и учебные пособия, находящиеся в свободном доступе
и рекомендуемые при разработке веб-приложений. Также проект включает в
себя ряд тренировочных задач и инструменты для анализа безопасности
вебприложений."
15
"OWASP на протяжении всего своего существования занимается изучением
наиболее опасных уязвимостей. Рассмотрим наиболее серьезные угрозы
безопасности веб-приложений, согласно исследованиям OWASP Top 10 – 2017 [3]."
"1. Инъекции (Injection) – внедрение в запросы к базе данных кода, дополняющего
данный запрос и дающего злоумышленнику неавторизованный доступ
к базе данных."
"2. Уязвимости аутентификации (Broken Authentification) – распространенная
уязвимость, связанная с недостаточно проработанной системой валидации
пользователей в приложении, приводит к получению неавторизованного доступа."
"3. Незащищенность важных данных (Sensitive Data Exposure) – многие
приложения не используют механизмы для защиты передаваемых данных, такие как,
например, HTTPS."
4. Внедрение внешних сущностей в XML (XML External Entities) – вид
"инъекции, основанный на внедрении в XML-запрос к серверу атрибутов и сущностей,
позволяющих получить неавторизованный доступ к данным."
5. Небезопасный контроль доступа (Broken Access Control) – уязвимости
"в методах авторизации, позволяющие злоумышленнику получить повышенные
привилегии."
"6. Небезопасная конфигурация (Security Misconfiguration) – веб-приложение – это
сложная система, состоящая из многих компонентов, таких как вебсервер, СУБД и др."
"Неверная конфигурация одного из компонентов может привести к серьезным
проблемам с безопасностью всего приложения."
7. XSS (Cross-Site Scripting) – внедрение (инъекция) вредоносного кода
в HTTP-ответ, получаемый клиентом и выполняющийся на стороне клиента.
"8. Небезопасная десериализация (Insecure Deserialization) – десериализация
преобразует последовательность бит в структурированные данные, зачастую,
на данном этапе не уделяется достаточно внимания безопасности, например,
отсутствует валидация типов данных, что создает возможность их подмены."
9. Использование компонентов с известными уязвимостями (Using
"Components with Known Vulnerabilities) – зачастую, при разработке веб-приложений
используются библиотеки, фреймворки и компоненты сторонних разработчиков,
которые могут содержать различные недостатки (уязвимости), в связи с этим важно
использовать самые актуальные версии, в которых исправляются известные
уязвимости."
10. Недостаточное журналирование и мониторинг (Insufficient Logging
"& Monitoring) – для своевременного обнаружения несанкционированного доступа,
утечки информации и т. д. необходимо использовать средства автоматизированного
мониторинга трафика, а также журналирования, которые помогут
понять сущность атаки, в кратчайшие сроки устранить уязвимости, а также
вернуть работоспособность и исходное состояние веб-приложений."
"Данный список уточняется OWASP в соответствии с развитием модели
поведения нарушителя и актуальности той или иной проблемы безопасности
веб-приложений. Но, к сожалению, некоторые уязвимости (например, SQLинъекции)
находятся на вершине списка долгое время, хотя уже давно разрабо-"
16
"таны методы устранения данной уязвимости [4]. Это связано с тем, что не всегда
разработчики уделяют достаточно внимания безопасности веб-приложений."
"В соответствии со списком угроз OWASP, первый шаг к обеспечению защищенности – 
правильная настройка всех компонентов системы, обновление"
"всего используемого программного обеспечения до актуальных версий, отключение
всех неиспользуемых служб, смена всех паролей по умолчанию, отключение
неиспользуемых учетных записей, в том числе системных. Важно также
обеспечить шифрование данных всех сетевых соединений внутри системы. Если веб-
приложение позволяет настроить разграничение прав доступа пользователей к
данным и настройкам системы, необходимо сделать это, ограничив"
"права минимально необходимыми. Зачастую, уже только перечисленные базовые
меры позволяют снизить риски до допустимого уровня. Если базовых мер
окажется недостаточно, необходимо обратить внимание на разнообразные
специализированные средства защиты информации."
"Одно из наиболее известных слабых мест – это аутентификация пользователей веб-
приложения. Например, система при регистрации пользователя не
проводит проверку на сложность пароля, или пароль не имеет срока действия,
или при аутентификации пароль от браузера передается к серверу в URL запросе. Для
устранения подобных проблем существуют решения для усиления аутентификации в
веб-приложении, реализованные как в виде встраиваемых модулей, так и в виде
отдельных серверов аутентификации. Встроенная в приложение аутентификация
позволяет не использовать внешние средства аутентификации, однако, это не
исключает возможные ошибки в самом веб-приложении, позволяющие обойти систему
аутентификации. Решить эту проблему"
"можно, например, путем внедрения процесса менеджмента уязвимостей и
периодическими тестированиями на проникновение."
"Если в компании используются приложения, разработанные на заказ сторонним
подрядчиком, и исходный код приложений недоступен, сотрудникам
информационной безопасности при приемке программного обеспечения имеет
смысл использовать сканер уязвимостей, который работает с веб-приложением
по принципу «черного ящика» [5, 6]. При нахождении критических уязвимостей
приложение возвращается на доработку разработчику. В случае, когда вебприложение
является внутренней разработкой компании, рекомендуется выстраивать процесс
безопасной разработки программного обеспечения с использованием анализаторов
исходного кода, проверяя весь разрабатываемый код на"
"отсутствие ошибок, приводящих к уязвимостям. Такой подход позволяет исправить
ошибки в приложении на раннем этапе и избежать лишних затрат."
"С помощью большинства анализаторов кода можно проводить как статический
анализ кода без его выполнения, так и динамический, проверяя уже установленное и
запущенное приложение. В последнем случае требуется указание точек входа и
большое количество входных данных. Сочетание перечисленных"
методов позволяет выявлять уязвимости до внедрения приложений в компании.
"В то же время реализация в компании процессов верификации приложений может
потребовать значительных материальных и временных затрат."
17
"Иногда просто нет возможности оперативно вносить изменения в уже работающее
приложение. Если ценность данных не позволяет закрыть глаза на
возможные уязвимости, имеет смысл рассмотреть возможность использования
специализированных средств защиты веб-приложений – Web Application
Firewall (WAF). Существуют как коммерческие, так и свободно распространяемые
системы. Принцип работы WAF состоит в том, что HTTP-трафик от пользователей до
веб-приложения проходит сначала через WAF либо, в зависимости"
"от задач и возможностей, на WAF направляется копия трафика. Далее трафик
подвергается декодированию и проверке на наличие атак. Если WAF установлен «в
разрыв» (прокси, мост), атаки могут быть заблокированы. В пассивном
режиме работы (копия трафика) возможны только мониторинг и оповещение об
атаках. Для обнаружения атак могут использоваться такие методы, как [7, 8]:
– сигнатурный анализ;"
– репутационные списки;
– автоматическое обучение;
– поведенческий анализ;
– вручную настраиваемые правила.
"Кроме этого, WAF может иметь модули для динамического анализа уязвимостей
защищаемых приложений, виртуального патчинга найденных уязвимостей,
управления аутентификацией пользователей, взаимодействия с другими
системами защиты. Все это позволяет снизить количество актуальных для
вебприложения угроз."
"Опасность для информации в веб-приложении представляют и внутренние
нарушители – сотрудники, которые имеют доступ к данным для выполнения
служебных обязанностей, администраторы с прямым доступом к серверу баз
данных (в обход веб-приложения или локально). В этом случае для обеспечения
безопасности веб-приложений возможно использовать решения, реализующие
разный подход к мониторингу и контролю обращений к базам данных. Системы
защиты информации в базах данных можно разделить на три типа."
"Системы первого типа используют принцип работы, схожий с WAF – перехват
трафика, но идущего не от пользователя до сервера приложений, а от
сервера приложений к серверам баз данных. Производится декодирование
протоколов баз данных с последующим анализом, используя правила, настроенные
сотрудником информационной безопасности. Возможна работа в активном
(блокирующем) режиме, для этого система устанавливается «в разрыв» (прокси,
мост), а также в пассивном режиме мониторинга, для этого достаточно подать копию
трафика. Для контроля локальных и прямых сетевых подключений"
"к базам данных используются агенты, устанавливаемые непосредственно на
серверы баз данных. При использовании таких систем для защиты данных
в веб-приложениях с трехзвенной архитектурой может возникнуть сложность
с определением пользователя, сделавшего запрос к базе данных: в трафике,
идущем от сервера приложений к серверу баз данных, все обращения производятся
от имени служебной учетной записи. Для персонификации сотрудника
предусмотрена интеграция с WAF, который анализирует трафик до сервера
18"
"приложений, либо подача копии этого трафика непосредственно на систему
защиты баз данных. Также в системах рассматриваемого типа могут быть
реализованы возможности, косвенно повышающие защищенность: сканирование
на уязвимости баз данных, обнаружение баз данных, маскирование критичной
информации, например номеров кредитных карт (при установке «в разрыв»),
создание матрицы разграничения прав доступа, мониторинг изменений, позволяющий
вовремя отследить несанкционированное повышение прав пользователя [9]."
"В случаях, когда возможность анализа копии трафика отсутствует, или необходимо
применить маскирование и блокировки, но установить систему защиты «в разрыв»
невозможно, используются решения, основанные на других"
"принципах перехвата обращений пользователей к базам данных. Такие решения
используют в качестве точки съема агент, устанавливаемый на защищаемый
сервер приложения и взаимодействующий с драйверами, через которые
вебприложение передает запросы пользователей к базам данных. Так как агент
находится на сервере веб-приложения, он обрабатывает и запросы клиентов
к приложению, и запросы приложения к базам данных, персонифицируя запросы."
"Создавая правила обработки запросов, можно маскировать «на лету» любые
поля в ответах от базы данных, блокировать нелегитимные запросы, полностью
управлять бизнес-процессом работы пользователя с приложением."
"Третий тип – системы защиты информации от утечек, основанные на использовании
криптографии и позволяющие выборочно шифровать информацию, хранящуюся в
таблицах баз данных. Доступ к информации предоставляется только авторизованным
пользователям с ведением детальных протоколов их"
"действий. Для повышения защищенности информации такие системы могут
дополнительно реализовывать механизмы строгой двухфакторной аутентификации
[10]."
"Использование перечисленных средств позволит существенно снизить
риск утечки данных из веб-приложения, а при инцидентах поможет отыскать
необходимую для расследования информацию. Последний рубеж защиты –
правильное хранение резервных копий баз данных: если средства шифрования
при работе с базой данных не используются, необходимо шифровать ее резервные
копии."
Результаты
"В результате можно предложить следующие меры для повышения защищенности веб-
приложений. Необходимо:"
– ознакомиться и следить за обновлениями документов OWASP;
"– использовать методологии тестирования веб-приложений, направленные
на поиск уязвимостей (например, OWASP Testing Project);"
– регулярно обновлять программное обеспечение веб-сервера;
"– следить за корректной настройкой сетевых устройств, служб и программного
обеспечения;"
19
"– следить за обновлениями используемых в приложении фреймворков
и библиотек и своевременно устранять найденные в них уязвимости;"
– использовать протоколы с шифрованием (HTTPS);
"– повсеместно использовать средства обнаружения атак, мониторинга активности,
журналирования и системы транзакций."
Заключение
"В статье проанализированы методы обеспечения соответствия вебприложений
требованиям по защите информации. В результате предложен перечень мер, которые
позволят значительно повысить уровень защищенности,
что приведет к снижению рисков при использовании веб-приложений."
"ОРГАНИЗАЦИЯ РАЗГРАНИЧЕНИЯ ДОСТУПА ПОЛЬЗОВАТЕЛЕЙ К ФУНКЦИОНАЛУ
ИНФОРМАЦИОННОЙ СИСТЕМЫ"
При проектировании информационной
"системы (ИС) перед системными архитекторами и
разработчиками программного обеспечения,"
"наряду с задачами по реализации основного бизнесфункционала ИС, также стоит
задача по"
"обеспечению информационной безопасности [5]
разрабатываемой ИС. Одним из методов"
"обеспечения информационной безопасности
является ограничение доступа к информации,
которое включает применение Механизмов"
Аутентификации Пользователей (МАП) и Систем
"Разграничения Доступа Пользователей (СРДП) к
функционалу и ресурсам ИС. МАП позволяет
ограничить круг пользователей ИС – в систему
сможет войти только тот пользователь, учетная
запись для которого существуют в базе данных ИС
и эта запись имеет разрешение на вход"
пользователя. СРДП определяет права
"зарегистрированных пользователей на доступ к той
или иной информации внутри ИС, а также права на
создание и изменение этой информации. В"
"настоящее время для программной реализации этих
механизмов для всех популярных языков"
"программирования существует множество готовых
библиотек и модулей, каждые из которых решают
узкий круг задач. Одна библиотека реализует МАП,
другая – механизмы СРДП. Одна предназначена
для работы в составе серверного backend, другая –
на клиентском frontend. При этом, комплексного
решения не существует и каждый разработчик ИС
использует свой набор библиотек и модулей, а
также способы их связывания между собой для
реализации поставленных задач по"
"аутентификации пользователей и разграничения их
доступа к ресурсам внутри ИС. К основным
недостаткам практики использования множества
сторонних библиотек и модулей в большинстве
случаев можно отнести:"
− слабую связанность подключаемых
библиотек и модулей между собой;
− избыточную или недостаточную
функциональность;
− отсутствие каких-либо гарантий
"дальнейшей поддержки библиотеки или модуля и
их совместимости с используемым окружением в
будущем с развитием языка программирования
и\или технологий."
"В данной статье я хочу представить свое
решение данной задачи с использованием всего
одной подключаемой сторонней библиотеки на
стороне серверного backend и реализующей
функционал МАП. Для реализации механизмов"
"СРДП никакие дополнительные библиотеки не
потребуются. Данное решение я неоднократно и"
"успешно применял при разработке клиентсерверных [3] ИС самого разного
назначения: от"
"простых CRM до Систем корпоративного
документооборота и Панелей Управления"
"Платежными Системами. Это означает, что
описанные методы реализации СРДП применимы к
любому типу ИС, разрабатываемых с применением
любого технологического стека [2]."
Организация СРДП
"Для организации СРДП к функционалу ИС я в
своих проектах использую классическую схему"
"Ролевой Модели (РМ) с небольшими, но
функционально существенными доработками."
"Итак, классическая схема РМ предполагает,
что СРДП в ходе своей работы оперирует тремя
сущностями данных: Пользователь, Роль и Ресурс."
Понятие «Ресурс» в данном случае следует
"трактовать как совокупность локального бизнесфункционала ИС, относящегося к
управлению"
"данными одной бизнес-сущности внутри этой ИС,
например: «Справочник контрагентов»,"
"«Справочник Терминалов», «Управление
пользователями», «Отчеты», «Просмотр
статистики» и т.п. Каждому Пользователю ИС
может быть назначена одна или несколько Ролей, а
каждая Роль может включать один или несколько"
"Ресурсов ИС. Одновременно с этим: одна Роль
может быть назначена нескольким Пользователям,
а один Ресурс может принадлежать нескольким"
"Ролям. Таким образом каждый Пользователь
обеспечивается определенным набором Ресурсов,
доступных ему внутри ИС. Теоретическую базу по
теме РМ в СРДП можно изучить в [4], [6] и [8]."
"Основным недостатком классической РМ
можно считать ее недостаточную гибкость в
некоторых ситуациях, когда, например, для одной"
Роли нужно дать полный доступ к определенному
"Ресурсу, а для другой Роли – доступ только на
просмотр данных этого же Ресурса и т.п."
"Предлагаемые мной доработки классической
схемы РМ включают следующее:"
1. Иерархическая организация Ресурсов.
Данная практика позволит выполнять группировку
Ресурсов ИС по функциональным разделам.
Например: «Справочники», «Отчеты»,
"«Документы», «Статистика» и т.п. Практическим
применением данного решения является
возможность автоматической генерации"
"содержимого главного меню ИС с учетом
имеющихся у текущего пользователя прав доступа
к Ресурсам ИС и выдача его во frontend для
отображения этому пользователю. При этом
разработчику frontend нет необходимости вести в
проекте разработку главного меню ИС, вместо
этого он будет получать готовое содержимое этого
меню с сервера;"
2. Добавление дополнительной сущности
«Действия» в структуру данных механизма СРДП.
"Сущность «Действия» определяет набор атрибутов
доступа к Ресурсам ИС, например:"
"«чтение\просмотр данных», «добавление записей»,
«изменение записей», «удаление записей» и"
"«восстановление записей». Эти атрибуты
ассоциируются с Ресурсом, а их значения
определяются при установлении связи Ресурса и"
"Роли. Таким образом, мы получаем следующую
схему взаимосвязи сущностей в СРДП:"
"Пользователь – Роль – Ресурс – Действия, в
30 East European Scientific Journal #1(77), 2022
которой каждый Ресурс может наделяться
собственным набором Действий;"
"3. Внести небольшие доработки в код backend
и frontend ИС с целью обеспечения полного
функционирования предлагаемой СРДП (см."
далее).
"На основании требований, предъявляемых к
реализации классической РМ и
усовершенствований, введенных в нее, можно
построить схему данных, представленную на
Рисунке 1."
Рисунок 1. Схема данных для СРДП
"Данная схема демонстрирует сущности
доработанной РМ, задействованные в
предлагаемой СРДП и связи между ними, а также
пример их реализации на реляционной базе данных
[1]. По структуре данных представленной на
Рисунке 1 видно, что список Действий может
свободно дополняться разработчиком ИС новыми
элементами, потребность в которых может
возникнуть с учетом всего огромного разнообразия
функционала разрабатываемой ИС, а не только
обычные «чтение», «запись» и «удаление». Теперь
давайте разберем назначение каждой из
представленных таблиц и полей в них."
User – имплементирует сущность
«Пользователь». Хранит учетные записи
Пользователей ИС и используется в МАП ИС.
Назначение полей таблицы User:
− id – Идентификатор пользователя.
Автоинкрементное поле;
− name – ФИО пользователя;
"− email – Адрес электронной почты
пользователя;"
− login – Логин пользователя;
− passwd – Хэш пароля пользователя;
− salt – Зашифрованный Секретный ключ
"для подписи токена (см. раздел «Аутентификация
пользователя ИС»);"
− disabled – Блокировка пользователя;
"− blocked_until – Блокировка пользователя
до указанной даты и времени;"
− created_at – Дата и время создания записи;
− deleted_at – Дата и время удаления записи.
Role – имплементирует сущность «Роль».
Хранит список Ролей Пользователей ИС.
Назначение полей таблицы Role:
− id – Идентификатор роли.
Автоинкрементное поле;
− name – Имя роли;
− disabled – Блокировка роли;
− created_at – Дата и время создания записи;
− deleted_at – Дата и время удаления записи.
Resource – имплементирует сущность
"«Ресурс». Хранит упорядоченный иерархический
список Ресурсов ИС, доступ к которым нужно
предоставлять\ограничивать Пользователям ИС."
"Кроме этого, на основании данных этой таблицы,
как упоминалось выше, серверный backend ИС
выдает список пунктов главного меню, доступных
Пользователю, для отображения на frontend ИС."
"Доступ на внесение и правку данных этой таблицы
должен быть только у разработчика ИС. Данные,
внесенные в эту таблицу, должны быть
согласованы с разработчиком frontend ИС."
Назначение полей таблицы Resource:
"East European Scientific Journal #1(77), 2022 31
− id – Идентификатор Ресурса."
Автоинкрементное поле;
− parent_id – Идентификатор родительского
Ресурса;
− name – Наименование Ресурса;
"− internal_name – Внутреннее служебное
имя Ресурса. Уникальный строковый
идентификатор Ресурса. Используется
механизмами СРДП на backend (см. раздел
«Механизмы проверки действий Пользователя на
сервере»). Может использоваться как
идентификатор строкового ресурса в модуле
интернационализации на frontend – в данном случае
Значение этого параметра обязательно должно
быть согласовано с разработчиком и\или
специалистом по интернационализации frontend
ИС;"
"− sort_order – Порядок сортировки при
отображении в меню на frontend;"
"− router_path – Путь к пользовательскому
интерфейсу Ресурса в локальном роутере frontend."
"Значение данного параметра обязательно должно
быть согласовано с разработчиком frontend ИС;
− icon – Иконка, отображаемая для пункта
меню на frontend;"
− created_at – Дата и время создания записи;
− deleted_at – Дата и время удаления записи.
Action – имплементирует сущность
"«Действие». Хранит стандартные и определяемые
разработчиком ИС дополнительные Действия."
"Доступ на внесение и правку данных этой таблицы
должен быть только у разработчика ИС. Данные,
внесенные в эту таблицу, должны быть"
согласованы между разработчиками ИС.
Назначение полей таблицы Action:
− id – Идентификатор Действия.
Автоинкрементное поле;
− name – Наименование Действия
(Например: чтение, запись, удаление,
восстановление, просмотр информации о записи);
− internal_name – Внутреннее служебное
имя Действия. Уникальный строковый
"идентификатор Действия, соответствующий по
смыслу его Наименованию (например: read, write,
delete, restore, info). Используется механизмами"
"СРДП на backend и frontend. Кроме этого, может
использоваться как идентификатор строкового
ресурса в модуле интернационализации на frontend."
"Значение этого параметра обязательно должно
быть согласовано с разработчиком backend и с
разработчиком и\или специалистом по"
интернационализации frontend ИС;
− sort_order – Порядок сортировки при
отображении на frontend.
UserRoles – имплементирует связь сущностей
"«Пользователь» и «Роль» в отношении многие-комногим: одна Роль может быть
назначена одному"
"или нескольким Пользователям, а Пользователь
может иметь одну или несколько Ролей. Все
разрешенные Действия на связанных с Ролью"
"Ресурсах будут доступны Пользователю, которому
назначена эта Роль. Добавление записи в таблицу"
UserRoles устанавливает связь Пользователя и
Роли, идентификаторы которых были
"использованы для добавления записи. Для
прекращения действия установленной связи
необходимо просто удалить нужную запись из
таблицы. Назначение полей таблицы UserRoles:"
− user_id – Идентификатор Пользователя.
Внешний ключ к таблице User;
− role_id – Идентификатор Роли. Внешний
ключ к таблице Role.
ResourceActions – имплементирует связь
"сущностей «Ресурс» и «Действие» в отношении
многие-ко-многим: одно Действие может быть
назначено одному или нескольким Ресурсам, а"
Ресурс может иметь одно или несколько Действий.
"Добавление записи в таблицу ResourceActions
устанавливает связь Действия и Ресурса,"
"идентификаторы которых были использованы для
добавления записи. Установленные связи будут
определять, какие Действия будут доступны на"
Ресурсе при установке связей Роль-Ресурс (см.
"RoleResourceActions ниже). Для прекращения
действия установленной связи необходимо просто
удалить нужную запись из таблицы. Назначение
полей таблицы ResourceActions:"
− resource_id – Идентификатор Ресурса.
Внешний ключ к таблице Resource;
− action_id – Идентификатор Действия.
Внешний ключ к таблице Action.
RoleResourceActions – имплементирует связь
"сущностей «Роль» и «Ресурс» в отношении многиеко-многим: один Ресурс может быть
назначен"
"одной или нескольким Ролям, а Роль может
включать доступ к одному или нескольким"
Ресурсам. Кроме этого, данная таблица
имплементирует определение разрешенного
Действия для установленной связи Роль-Ресурс.
Для определения нескольких Действий для
"установленной связи Роль-Ресурс необходимо
добавить соответствующее количество записей с
нужными идентификаторами Роли, Ресурса и"
"Действия. Для отмены разрешенного Действия для
установленной связи Роль-Ресурс, необходимо
просто удалить нужную запись из таблицы."
Назначение полей таблицы RoleResourceActions:
− role_id – Идентификатор Роли. Внешний
ключ к таблице Role;
− resource_id – Идентификатор Ресурса.
Внешний ключ к таблице Resource;
− action_id – Идентификатор Действия.
"Внешний ключ к таблице Action. Определяет
разрешенное Действие для Роли на указанном"
Ресурсе.
Управление доступом пользователей
внутри ИС
"Всей структурой данных, описанной выше для
использования в предлагаемой СРДП, теперь
нужно как-то управлять. Для этого в ИС выделяют
специальный раздел для Администратора Системы"
"и создают в нем все необходимые формы и прочие
элементы пользовательского интерфейса,
32 East European Scientific Journal #1(77), 2022
предназначенные для управления системными
параметрами и свойствами ИС, в том числе и для
управления Пользователями, а также их доступом к
Ресурсам ИС. Такой раздел ИС принято называть
Панелью Администратора. При этом следует
понимать, что «Администратор Системы» – это
такой же пользователь ИС, как и все остальные, но
наделенный правами доступа в Панель"
"Администратора. Таким образом, исходя из
предлагаемой СРДП, любой пользователь может
стать Администратором Системы, а у любого
такого Администратора может быть разный
уровень доступа к элементам Панели"
Администратора.
"Для обеспечения управления описанной
структурой данных в Панели Администратора
Вашей ИС необходимо выполнить следующее:
1. Создать справочник «Действия»;"
"2. Создать справочник «Ресурсы». Ресурсы в
справочнике отображать в виде отсортированного
иерархического списка, согласно тому, как они
записаны в таблице Resource базы данных. Для
удобства желательно обеспечить перемещение
элементов для изменения порядка их сортировки, а
также по уровням иерархии путем перетаскивания
мышью. Если на frontend Вашей ИС используется
модуль интернационализации, задействуйте поле
internal_name, возвращаемое сервером из таблицы
Resource в качестве идентификатора строки для
получения перевода наименований Ресурсов из
словарей модуля интернационализации;"
"3. Создать раздел «Роли пользователей», в
котором реализовать:"
− создание новой Роли;
− изменение наименования существующей
Роли;
"− выбор Действий у необходимых Ресурсов
для включения соответствующих доступов в
выбранную Роль. Пример реализации
пользовательского интерфейса для определения
доступов Роли к Действиям на Ресурсе представлен
на Рисунке 2. В данном интерфейсе необходимо
реализовать отображение Действий слева направо в
порядке возрастания значения поля sort_order,
возвращаемое из таблицы Action. Если на frontend"
Вашей ИС используется модуль
интернационализации, задействуйте поле
internal_name, возвращаемое сервером из таблицы
"Action в качестве идентификатора строки для
получения перевода наименований Действий из
словарей модуля интернационализации;"
4. В разделе управления пользователями:
− на стороне backend, при создании нового
"пользователя, обеспечить генерацию секретного
ключа, его шифрование и сохранение полученного
значения в поле salt таблицы User (см. Рисунок 1);"
− на форме создания\редактирования
Пользователя добавить вкладку, где
Администратор ИС будет назначать Роли для
Пользователя путем выбора одной или нескольких
Ролей из списка;
"Рисунок 2. Пример реализации пользовательского интерфейса для конфигурирования
доступов Роли к"
Действиям на Ресурсах в Панели Администратора ИС
East European Scientific Journal #1(77), 2022 33
Аутентификация пользователя ИС
"В последнее время широкое распространение
получил способ аутентификации пользователя с
использованием токенов доступа, называемых
также web-токенами. Токены создаются сервером,
подписываются секретным ключом и передаются
клиенту, который в дальнейшем использует
данный токен для подтверждения своей личности."
"Наиболее популярным в данной сфере является
стандарт JSON Web Token (JWT) [9]. Его я и
рекомендую использовать для реализации МАП в"
"Вашей ИС. На странице jwt.io/libraries вы сможете
подобрать наиболее подходящую библиотеку для
работы с JWT для используемого Вами языка
программирования на стороне backend. К слову, эта
та самая библиотека, которая упоминалась в начале
статьи, как единственная сторонняя библиотека,
подключаемая в проект ИС для реализации МАП."
"Также на сайте проекта jwt.io вы сможете найти всю
необходимую документацию, описание стандарта и
примеры использования подключаемых библиотек."
Основным преимуществом использования
"web-токенов в контексте рассматриваемой темы
является возможность включения в тело"
"создаваемого токена полезной нагрузки (payload),
скрытой от посторонних глаз применяемыми
стандартом JWT алгоритмами шифрования."
Используем эту возможность.
"В проекте backend Вашей ИС сделайте
следующее:"
"1. Добавляйте идентификатор
авторизовавшегося пользователя в структуру
payload при создании токена – этот идентификатор
потребуется в работе механизмов СРДП (см. раздел
«Механизмы проверки Действий Пользователя на
стороне сервера»);"
"2. В качестве секретного ключа для подписи
создаваемого токена используйте предварительно
расшифрованное значение поля salt учетной записи
авторизовавшегося пользователя (см. Рисунок 1)."
"В проекте frontend Вашей ИС необходимо
выполнить следующие работы:"
"1. Добавьте в проект страницу с формой
авторизации Пользователя и создайте маршрут к
ней в локальном роутере;"
"2. Организуйте отправку данных с формы
авторизации Пользователя на сервер, а также
обработку и отображение ошибок процесса
аутентификации;"
3. В случае успешной аутентификации
"Пользователя сохраняйте полученный токен и, если
есть, по необходимости, другие данные из ответа
сервера в локальное хранилище браузера (local
storage) и перенаправьте Пользователя на главную
страницу ИС;"
"4. Добавьте в проект страницу «В доступе
отказано» и создайте маршрут к ней в локальном
роутере;"
"5. Используйте сохраненный в локальном
хранилище браузера токен при отправке каждого
запроса к Ресурсам ИС, требующим
авторизованного доступа. В случае, когда на такой
запрос от сервера получен ответ с кодом состояния
HTTP* 401, перенаправьте Пользователя на
страницу с формой авторизации. В случае, когда на
такой запрос от сервера получен ответ с кодом
состояния HTTP 403, перенаправляйте"
"Пользователя на страницу «В доступе отказано»,
либо отображайте всплывающее сообщение об
отсутствии прав доступа."
"* Список всех кодов состояния HTTP можно
изучить на страничке Википедии [7];"
Механизмы ограничения действий
Пользователя на клиенте
"Первую линию обороны от
несанкционированных действий Пользователя в"
"контексте СРДП представляют правильно
реализованные механизмы ограничения таких
действий на frontend (клиентской стороне) ИС. Их
всего три, а именно:"
1. После успешного выполнения авторизации
"Пользователя и перехода на главную страницу ИС
в Вашем frontend необходимо выполнить запрос
содержимого главного меню с сервера и отобразить
его пользователю. Сервер возвратит только те
пункты меню, Ресурсы которых входят в
ассоциированные и не заблокированные Роли"
Пользователя, у которых в списке разрешенных
"Действий есть, как минимум, разрешение на
просмотр данных. Сохраните полученные данные с
содержимым главного меню в хранилище
состояний (Store) Вашего frontend. Если на frontend"
Вашей ИС используется модуль
"интернационализации, задействуйте поле
internal_name, возвращаемое сервером из таблицы"
"Resource в качестве идентификатора строки для
получения перевода наименований Ресурсов"
(пунктов меню) из словарей модуля
интернационализации;
"2. При переходе в один из пунктов меню
frontend, согласно инструкции локального роутера,
выполняет переход на страницу, где, как правило,
реализован функционал по управлению данными
одной из множества бизнес-сущностей (Ресурсов)"
"ИС. Данный функционал, как правило, реализован
в виде табличного представления данных Ресурса и
несколько кнопок для управления этими данными:
чаще всего «Добавить», «Изменить» и «Удалить»."
"При переходе на такую страницу frontend
запрашивает с сервера ИС и получает в ответе
данные Ресурса для отображения их в табличном
виде. Кроме этих данных сервер возвращает список
разрешенных для этого Ресурса Действий,
определенных для текущего Пользователя через
его не заблокированные Роли. На основании
полученного списка разрешений frontend
отображает, либо скрывает кнопки управления
данными Ресурса, идентифицируя их по значению
поля internal_name, передаваемого сервером из
таблицы Action через установленные связи между
сущностями СРДП в базе данных (см. Рисунок 1);"
"3. Добавьте в локальный роутер функциюобработчик события, срабатывающего
непосредственно перед переходом по локальному"
34 East European Scientific Journal #1(77), 2022
"маршруту. В этой функции выполните проверку
наличия целевого маршрута в хранилище
состояний (Store), где ранее были сохранены
данные с содержимым меню. В случае отсутствия
целевого маршрута среди данных в хранилище
состояний следует прервать переход по такому
маршруту и повторно запросить с сервера и
отобразить содержимое главного меню."
Механизмы проверки действий
Пользователя на сервере
"Вторую линию обороны от
несанкционированных действий Пользователя в
контексте СРДП занимают механизмы проверки
его действий, реализованные на стороне сервера
ИС. Данные механизмы необходимы для
соблюдения строгих норм информационной
безопасности в части ограничения доступа к
информации, например:"
− в случаях, когда Администратор ИС в
"одной из Ролей удалил разрешение на какое-то
Действие или вовсе заблокировал одну из Ролей
или заблокировал учетную запись Пользователя, а
Пользователю на frontend об этом еще «не
известно» (Пользователь перешел на страницу
Ресурса до отмены Администратором разрешений
и не обновлял страницу);"
− в случаях, когда не в меру любознательный
"Пользователь или злоумышленник, используя
инструменты разработчика, встроенные в браузер,
разобрался с тем, как frontend работает с API
backend’а и пытается слать беспорядочные запросы
на сервер;"
"− в случаях, когда злоумышленник,
используя инструменты разработчика, встроенные
в браузер, смог вмешаться в код Вашего frontend и
изменить состояния элементов управления или
смог изменить значения переменных в хранилище
состояний, позволившие ему выполнить некоторые
действия, которые ему до этого были недоступны в
силу отсутствия необходимых доступов."
"Всех этих ситуаций можно избежать,
реализовав в коде backend пару простых функций,
образующих вместе надежный механизм проверки
действий Пользователя:"
"1. Реализуйте функцию для извлечения
идентификатора Пользователя из секции payload
передаваемого frontend’ом токена. Назовем эту
функцию ExtractUID. В качестве параметра"
функция будет принимать строку токена
"Пользователя, а в качестве результата возвращать
извлеченный идентификатор этого Пользователя;
2. Реализуйте функцию для проверки
наличия у Пользователя разрешения на
выполнения Действия для указанного Ресурса."
"Назовем эту функцию UserPermissionCheck. В
качестве параметров функция будет принимать три
параметра: идентификатор пользователя,
строковый идентификатор Ресурса (значение поля
internal_name из таблицы Resource) и строковый
идентификатор Действия (значение поля
internal_name из таблицы Action). Используя
полученные значения входных параметров,
функция UserPermissionCheck выполняет запрос к
базе данных, который проверяет наличие
соответствующих записей в таблицах"
"RoleResourceActions и UserRoles, а также не
заблокирована ли учетная запись Пользователя и
его Роль\Роли (см. Рисунок 1). В случае наличия
нужных записей в указанных таблицах и
отсутствии блокировок, функция"
"UserPermissionCheck возвратит true, иначе – false;
3. Поместите вызов ExtractUID в самом
начале каждого обработчика запроса к методам
всех Ресурсов. В случае ошибки следует прервать
дальнейшую обработку запроса и вернуть во
frontend ответ с кодом статуса HTTP 401. В случае
успешного извлечения идентификатора
пользователя, следует сохранить результат
выполнения функции ExtractUID в переменную,
например – uid;"
4. Сразу после этого вызывайте функцию
"UserPermissionCheck, передав в нее значение
переменной uid, строковый идентификатор Ресурса
и строковый идентификатор Действия,
соответствующие вызываемому методу. Например:
UserPermissionCheck(uid, ‘branches’, ‘view’). Если
функция вернет false, следует прервать
дальнейшую обработку запроса и вернуть во
frontend ответ с кодом статуса HTTP 403."
Заключение
Предложенная в этой статье методика
"позволит реализовать СРДП к Ресурсам Вашей ИС
с максимальной детализацией прав доступа, вплоть
до каждой отдельной кнопки на интерфейсе
пользователя ИС. Представленные доработки
классической РМ, а также механизмы ограничения"
"и проверки действий Пользователя, позволят
получить разработчикам и архитекторам ИС
основу для разработки собственной СРДП и ее
дальнейшего совершенствования под свои нужды"
Технологии разработки серверной части приложений и систем
"Наиболее популярными языками программирования при разработке серверной части
являются"
"Python, JavaScript, Java, PHP, C#. Однако в чистом
виде данные языки редко применяются. Все чаще"
"разработка ведется при помощи специальных программных сред, называемых
фреймворками."
Фреймворки содержат в себе некий каркас
"программы, который позволяет ускорить разработку систем путем переиспользования
компонентов, входящих в состав фреймворка, а также добавления компонентов,
характеризующих особенности конкретной системы. Ниже в таблице 1 приведены
наиболее популярные языки и фреймворки,
используемые при реализации серверной части систем."
TECHNICAL SCIENCE / «Colloquium-journal»#16(68),2020
Таблица 1
Популярные технологии разработки серверной части приложений
Язык программирования
Python JavaScript Java PHP С#
Технологии
Flask Express Spring Laravel .NET
Django Node.js Apache Struts Yii UWP
Hibernate Zend
Swing
"Несмотря на существенные отличия веб-систем, мобильных и десктоп приложений,
подходы к"
"реализации серверной части практически ничем не
отличаются. Существенное отличие наблюдается"
только в используемом стеке технологий для разработки десктоп приложений.
"Считаем нецелесообразным приводить детальное описание языков
программирование, т.к. они являются широко известными и популярными в
разработке, однако рассмотрим более подробно основные фреймворки,
представленные в таблице 1. В отличие от языков
программирования фреймворки ориентированы на
тип систем, разрабатываемых с их помощью, в
частности при разработке веб систем популярными
фреймворками являются Django, Express, Apache"
"Struts, Zend. Перейдем к более детальному рассмотрению соответствующих
фреймворков."
"Django - это бесплатный и открытый фреймворк языка Python, который позволяет
разработчикам писать сложный код и приложения быстро."
"Django помогает разрабатывать качественные вебсистемы. Фреймворк широко
используется для"
"быстрой разработки API и веб-систем. Это один из
самых популярных фреймворков для разработки
веб-систем."
"Высокоуровневый фреймворк позволяет упростить и ускорить разработку,
предоставляя различные мощные преимущества. Он включает в себя колоссальный
ассортимент библиотек, увеличивает"
"эффективность и уменьшать количество кода за
счет повторного использования компонентов"
"Express – это минималистичный и гибкий вебфреймворк для приложений Node.js, 
имеющий в"
"своем распоряжении множество HTTP-методов и
промежуточных обработчиков, позволяющих
быстро и легко создать надежный API."
"Apache Struts – это открытый фреймворк, работающий по MVC модели, который
помогает создавать элегантные веб-системы на языке Java. Фреймворк предназначен
для создания сложных систем и"
включает в себя множество плагинов для разработки сложной архитектуры.
"Zend – фреймворк с открытой архитектурой,
основанной на модели MVC и поддерживающий"
"стандарты PHP-FIG. Фреймворк позволяет создавать системы с высокой степенью
безопасности, используя функцию хеширования паролей bcrypt и"
AES для расшифровки.
"При разработки серверной части для мобильных приложений популярными являются
фреймворки Flask, Laravel, Hibernate. Перейдем к более
детальному рассмотрению данных фреймворков."
Flask – фреймворк языка Python, доступный по
"лицензии BSD. Основной целью Flask является создание мощной базы веб-
приложения. Разработчики могут использовать фреймворк для любых"
"проектов, но он был разработан для открытых проектов. Flask используется большими
компаниями,"
"такими как LinkedIn и Pinterest. Flask это лучшее решение для маленьких и простых
проектов. В Flask"
интегрированы unit-тесты для ускорения разработки.
Laravel – самый популярный фреймворк языка
"PHP, который предоставляет возможность разрабатывать комплексные решения с
достаточной степенью безопасности и высокой скоростью. Фреймворк включает в себя
мощные библиотеки для декодирования данных и огромное количество функционала."
Hibernate – фреймворк, который позволяет
"транслировать Java – объекты в таблицы базы данных и наоборот, используя свой
язык запросов,"
называемый HQL.
При реализации серверной части для десктоп
"приложений популярными фреймворками являются .NET, UWP, Swing. Перейдем к
более детальному рассмотрению перечисленных фреймворков."
".NET - фреймворк, который использует Microsoft Visual Studio и предоставляет
разработчику"
"различные возможности использования фреймворков, реализованных на других
языках программирования, таких как Python, C#, C++ и т.д. Это мощнейший
инструмент для разработки программного"
обеспечения для десктопа.
"UWP – Универсальная Платформа Windows,
которая позволяет разрабатывать приложения для
различных Windows платформ."
Swing - фреймворк языка Java, позволяющие
"разрабатывать кроссплатформенные десктоп приложения, а так же использовать
средства разработки под Windows."
"В процессе работы рассмотрены основные технологии и их особенности при
реализации информационных систем."
Современные тенденции развития веб-разработки
"Веб-сфера одна из наиболее популярных и быстро развивающихся сфер в
современном мире. В век интернета наиболее востребованным ресурсом
является информация, которую любой человек может получить в"
1270
"Научно-образовательный журнал для студентов и преподавателей «StudNet» №9/2020
неограниченном количестве, просто открыв браузер на своем домашнем
компьютере или смартфоне. Но чтобы эта информация была правильно
воспринята, её необходимо структурировать и грамотно отобразить. Так и
началась эпоха веб-разработки. Сейчас же сложно представить какую-либо
компанию или организацию, у которой бы не было собственного веб-сайта."
"Миллионы пользователей по всему миру, а также миллиарды устройств,
подключенных к сети интернет, дают понять, что данная сфера действительно
очень востребована и будет только продолжать развиваться."
"За последние годы веб-индустрия сильно выросла во всех отношениях. Она,
как и весь мировой прогресс не стоит на месте. Практически каждый день
появляются новые решения и методы по разработке веб-сайтов. От статичных
и плоских интернет ресурсов, хорошо работающих только на домашних
компьютерах, все переросло в масштабные адаптивные веб-приложения,
способные подстраиваться под любое устройство и любую диагональ экрана."
"Это придало веб-сайтам универсальности и привлекло еще большее
количество новых пользователей, что побудило разработчиков со всего мира
не останавливаться на достигнутом."
"Веб-разработка подразделяется на две фундаментальные части – на frontend и
backend. Эти термины будут знакомы тем, кто уже работает или начинает
изучать данную область. Говоря простым языком, frontend-разработчик
создает интерфейс сайта, то, как его видят пользователи на странице в
браузере, также он придает сайту динамичность и адаптивность. Иногда в эту
область также включается первичная обработка данных пользователя и
настраивание веб-сервера. Backend-разработчик, в свою очередь, занимается
внутренней составляющей веб-сайта, которая не видна обычным
пользователям. Под этим подразумевается обработка различных данных,
работа с базой данных, написание алгоритмов, соединение веб-ресурсов
между собой и так далее. Оба этих направления очень популярны и достаточно"
быстро развиваются.
"Последние несколько лет основной целью веб-разработки была
функциональность, простота использования и производительность. Однако, с
учетом того, что технологии в этой сфере постоянно развиваются, стало
появляться больше возможностей для добавления новых динамичных
элементов без потери качества. Поэтому один из современных трендов –
добавление большого количества различных изображений и анимаций. Это
позволяет делать веб-сайты более яркими и интерактивными. Параллельно с
этим трендом также идет и адаптивность. Она уже давно используется при
написании сайтов, однако до сих пор не везде применяется, и в зависимости
1271"
"Научно-образовательный журнал для студентов и преподавателей «StudNet» №9/2020
от появления новых технологических решений также меняется. В связи с этим,
можно заметить тенденцию к унификации веб-приложений, превращение их в
полноценную интерактивную платформу, работающую на абсолютно любых
устройствах с одинаковой удобностью использования, а также грамотным
отображением контента."
"Следующая тенденция – прогрессивные веб-приложения. Она связана с
предыдущей, но является более конкретной. В эру мобильных телефонов
необходимо создавать такие веб-ресурсы, которыми не просто было бы удобно
пользоваться, а такие, которые, в том числе, могли бы заменять полноценные
мобильные приложения. Такие веб-приложения не будут по функционалу и
отображению отличаться от мобильных, однако их не надо будет скачивать с
различных сервисов, а также практически не придется задействовать память
самого устройства. Данная технология называется PWA. Основная её задача –
повышении конверсии и превращение работу с сайтами на смартфонах в
простой, не вызывающий неудобств процесс. Преимущества, которые можно
подчеркнуть, изучая данную технологию – скорость работы и загрузки
информации, экономия средств при разработке, автономность и вес самого
веб-приложения, который может быть на 90% меньше своего нативного
аналога. Одна из первых компаний, успешно применившая такой подход,
стала Starbucks. Сейчас эта современная тенденция стремительно набирает
обороты и в ближайшие несколько лет будет ориентиром для многих
компаний в веб-разработке."
"Помимо технологических решений, подходы к разработке также постоянно
развиваются и усовершенствуются. Одним из наиболее современных и
перспективных подходов является – Serverless. Исходя из названия прежде
всего можно подумать, что такие веб-приложения работают без сервера и базы
данных, но это не так. Главное отличие этого подхода заключается в том, что
весь backend код представлен в виде облачных функций. Это позволяет
приложению легко масштабироваться, а разработчику больше фокусироваться
на бизнес-задачах, чем на продумывании инфраструктуры. Еще одно
преимущество данного подхода – экономия средств при аренде серверов, так
как он использует столько ресурсов, сколько необходимо для решения
конкретной задачи. В случае если нагрузки нет, серверное оборудование не
используется вовсе. Еще несколько лет назад Serverless из-за своей новизны и
не приспособленности серверов использовался очень редко, в основном в
тестовом виде, но сейчас, когда оборудование стало более современное, этот"
"подход начал применяться все чаще и чаще. Он не идеальный и еще нуждается
1272"
"Научно-образовательный журнал для студентов и преподавателей «StudNet» №9/2020
в доработках, однако многие крупные компании уже сейчас пророчат этому
подходу большое будущее."
"Одним из основных инструментов, без которого невозможно представить
вебразработку – язык программирования JavaScript. Разработка абсолютного
любого веб-сайта не может обойтись без него. Из этого можно сделать вывод,
что данный язык, как и сама сфера постоянно развивается. Из языка, который
просто использовался для придания динамичности сайту, он перерос в язык с
помощью которого можно создавать современные интерактивные
интерфейсы, а также взаимодействовать с сервером. Он ежедневно
улучшается, дорабатывается и имеет свои тенденции развития. Далее будут
рассмотрены наиболее популярные и перспективные фреймворки языка
JavaScript, которые дополняют его и позволяют использовать в различных
направлениях."
В первую очередь данный язык используется для frontend-разработки.
"Наиболее популярный фреймворк такого типа – React. Это эффективная и
гибкая библиотека для создания интерактивных пользовательских
интерфейсов. За последние годы интерес к нему сильно вырос и будет
продолжать расти. Следующим фреймворком, которого безусловно можно
отнести к трендам языка JavaScript, является – Vue. Он был разработан совсем
недавно, но уже считается одним из самых мощных для разработки
пользовательских интерфейсов. Единственный его недостаток – это
небольшое количество документации, однако в ближайшие пару лет он
должен решиться. Тем разработчикам, которые только начинают изучать
фреймворки JavaScript, следует к нему присмотреться."
"Не смотря на сильную ориентированность этого языка в сторону вебинтерфейсов, он
способен работать и с backend-частью. Для этого в первую"
"очередь необходима кроссплатформенная среда Node, для того чтобы
JavaScript превратился в серверный язык, и далее один из самых современных
и гибких фреймворков – Express. Он дополняет Node и позволяет быстро
создавать веб-приложения. За счет своей минималистичность и гибкости, его
сейчас выбирают большинство разработчиков."
"Из проделанной работы можно сделать вывод, что веб-разработка одна из
самых популярных и перспективных направлений сегодня. Она постоянно
развивается, принося все больше и больше современных решений, которые
привлекают пользователей со всего мира. С каждым годом появляются новые
методы, технологии, которые превращают веб-сайты в мощные"
1273
"Научно-образовательный журнал для студентов и преподавателей «StudNet» №9/2020
интерактивные платформы. В данной статье были рассмотрены наиболее
перспективные и современные тенденции и решения, на которых еще долго
будут строятся принципы веб-разработки"
"Разработка информационных систем предприятия, соответствующих федеральным
стандартам обеспечения безопасности информации"
"Жизнь современного предприятия невозможно представить без локальной
вычислительной сети (ЛВС), позволяющей осуществлять взаимодействия
сотрудников, обмениваться"
"корпоративной почтой и пользоваться хранящейся на сервере информацией. В
зависимости"
"от специфики производственной деятельности доступ к такой информации может быть
свободным или ограниченным, причем последнее - необходимость ограничения
доступа к какой-то части информации - присутствует всегда."
"Учитывая совокупность задач, возлагаемых на ЛВС предприятия, зачастую возникает
необходимость упорядочить и структурировать работу сети, и самое очевидное
решение этой"
"проблемы - создание сайта с соответствующими разделами (новости, справочники,
статьи,"
"базы данных и т.п.). Задача сама по себе несложная, учитывая, что существует масса
конструкторов сайтов, позволяющих даже не очень квалифицированному
программисту создать"
сайт с минимально достаточным функционалом.
"Однако программный код такого сайта, как правило, не исследуется на возможные
уязвимости, особенно если ЛВС предприятия не имеет выхода в глобальную сеть."
Априори
"предполагается, что враг снаружи, сотрудники лояльны и вероятность хакерских атак
внутри"
"сети низкая. Между тем, даже потенциальная возможность неких деструктивных
действий"
может представлять серьезную угрозу для деятельности предприятия.
"В Реестре федеральных государственных информационных систем, размещенном на
сайте Роскомнадзора по состоянию на май 2016 г. числится 339 информационных
систем,"
"причем это системы государственных структур, таких как МВД, МИД, ФМБА, ФК
России,"
"Грошева Е.А., Гусев И.В., Дмитриев В.Н., Ильичев К.В., Куликов С.В., Манцеров С.А.,
Панов А.Ю., 2016."
10 Труды НГТУ им. Р.Е. Алексеева № 4(115)
"ГАС ""Выборы"", АИС ""Юстиция""и др. [1]. Все они являются по сути порталами,
имеющими"
"выход в глобальную сеть и, соответственно, разработанными с учетом, в том числе, и
требований безопасности информации."
"Попробуем проанализировать, хотя бы в общих чертах, из чего складывается
безопасность информации, обрабатываемой в некой информационной системе."
Очевидно, как минимум
"два фактора серьезно влияют на этот аспект - операционная система (ОС), а также
рабочее программное обеспечение (РПО), эту информацию обрабатывающее."
"Основываясь на данных, приведенных в Реестре ФГИС, распределение серверных
операционных систем, используемых этими системами, мы получили следующее
распределение, представленное на рис. 1."
Рис. 1. Процентное соотношение используемых серверных ОС
"Использование остальных ОС (FreeBSD, IBM-AIX, Unix, HP-UX, Novell NetWare,
МСВС и Циркон) ничтожно мало."
При этом распределение по клиентским ОС, %:
- Windows - 70,41;
- Linux - 12,96%;
- MacOS - 10,37%.
"Распределение функционирующих систем управления базами данных (СУБД)
представлено на рис. 2."
Рис. 2. Процентное соотношение используемых СУБД
Windows;
68,21%
Linux; 24,86%
Solaris; 1,73%
Microsoft SQL
Server; 37,50%
Oracle; 26,67%
MySQL;
14,17%
PostgreSQL;
9,44%
Информатика и управление в технических и социальных системах 11
"Процентное соотношение использования офисного ПО представлено двумя
платформами и соответственно составляет:"
Microsoft Office - 94,01%;
Open\Libre Office - 5,99%.
"Приведенная статистика показывает, что в подавляющем большинстве случаев даже
в"
"федеральных государственных информационных системах используются ОС
семейства Windows. Говорить об их защищенности (за исключением отдельных
релизов, имеющих соответствующие сертификаты) не приходится. Это проприетарное
ПО с недоступным для анализа кодом[2]."
"Операционные системы на базе Linux можно разделить на два класса:
ОС на базе ядра RedHat;"
ОС на базе ядра Debian.
"Первый является коммерческим дистрибутивом (юрисдикция США), второй - 
некоммерческий дистрибутив внегосударственной юрисдикции."
"На базе RedHat разработаны такие отечественные операционные системы, как ОС
МСВС, ОС ""Альт Линукс"", ОС ""Роса"", ОС ""Заря"". Последние три ОС базируются на
средствах защиты информации - SELinux, разработка Агентства национальной
безопасности"
США.
"На базе Debian есть единственная отечественная ОС - AstraLinux, разработки
компании РусБИТех. Средства защиты информации, применяемые в ней (и в ОС
МСВС) - отечественной разработки."
"Вопросы необходимости импортозамещения в случае выбора ОС и рабочего
программного обеспечения, используемого как в ФГИС, так и в порталах и сайтах
менее крупных предприятий, учреждений и госструктур - это в первую очередь
вопросы именно информационной безопасности этих систем. Но если с"
"операционными системами, сертифицированными по требованиям безопасности
информации, хоть какой-то выбор есть, то с РПО"
"ситуация, как правило, сложнее. Проходить процедуру сертификации во ФСТЭК
готовы далеко не все разработчики, так как она требует существенных временных и
финансовых издержек и существенно осложняет процесс разработки. Учитывая, что к
вопросам создания"
"корпоративных порталов зачастую подходят из остаточных принципов, закладывать в
этот"
процесс процедуру сертификации такого РПО готовы и не все заказчики.
"Было разработано рабочее программное обеспечение РПО ""Корпоративный портал""
(Веб-портал предприятия), которое в мае 2016 г. получило сертификат соответствия
требованиям безопасности информации ФСТЭК России. Данное РПО функционирует в
среде операционной системы ""AstraLinuxSpecialEdition"" версии 1.3, является
программным средством"
"общего назначения со встроенными средствами защиты от несанкционированного
доступа к"
"информации и соответствует требованиям руководящего документа ""Защита от
несанкционированного доступа к информации. Часть 1. Программное обеспечение
средств защиты информации. Классификация по уровню контроля отсутствия
недекларированных возможностей"" (Гостехкомиссия России, 1999) - по уровню 2 
контроля [2]."
"Данное РПО предназначено для организации совместной работы сотрудников
предприятия и решает следующие задачи:"
"создание логики «Одного окна». Портал позволяет собрать в одном месте все
ключевые и часто используемые сотрудниками ресурсы и приложения. Достаточно
открыть страницу в браузере – и все важные документы, необходимые контакты,
назначенные задачи и"
последние новости окажутся перед глазами;
"внутренние коммуникации. Корпоративный портал дает широкие возможности для
увеличения эффективности внутренних коммуникаций за счет встроенного модуля
обмена"
мгновенными сообщениями;
12 Труды НГТУ им. Р.Е. Алексеева № 4(115)
"управление документами. Функционал корпоративного портала позволяет
минимизировать ручные операции и максимально перейти на электронную форму
документооборота"
"за счет единого хранилища документов с поддержкой системы контроля версий;
интеграция. Портал может быть интегрирован с рядом внутренних и внешних систем
организации (например, почтовый клиент), что позволит эффективнее использовать
все перечисленные системы;"
"безопасность. Внутренний портал обеспечивает надежное хранение информации
благодаря строгому, но гибкому разграничению прав доступа и ролей пользователей."
"Функционал корпоративного портала позволяет оптимизировать работу всех жизненно
важных областей работы организации."
В состав программы входят следующие модули:
- главной страницы;
- календаря;
- адресной книги;
- сообщений;
- корпоративного поиска;
- документов;
- новостей;
- управления проектами;
- базы знаний;
- совместного обучения.
"Количество и содержание модулей зависит от настроек системы и определяется
правами"
"пользователя. Так, модуль «Администрирование» присутствует только у
администраторов системы."
"Также интерфейс системы зависит от прав пользователя, с которыми он вошел в
систему. Так, при правах, отличных от НС (несекретно), интерфейс по созданию
новостей/страниц базы знаний будет недоступен."
"Слева на главной странице находится навигационная панель с ссылками на
доступные"
"пользователю модули и пиктограммы уведомлений о новых событиях. Центральный
блок"
"содержит ссылки и описания на последние новости, задания и события. Изображение
главной страницы РПО ""Корпоративный портал"" приведено на рис. 3."
"Модуль календаря позволяет пользователю создавать и получать уведомления о
событиях, таких как личные напоминания, запланированные совещания по какому-
либо проекту."
"Модуль Календарь предоставляет следующие возможности:
планирование личных событий;"
отображение дней рождений сотрудников;
планирование рабочих встреч и событий;
оповещение других участников о событиях/встречах.
"Рис. 3. Главная страница РПО ""Корпоративный портал"""
"Информатика и управление в технических и социальных системах 13
На главной странице модуля календарь пользователь может выбрать для
отображения"
следующие фильтры:
личные;
дни рождения;
рабочие.
Изображение страницы модуля календаря приведено на рис. 2.
"Рис. 4. Страница модуля календаря РПО ""Корпоративный портал"""
Записи личного календаря доступны только владельцу календаря по умолчанию.
"Данный тип создан для личных отметок, событий, напоминаний пользователя. Можно
также добавить участников к событию. Тогда это событие будет видно всем
участникам."
"Записи дней рождений доступны всем пользователя ВПИУК и обновляются
автоматически. Записи рабочего календаря содержат события/встречи, отражающие
процесс выполнения проектов. Данные записи состоят из встреч/событий проектов, в
которых пользователь является руководителем или исполнителем. Руководители
проектов могут вносить коррективы в календарные записи или создавать
дополнительные. После этого данные рабочего"
календаря всех участников проектов автоматически обновляются.
"Модуль календарь имеет следующие виды отображения информации:
день;"
месяц;
год.
"Модуль адресной книги построен на основе справочника сотрудников предприятия,
сгруппированных по подразделениям. Содержит так же функцию поиска по заданным
критериям. Также данный модуль предоставляет возможность просмотра контактов."
При этом
"профиль сотрудника может содержать следующие поля:
фамилия;"
имя;
отчество;
дата рождения;
предприятие, подразделение;
должность;
"14 Труды НГТУ им. Р.Е. Алексеева № 4(115)
рабочий телефон;"
мобильный телефон;
адрес электронной почты.
Изображение страницы модуля адресной книги приведено на рис. 5.
"Рис. 5. Страница модуля адресной книги РПО ""Корпоративный портал""
Модуль сообщений служит для обмена моментальными сообщениями между
сотрудниками. При получении нового сообщения приходит соответствующее
уведомление. Есть"
возможность настройки списка контактов.
"Рис. 6. Страница модуля документов РПО ""Корпоративный портал"""
Информатика и управление в технических и социальных системах 15
"Модуль документов построен на основе двух структур: структуры описывающей
документ и его версии и структуры, описывающей права доступа пользователей по
отношению"
"к документу. Данный модуль обеспечивает создание и доступ к документам
пользователя. В"
"качестве документа может выступать файл любого типа. Каждое изменение документа
приводит к увеличению версии документа (файла)."
Изображение страницы модуля документов приведено на рис. 6.
"Модуль новостей построен на основе списка новостных статей. Новостная лента
может отображаться в режиме потока новостей, новостей по соответствующим тегам,
а также в"
"режиме Архив. Пользователь может создавать собственный пост, перейдя по ссылке
«Добавить новость». В данном модуле также предусмотрен поиск."
"Модуль базы знаний содержит справочные материалы и нормативные документы. В
нем предусмотрены каталоги, включающие в себя информационные статьи."
Существует
возможность добавлять каталоги и статьи.
"Модуль корпоративного поиска РПО ВПИУК позволяет осуществлять поиск
информации по базам данных по заданным критериям, заданным в специальной
поисковой строке."
"Результатом поиска является список контактов/документов, содержащий их названия
и краткие аннотации, а также ссылки на страницы с полным описанием
контакта/документа."
"Модуль управления проектами позволяет пользователям совместно работать над
документами, осуществлять планирование рабочих процессов, отслеживать ход
работы над проектами."
Изображение страницы модуля управления проектами приведено на рис. 7.
"Рис. 7. Страница модуля управления проектами РПО ""Корпоративный портал""
Модуль администрирования является базовым для настройки и администрирования
данной информационной системы. В нем определяются права доступа пользователей
и уровни конфиденциальности документов. В данном модуле возможны настройка
приоритетов"
"каждого сотрудника, редактирование профилей пользователей, выставление
соответствующих прав доступа к различным модулям и каналам связи."
Выводы
"В настоящее время пренебрегать безопасностью информации, проходящей через
программные платформы, неразумно. Бесспорно, полной безопасности в
информационных системах достичь невозможно, однако применяя, а также
рационально используя различные"
"программные платформы, соответствующие сертификатам информационной
безопасности"
можно существенно снизить вероятность реализации угрозы.
16 Труды НГТУ им. Р.Е. Алексеева № 4(115)
"По результатам анализа серверных ОС, клиентских программных платформ, а также
СУБД была проведена сегментация поля использования данных информационных
продуктов, а также оценена их степень безопасности и защиты информационных
данных."
"Было разработано рабочее программное обеспечение РПО ""Корпоративный портал"", а
также были проведены комплексные полигонные испытания данной информационной
системы. В результате проведенной сертификации Федеральной службой по
техническому и"
"экспортному контролю было установлено полное соответствие РПО ""Корпоративный
портал"", мерам информационной безопасности, предъявляемым к
автоматизированным информационным системам класса 1Б."
Обновление языка программирования JavaScript (es5) - ECMAScript 2015 (ES6)
"Каждый программист знаком с языком программирования JavaScript. В настоящее
время он используется во всех браузерах и активно поддерживается и развивается. В
2015"
СОВРЕМЕННЫЕ ИННОВАЦИИ № 12(14) 2016 █ 46 █
"году был утвержден новый стандарт языка ES6, который стал огромным шагом
вперед."
"Спецификация ES6 состоит порядка из 600 страниц когда, как предыдущая часть
состоит"
"из 245 страниц [1]. Несмотря на то, что это очень крупный проект, ES6 обладает
полной"
"обратной совместимостью, то есть разработчикам доступен старый функционал
языка. В"
"обновлении добавили многие необходимые JavaScript - разработчикам элементы,
которые"
мы сейчас рассмотрим.
let и scope - переменные с блочной областью видимости
"В старой версии ES5 все переменные были доступны из любой точки кода, например:
For (var i=0; i<10; i++){ } console.log(i);"
"В большинстве языков этот код выведет ошибку, что i неизвестен, но в ES5 в консоль
выведется число «10». Причина в том, что в ES5 используется hoisting — то есть
декларации"
"всех используемых переменных переносятся в начало функции, что дает некоторые
проблемы с"
"названиями переменных. В новой спецификации присутствуют переменные let и scope,
которые доступны только внутри блока."
Функции
"Если в старой версии функции описывались так:
function (some, variable) { };"
то в версии ES6 функции описываются так:
(some, variable) => {};
"Такой подход позволяет писать не такие громоздкие коды как в старой версии и
улучшает"
читабельность написанной программы.
Классы
"В ES5 отсутствуют классы, но их можно было сымитировать:
function Vehicle(topSpeed){"
this.topSpeed = topSpeed;
this.printTopSpeed = function(){
console. Log ('Top speed:'+this.topSpeed+' km/h'); }}
"В новой спецификации появились настоящие классы. В классах возможно
дефинировать"
"статические методы. Стоит отметить, что тело класса всегда интерпретируется в strict 
mode."
class Vehicle {
"constructor(topSpeed) { this.topSpeed = topSpeed; }
printTopSpeed(){ console.log('Top speed:'+this.topSpeed+' km/h') }}"
Присвоение значений
"Появилась возможность обменивать значения без временной переменной, что
сокращает код."
function getNumbers(){ return [2,3,5]; }
var [firstPrime, secondPrime, thirdPrime] = getFirstPrimeNumbers();
"На данный момент только начинается внедрение ES6 в браузеры. Но многие
программисты"
"уже разрабатывают серьезные проекты на нем. Были созданы разные библиотеки,
которые"
компилируют ES6 на ES5, такие, как Babel или WebPack.
"Развитие языка JavaScript было медленным. Но в последнее время наблюдается
резкий рост"
интереса к языку и его развитие как серьезный язык программирования.
СРАВНИТЕЛЬНЫЙ АНАЛИЗ JAVASCRIPT- ФРЕЙМВОРКОВ
"В условиях быстроразвивающихся технологий одной из важных целей
при создании программного обеспечения является уменьшение трудозатрат
на его разработку. Достичь этой цели помогают так называемые паттерны -
(англ. design pattern) — повторимая архитектурная конструкция,
представляющая собой решение проблемы проектирования в рамках
некоторого часто возникающего контекста. (@Cydoor, 2014)"
"Фундаментальным паттерном, который нашел применение во многих
технологиях, является MVC (Model-View-Controller). Именно он дал
развитие новым технологиям и существенно облегчает жизнь
разработчикам."
"JavaScript framework – это библиотека классов или набор готовых
утилит и функций, которые реализуют основную функциональность
подобных интерактивных сайтов, при этом обеспечивают кросс-браузерную
совместимость этих решений на всех уровнях работы JavaScript."
"Фреймворки пишутся сообществом разработчиков и распространяются как
правило бесплатно, поэтому любой желающий веб-разработчик может
подключить все эти возможности к своему сайту уже в готовом виде, вместо
того, чтобы создавать и тестировать их самостоятельно."
"Общие направления развития и функциональность для всех JSфреймворков:
Работа с селекторами"
Сквозной проход и поиск в DOM
Другие манипуляции с DOM
Различные вспомогательные функции
Обработчики событий и их создание
"Ajax (в том числе работа с XML, JSON, HTML, callback-функции)
Самые популярные JS-фреймворки отобраны по 4 критериям:
1. Распространенность и популярность"
"""Теория и практика современной науки"" №4(22) 2017 646"
2. Качественность сопутствующей документации
3. Показатель производительности
4. Легкость освоения, логичность и простота интеграции
Общая доля использования js-фреймворков в мире показана на рисунке 1.
Рисунок 1 Общая доля использования фреймворков
"Как видно из статистики сайтов, которые используют JavaScript,
лидирующие позиции в мире занимают следующие фреймворки:
jQuery"
Prototype JS
Mootools
Yahoo! UI Library (YUI)
Ext JS
Dojo Toolkit
"Как видно из графика, 1 место занимает jQuery. Далее подробно
рассматриваются фреймворки. На рисунке 2 представлены статистические"
показатели фрейморков по вышеуказанным критериям.
Рисунок 2 Статистические показатели фрейморков
42%
14% 4%
7%
8%
6%
3% 1%
3%
jQuery
Prototype JS
Mootools
Yahoo! UI Library
(YUI)
Ext JS
"""Теория и практика современной науки"" №4(22) 2017 647"
"1. jQuery – помогает создавать простые приложения и веб-сайты. Легко
обрабатывает события, взаимодействует с удаленными сервисами, имеет
огромный набор плагинов. Библиотека jQuery содержит функциональность,
полезную для максимально широкого круга задач. Примеры известных
сайтов на базе этого фреймворка: Digg, BBC, Dell, IsoHunt, Break.com,
TinyPic, eMusic, Box.net, Яндекс Карты"
2. Prototype JS - фреймворк очень удобен для средних проектов.
"Производительность бывает нестабильна. Является одним из Prototype
немногих фреймворков, который не включает в себя UI-компоненты или
UX-улучшения, — для использования подобных эффектов рекомендуется
использовать его дочернюю библиотеку — script.aculo.us (или Scripty2),
которая добавляет огромное количество графических эффектов, поддержку
drag-and-drop, слайдеры. Примеры известных сайтов на базе этого
фреймворка: CNN, The New York Times, Apple, Fox News Channel, Last.fm,
Twitter, Hakia."
3. MooTools - модульный, объектно-ориентированный фреймворк.
"Очень похож в своем подходе к дизайну ядра на jQuery и Prototype тем, что
не включает в себя UI-контролы и виджеты, ограничивается минимальным
набором эффектов и возможностей. Примеры известных сайтов на базе этого
фреймворка: MooTools используется в CMS Joomla, поэтому таких сайтов
много."
"4. Yahoo! UI Library (YUI) – это набор утилит и контролов,
написанных на JavaScript и CSS, для создания интерактивных webприложений,
использующих техники DOM-скриптинга, DHTML и Ajax. В"
этом фреймворке доступны два типа компонентов: утилиты и контролы.
"Утилиты упрощают браузерную разработку, связанную с DOM, DHTML и
Ajax. Контролы – это набор уже готовых, высоко-интерактивных визуальных
элементов для проектирования веб-страниц. Все эти элементы создаются и
работают только на клиентской стороне и не требуют обновление страницы
для их изменения. Примеры известных сайтов на базе этого
фреймворка:Yahoo!, LinkedIn."
5. Ext JS - не самый производительный из существующих
"фреймворков, его главная отличительная черта в том, что он предоставляет
собой наиболее приближенную среду к классическому программированию,
реализуя очень развитые графические средства отображения и
взаимодействия с пользователем в среде Web 2.0. У этого фреймворка
действительно большие графические возможности."
"6. Dojo Toolkit - кроме того, что во многом повторяет плюсы своих
аналогов, имеет и свои особенности. Среди самых важных - серьёзная"
попытка добиться полной независимости от каждого конкретного jsинтерпретатора.
Сфера применения этого фреймворка максимально широка:
"это не только обычные решения на стороне клиента, но также и на стороне
сервера. Примеры известных сайтов на базе этого фреймворка: Dogo Toolkit
""Теория и практика современной науки"" №4(22) 2017 648"
"активно используется в знаменитом расширении PHP — Zend Framework,
поэтому таких сайтов очень много"
Разработка прогрессивного веб-приложения с помощью технологии PWA
"Сегодня каждый крупный интернет-сервис имеет свой собственный вебсайт и
разрабатывает приложения под различные операционные системы. При
этом разработчики этих сервисов обязаны обеспечить работу своих
приложений на различных устройствах, которыми пользуются их постоянные
или потенциальные клиенты. Но для того, чтобы это осуществить,
необходимы разработчики широкого профиля: разработчики веб-сайта,
разработчики приложений под различные операционные системы (Android,
IOS, и др.). Отсюда возникает проблема: где найти таких разработчиков? И
что делать небольшим компаниям, которые не могут себе позволить
разработать свое приложение для различных устройств. Технология PWA
помогает решить эту проблему [1]."
"Прогрессивное веб-приложение (Progressive Web Application, PWA) —
это технология веб-разработки, которая визуально и функционально
трансформирует сайт в приложение для различных устройств."
"В настоящее время несмотря на то, что технология PWA позволяет
существенно облегчить разработку в сфере веб-приложений, немного
разработчиков готовы использовать данную технологию в своих проектах."
"Цель данной работы – краткое описание технологии PWA, анализ
преимуществ и недостатков технологии."
Описание технологии PWA
"Технология PWA создана в корпорации Apple в 2007 году и изначально
была доступна в браузере Safari для операционных систем macOS и iOS."
"Однако, технология не впечатлила разработчиков и вскоре была забыта. Но в
марте 2018 года произошли существенные изменения в области реализации
веб-стандартов. В обновлённой операционной системе iOS корпорация Apple
добавила поддержку технологии Service Worker в мобильную версию браузера
Safar,i и после этого все остальные компании-разработчики софта в области
веб-технологии начали активно внедрять технологию PWA в свои платформы."
"Прогрессивное веб-приложение — это веб-страница, которую можно
установить на домашний экран смартфона или же на рабочий стол"
"компьютера, и в дальнейшим это приложение будет функционировать как
нативное. (Нативное приложение – это прикладная программа, которая
разработана для использования на специфической платформе или устройстве.)
Процесс установки веб-приложения возможен благодаря загрузке
информации в кэш и поддержке технологии Service Worker."
622
"Научно-образовательный журнал для студентов и преподавателей «StudNet» №8/2020
Технология Service Worker [2] представляет собой скрипт, который
запускается в браузере в фоновом режиме. Ключевой особенностью
технологии Service Worker является, то, что этот скрипт может перехватывать
и модифицировать запросы навигации и ресурсов, гибко кэшировать ресурсы
для обеспечения полного контроля над поведением приложения в
определенных ситуациях (например, когда сеть не доступна). Перечислим
основные функции технологии Service Worker:
ответ на запросы от других источников;"
фоновая синхронизация данных;
"получение централизованного обновления для данных,
использующих тяжелые вычисления;"
"компиляция и управление зависимостями на клиентской стороне;
улучшение производительности с помощью предварительной
загрузки ресурсов."
"Прогрессивность веб-приложения – это способность приложения
работать на любых платформах и при любых условиях. Прогрессивное
вебприложение должен обладать следующими качествами:
возможность использовать его на любом устройстве, независимо от
размера экрана и других спецификаций;"
"возможность быть установленным по запросу браузера на домашнем
экране, если приложение соответствует критериям технологии PWA;
быстрая установка, так как все компоненты, которые требует загрузки,
уже загружены в кэш;"
"моментальное обновление, не требующее длительной загрузки;
работоспособность, независимо от наличия подключения к сети."
Преимущества технологии PWA
"1. Прогрессивное веб-приложение обладает свойствами нативного приложения
и, в то же время, позволяет использовать функционал браузера, что
обеспечивает ему дополнительные возможности."
"2. Одним из преимуществ технологии PWA является автономность ее
приложений. Приложение кэшируется в памяти браузера и таким образом
сохраняет работоспособность в автономном режиме."
"3. PWA-технология обладает кроссплатформенностью. Разработанные с
применением этой технологии приложения можно устанавливать на любые
устройства независимо от платформы и операционной системы. Это является
большим преимуществом по сравнению с д нативными приложениями [3]."
623
"Научно-образовательный журнал для студентов и преподавателей «StudNet» №8/2020
4. Кроме того, прогрессивные приложения отличаются от нативных большей
производительностью. Например, чтобы использовать прогрессивное
приложение Twitter, нет необходимости заходить в магазин приложений Play"
"Store или App Store. Для этого достаточно посетить официальный сайт
разработчика. Когда обновляется приложение, пользователю не нужно
устанавливать обновления, так как все новые функции и исправления
доступны автоматически. Как показывает статистика, компании,
выпускающие прогрессивные веб-приложения, получают меньше запросов в
службу техподдержки от пользователей, так как им не приходится"
"использовать старые версии приложений. Как следствие, компанииразработчики могут
выпускать обновления так часто, как они могут себе
позволить, при этом не раздражая пользователей постоянными
предложениями обновления."
"5. Клиентская часть разработки отделена от серверной части. Благодаря этому
тратится меньше ресурсов и времени на разработку и доработку дизайна [4]."
"6. Главным преимуществом прогрессивного веб-приложения по сравнению с
традиционным является объем, занимаемый им в памяти устройства. В
качестве примера приведем известный факт: сеть Starbucks разработала
прогрессивное веб-приложение как дополнение к своему обычному
мобильному приложению. При одинаковом интерфейсе объем, занимаемый
прогрессивным приложением, оказался меньше на 99,84%. Результатом этого
стало удвоенное количества запросов через мобильный интернет."
"7. С начала 2019 года появилось возможность добавлять прогрессивные
вебприложения в онлайн-магазины мобильных приложений App Store и Google
Play. Это позволяет пользователям скачать приложение из привычного
источника."
Недостатки технологии PWA
"Технология PWA, как и любая технология, не универсальна и имеет ряд
недостатков."
"1. Одним из недостатков является то, что не все операционные системы
поддерживает полный функционал прогрессивного веб-приложения. Это
следствие того, что технология PWA, хоть и поддерживается наиболее
популярными операционными системами, однако внедрена еще не во все
платформы [5]."
"2. Невозможно наладить использование технологии в старых операционных
системах. Технологии PWA не так много лет, поэтому неудивительно, что на
устаревших устройствах она не может полноценно поддерживаться. Несмотря
624"
"Научно-образовательный журнал для студентов и преподавателей «StudNet» №8/2020
на то, что проблема несомненно решится в будущем, на данный момент это
может стать причиной жалоб клиентов."
"3. По сравнению с нативными приложениями, прогрессивные веб-приложения
не могут делать все, что могут обычные приложения. Сегодня по-прежнему
отсутствует доступ к таким важным функциям устройства, как беспроводная
технология Bluetooth, внешнее освещение, датчики приближения,
возможность управления расширенными элементами камеры и другие. Так как
технология PWA написана на языке программирования JavaScript, расход
заряда батареи увеличивается в отличии от приложений, написанных на тех
языках программирования, на которых написаны ОС."
"4. Работа офлайн так же ограничена, потому что любое прогрессивное вебприложении
в первую очередь ориентирована на работу с доступом к"
"интернету. Но этот недостаток не является серьезным, так как на сегодняшний
день большинство устройств имеют постоянное подключение к сети интернет."
Вывод
"Несомненно, технология PWA обладает огромным потенциалом. Однако,
на данный момент технология не очень популярна из-за наличия небольших,
но существенных недостатков. Несмотря на это, разработка прогрессивных
веб-приложений является самым быстрым и при этом качественным способом
создания приложения одновременно для многих устройств."
"ПРОГРЕССИВНЫЕ ВЕБ-ПРИЛОЖЕНИЯ: ОБЗОР СОВРЕМЕННЫХ МЕТОДОВ,
ИНСТРУМЕНТОВ И ПРАКТИК"
"В последние годы прогрессивные веб-приложения становятся все более
популярными среди разработчиков и пользователей. Согласно данным Google
Trends, интерес к PWA начал расти с 2015 года и продолжает возрастать до
настоящего времени (см. рис. 1). Это свидетельствует о том, что PWA становятся
все более востребованными и выгодными для использования как в бизнесе, так
и в личных целях [1]."
"Прогрессивные веб-приложения предоставляют множество преимуществ
перед традиционными веб-приложениями, такими как более быстрая загрузка,
более плавный пользовательский интерфейс и возможность работы в офлайнрежиме."
"Эти преимущества делают PWA более удобными и привлекательными
для пользователей, а также способствуют увеличению уровня
удовлетворенности пользователя от использования приложения [2, 3]."
В свою очередь, разработчики также получают выгоды от создания PWA.
"Эти приложения имеют низкие затраты на разработку и поддержку, поскольку
они используют веб-технологии и не требуют дополнительных инструментов
для установки и обновления на устройстве. Кроме того, PWA могут улучшить
конверсию и удержание пользователей, что также приводит к увеличению
прибыли и росту бизнеса."
"В данной статье будет проанализирован ряд практических примеров и
советов, основанных на современных методах и инструментах, которые помогут
разработчикам создавать эффективные и привлекательные прогрессивные
вебприложения. Будут рассмотрены примеры, демонстрирующие использование
Service workers, Web App Manifest, кэширования, проверки подключения и
уведомлений, а также подробно рассмотрены инструменты для создания PWA,
такие как Angular, React и Vue.js. Анализ практических примеров и советов"
"позволит разработчикам создавать PWA, которые обеспечивают высокую
производительность, быструю загрузку и работу в офлайн-режиме, что является
важным фактором для удовлетворения потребностей пользователей."
"Рисунок 1 - Иллюстрация роста популярности PWA с течением времени
Figure 1 - Illustration of the growing popularity of PWA over time"
Методы создания прогрессивных веб-приложений
"Для создания прогрессивных веб-приложений используются различные
методы и технологии."
1. Service Workers. Service Workers являются одним из ключевых
"компонентов прогрессивных веб-приложений (PWA). Это скрипты, которые
выполняются в фоновом режиме, обеспечивая уникальный функционал, такой
как обработка сетевых запросов, кэширование данных и отправка уведомлений."
"Важно отметить, что Service Workers могут работать независимо от основного
потока JavaScript и могут выполняться даже после закрытия приложения."
"Service Workers позволяют создавать приложения, которые могут
работать в офлайн-режиме, что особенно полезно в условиях нестабильного
интернет-соединения или полного отсутствия интернета. С помощью Service
Workers можно кэшировать данные и ресурсы при первом запуске приложения и
использовать их в дальнейшем в офлайн-режиме, что улучшает
производительность и быстродействие приложения."
Service Workers позволяют обрабатывать сетевые запросы и отвечать на
"них, не зависимо от того, доступен ли интернет или нет. Это особенно важно для
приложений, которые работают с большим объемом данных или"
"взаимодействуют с удаленными серверами, так как Service Workers могут
выполнять эти задачи в фоновом режиме, не замедляя основной поток
выполнения приложения."
"Кроме того, Service Workers могут отправлять уведомления
пользователю, даже если приложение закрыто или неактивно. Это особенно
полезно для мгновенных уведомлений, таких как новые сообщения в чате или
уведомления о событиях, которые могут быть интересны пользователю."
"В целом, Service Workers - это мощный инструмент для создания
производительных и функциональных прогрессивных веб-приложений, которые
могут работать в различных условиях сетевой доступности. Они являются одним
из ключевых элементов PWA, которые позволяют создавать веб-приложения, не
уступающие в функциональности нативным приложениям [5]."
Пример регистрации Service worker (см. рис. 2):
"В PWA возможно использование оповещений, которые могут уведомлять
пользователя о различных событиях в приложении. Для этого необходимо
зарегистрировать Service worker и запросить у пользователя разрешение на
отправку уведомлений."
"Регистрация Service worker начинается с создания JavaScript-файла с
необходимой логикой. В данном случае, Service worker будет использоваться для
обработки оповещений. После создания файла, необходимо зарегистрировать
его в основном файле приложения с помощью следующего кода:"
Рисунок 2 - Пример регистрации Service worker
Figure 2 - Example of service worker registration
"Данный код проверяет, поддерживает ли браузер использование Service
workers, и, если да, регистрирует указанный файл."
"После регистрации Service worker, необходимо запросить у пользователя
разрешение на отправку оповещений. Это можно сделать с помощью
следующего кода (см. рис. 3):"
Рисунок 3 - Разрешение на отправку оповещений
Figure 3 - Permission to send alerts
"Данный код проверяет, поддерживает ли браузер использование
оповещений, и, если да, запрашивает разрешение на отправку. После получения"
разрешения, можно отправлять оповещения с помощью следующего кода (см.
рис. 4):
Рисунок 4 - Отправка оповещения
Figure 4 - Sending an alert
"Данный код проверяет, поддерживает ли браузер использование Service
workers и оповещений, и, если да, отправляет оповещение с заданным
заголовком, текстом и иконкой."
"Таким образом, для использования оповещений в PWA необходимо
зарегистрировать Service worker и запросить у пользователя разрешение на
отправку оповещений. После получения разрешения, можно отправлять
оповещения с помощью соответствующего кода."
"Пример обработки сетевых запросов с использованием Service worker
(см. рис. 5):"
"Service worker могут использоваться для кеширования ресурсов и
обработки сетевых запросов, что позволяет улучшить производительность и
обеспечить доступность приложения в оффлайн-режиме. Вот пример кода,
который демонстрирует, как кешировать и отдавать ресурсы с помощью Service
worker:"
"Рисунок 5 - Обработка сетевых запросов с использованием Service worker
Figure 5 - Processing network requests using a service worker"
"Этот код регистрирует обработчик события fetch для Service worker,
который перехватывает все сетевые запросы, обрабатывая их с помощью кеша."
"Если ресурс был найден в кеше, он возвращается непосредственно из кеша, а
если его нет, происходит отправка сетевого запроса и сохранение его результата
в кеше. Кеш имеет имя cache-v1, и новые ресурсы добавляются в него с помощью
метода cache.put()."
"2. Web App Manifest. Web App Manifest - это JSON-файл, который
содержит метаданные о PWA, такие как название, иконки, цвет темы и другие
параметры, которые помогают браузеру понять, как отображать приложение на
устройстве."
Пример манифеста (см. рис. 6):
Рисунок 6 – Пример манифеста
Figure 6 – Sample manifest
"Этот пример манифеста определяет название приложения, его короткое
название, иконки для различных размеров экрана, начальный URL для запуска
приложения, цвет фона, цвет темы, а также указывает, что приложение должно
быть запущено в режиме ""standalone"" (отдельностоящее приложение, не
интегрирующееся с браузером). Все эти параметры помогают браузеру
корректно отображать приложение на устройстве и создать максимально
приятный пользовательский опыт."
3. Responsive Web Design (адаптивный дизайн). Адаптивный дизайн
"- это метод дизайна веб-сайтов, который позволяет сайту адаптироваться под
различные экраны устройств. Для создания PWA необходимо использовать"
адаптивный дизайн, чтобы приложение выглядело хорошо на разных
устройствах [4].
"Пример CSS-кода, который демонстрирует, как создать адаптивный
дизайн для PWA (см. рис. 7):"
Рисунок 7 - Настройка стилей для разных экранов устройств
Figure 7 - Setting styles for different device screens
"Этот пример демонстрирует, как с помощью медиа-запросов и CSS
свойств можно настроить стили для разных экранов устройств. Например, для
мобильных устройств можно изменить ширину блоков и скрыть некоторые"
"элементы, а для планшетов - изменить размер шрифта. Все это позволяет создать
адаптивный дизайн для PWA, который будет хорошо выглядеть на любом
устройстве."
Инструменты создания PWA
Для создания PWA используются следующие инструменты:
"1. Angular. Angular - это один из самых популярных фреймворков для
создания веб-приложений, который был разработан командой Google. Он
основан на языке TypeScript и предоставляет разработчикам множество
инструментов и функций для создания высококачественных приложений."
"Для создания PWA с помощью Angular, разработчики могут использовать
его компонентную архитектуру, которая позволяет создавать многоразовые
компоненты для различных частей приложения. Angular также предоставляет
сервисы для обмена данными между компонентами, которые могут
использоваться для обработки сетевых запросов и кэширования данных."
"Кроме того, Angular предоставляет маршрутизацию, которая позволяет
разработчикам создавать множество страниц и переходить между ними без
перезагрузки страницы. Это улучшает пользовательский опыт и повышает
производительность приложения."
Для создания Service workers в Angular можно использовать Angular
"Service Worker, который предоставляет возможности для кэширования ресурсов
и обработки сетевых запросов в фоновом режиме. Кроме того, Angular
предоставляет инструменты для создания Web App Manifest, таких как Angular
PWA Toolkit, которые помогают определить метаданные приложения и
обеспечить его отображение на устройствах."
"В целом, Angular - это мощный фреймворк для создания PWA, который
предоставляет множество инструментов и функций для разработчиков.React:
React - это JavaScript-библиотека для создания пользовательских интерфейсов."
"Он также может использоваться для создания PWA. React предоставляет
множество компонентов, которые могут использоваться для создания"
"пользовательского интерфейса, а также инструменты для создания Service
workers и Web App Manifest."
"2. React. React - это JavaScript-библиотека для создания
пользовательских интерфейсов. Она позволяет создавать эффективные и
привлекательные веб-приложения, в том числе и прогрессивные веб-приложения
(PWA). React предоставляет компонентный подход к разработке вебприложений,
который обеспечивает гибкость и масштабируемость приложений."
"React также предоставляет инструменты для создания PWA, такие как
Service workers и Web App Manifest. Service workers - это JavaScript-файлы,"
"которые выполняются отдельно от основного потока браузера и могут выполнять
задачи, такие как кэширование и обновление контента. Web App Manifest - это
файл JSON, который содержит метаданные о приложении, такие как иконки,
название и описание, и позволяет добавлять приложение на домашний экран
устройства."
React имеет большое сообщество разработчиков, которые создают
"множество библиотек и инструментов для упрощения разработки вебприложений, в
том числе и PWA. Библиотеки, такие как React Router и Redux,
обеспечивают гибкость и удобство в работе с маршрутизацией и управлением
состоянием приложения."
"В целом, React представляет собой мощный инструмент для создания
PWA, который обеспечивает гибкость, масштабируемость и эффективность в
разработке веб-приложений."
"3. Vue.js. Vue.js - это прогрессивный JavaScript-фреймворк, который
используется для создания пользовательских интерфейсов веб-приложений. Он
имеет модульную структуру и легко интегрируется с другими библиотеками и
фреймворками. Vue.js также может использоваться для создания PWA."
"Vue.js предоставляет компоненты и директивы для создания
интерактивных пользовательских интерфейсов, а также инструменты для
создания Service workers и Web App Manifest. Компоненты в Vue.js представляют"
"собой отдельные части пользовательского интерфейса, которые можно
переиспользовать и комбинировать друг с другом. Директивы в Vue.js позволяют
добавлять дополнительную функциональность к элементам пользовательского
интерфейса, например, для обработки событий или изменения стилей."
"Для создания PWA в Vue.js необходимо использовать инструменты, такие
как Vue CLI, которые позволяют настроить проект для работы в офлайн-режиме
и добавить Web App Manifest. Кроме того, Vue.js предоставляет встроенную
поддержку для создания Service workers с помощью плагина @vue/cli-pluginpwa, 
который позволяет быстро настроить Service worker и кэширование
ресурсов [6]."
Практики для создания эффективных PWA
"Для создания эффективных PWA используются следующие
практики:"
"1. Проверка подключения. Проверка подключения - это метод,
который используется для определения, есть ли подключение к Интернету. Это
помогает приложению переключаться на офлайн-режим, когда нет подключения
к Интернету."
"2. Кэширование. Кэширование - это метод, который используется для
хранения данных локально на устройстве пользователя. Это позволяет
приложению работать быстрее и более эффективно в офлайн-режиме."
"3. Уведомления. Уведомления - это метод, который используется для
отправки уведомлений пользователю. Это позволяет приложению сообщать о
новых событиях или обновлениях, даже если приложение не запущено."
Мобильные UI библиотеки и фреймворки для разработки PWA
"При разработке прогрессивных веб-приложений (PWA),
пользовательский интерфейс (UI) играет важную роль, так как он влияет на
восприятие и опыт пользователей. Для создания качественного и удобного"
пользовательского интерфейса важно выбрать подходящий инструментарий.
"Один из таких инструментов - мобильные UI библиотеки и фреймворки,
предназначенные для разработки PWA [8]."
"Одним из наиболее популярных фреймворков для разработки гибридных
мобильных приложений, веб-приложений и PWA с нативным внешним видом и
ощущением является Framework7. Он предоставляет широкий набор готовых
компонентов и инструментов для создания современных и функциональных
приложений."
Framework7 обладает рядом преимуществ, которые включают:
1. Нативный внешний вид, который обеспечивает создание
"приложений, которые выглядят и ведут себя как нативные приложения на iOS и
Android, что обеспечивает высокое качество пользовательского опыта;
2. Большой набор готовых компонентов, таких как навигационные
панели, списки, карточки, модальные окна и многое другое, что ускоряет
процесс разработки и упрощает создание сложных интерфейсов;
3. Простой и понятный синтаксис, что делает его доступным для
разработчиков с разным уровнем опыта;"
"4. Гибкую архитектуру, которая поддерживает модульную структуру и
позволяет разработчикам легко добавлять и изменять функциональность
приложения;"
"5. Возможность интеграции с другими технологиями, такими как
Vue.js, React и Svelte, что обеспечивает гибкость и упрощает разработку;
6. Встроенную поддержку PWA, которая позволяет разработчикам
создавать высокопроизводительные и оффлайн-доступные приложения без
дополнительных усилий;"
"7. Большое и активное сообщество разработчиков, которое может
помочь в решении проблем и предоставить поддержку при использовании
фреймворка;"
"8. Регулярные обновления и поддержку, которые обеспечивают
стабильность, исправление ошибок и добавление новых функций;"
"9. Бесплатный и открытый исходный код, что позволяет разработчикам
использовать фреймворк без ограничений и настроить его под свои нужды."
"Однако, следует помнить, что Framework7 имеет свои ограничения и не
подходит для всех типов проектов. Например, он не поддерживает разработку
приложений для Windows и MacOS, а также может быть более сложным для
начинающих разработчиков, которые не имеют опыта в работе с JavaScript и
CSS."
Кроме Framework7, существует множество других мобильных UI
"библиотек и фреймворков, таких как React Native, Ionic, NativeScript, Onsen UI и
другие, которые также могут быть использованы для разработки PWA с
нативным внешним видом и ощущением. При выборе инструментария для
разработки PWA необходимо учитывать особенности проекта, требования к
пользовательскому интерфейсу, опыт разработчиков и другие факторы."
"Сравнительный анализ методов разработки, инструментов и
практик для создания PWA"
В данном контексте, был проведен сравнительный анализ методов
"разработки PWA, инструментов для создания и практик, которые необходимо
применять для создания эффективных PWA. Для этого были составлены три
таблицы, содержащие информацию о методах разработки, инструментах и
практиках, используемых в создании PWA. Таблицы помогут разработчикам
выбрать наиболее подходящие методы и инструменты для создания
высококачественных PWA и следовать эффективным практикам."
Таблица 1 - Сравнительный анализ методов разработки PWA
Table 1 - Comparative analysis of PWA development methods
Метод Описание
Service Workers
Скрипты, выполняющиеся в
фоновом режиме и позволяющие
работать в офлайн-режиме
Web App Manifest
JSON-файл, содержащий
метаданные PWA, такие как
название, иконки и цвет темы
Responsive Web Design
Адаптивный дизайн, позволяющий
приложению выглядеть хорошо на
разных устройствах
"Таблица 1 представляет собой сравнительный анализ трех методов
разработки PWA - Service Workers, Web App Manifest и Responsive Web Design."
"Рассмотрим каждый из методов более детально и проанализируем их
преимущества и недостатки."
"Service Workers - это мощный инструмент для создания PWA, который
позволяет приложению функционировать в офлайн-режиме. Он используется
для кэширования данных, оптимизации производительности и предотвращения
повторной загрузки страниц. Service Workers позволяют создавать
функциональные приложения, которые могут работать в любых условиях, даже
если у пользователя нет доступа к Интернету. Однако, использование Service
Workers требует определенных знаний и навыков, и может быть сложным для
начинающих разработчиков."
"Web App Manifest - это еще один важный метод разработки PWA,
который используется для создания метаданных PWA. Web App Manifest
позволяет определить основные параметры приложения, такие как иконки, цвет
темы и название, и предоставляет единый стиль для всех платформ. Он также"
"позволяет создавать мобильные и десктопные ярлыки для быстрого запуска
PWA. Однако, Web App Manifest не является самодостаточным методом
разработки PWA и должен использоваться в сочетании с другими методами."
"Responsive Web Design - это метод разработки PWA, который позволяет
приложению выглядеть хорошо на разных устройствах. Responsive Web Design
основывается на использовании гибкой сетки и медиа-запросов, которые
адаптируют макет и размеры элементов интерфейса под размер экрана. Он
позволяет создавать приложения, которые выглядят хорошо на всех устройствах,
независимо от их разрешения и размера. Однако, Responsive Web Design может"
"быть сложным для реализации, особенно для сложных приложений с большим
количеством элементов интерфейса."
"Таблица 2 - Сравнительный анализ инструментов для разработки PWA
Table 2 - Comparative analysis of PWA development tools"
Инструмент Описание
Angular
JavaScript-фреймворк для создания
веб-приложений
React
JavaScript-библиотека для создания
пользовательских интерфейсов
Vue.js
JavaScript-фреймворк для создания
пользовательских интерфейсов
Таблица 2 представляет сравнительный анализ трех наиболее
"популярных JavaScript-фреймворков и библиотек для разработки PWA: Angular,
React и Vue.js. Каждый из этих инструментов имеет свои преимущества и
недостатки в зависимости от задачи, которую необходимо решить."
"Angular является полноценным фреймворком, который предоставляет все
необходимые инструменты для создания сложных веб-приложений. Он
обеспечивает высокую производительность благодаря использованию"
"TypeScript и Ahead-of-Time компиляции. Однако, из-за своей сложности, Angular
может потребовать больше времени на изучение и настройку, особенно для
новых разработчиков."
"React является библиотекой для создания пользовательских интерфейсов,
которая позволяет разрабатывать быстрые и эффективные приложения. React
использует виртуальный DOM, что обеспечивает более быстрое обновление
интерфейса, а также удобство в разработке и переиспользовании компонентов."
"Однако, для создания полноценного приложения в React могут потребоваться
дополнительные инструменты и библиотеки."
"Vue.js является легковесным и гибким фреймворком для создания
пользовательских интерфейсов. Он имеет меньшую обучаемость и легче
интегрируется с другими библиотеками и инструментами. Vue.js также
предоставляет удобный механизм для создания компонентов и обработки
событий, что делает его хорошим выбором для разработки PWA. Однако, в
отличие от Angular, Vue.js не обеспечивает такой высокой производительности
и масштабируемости."
"Таблица 3 - Сравнительный анализ практик для создания эффективных PWA
Table 3 - Comparative analysis of practices for creating effective PWA
Практика Описание"
Проверка подключения
Метод для определения, есть ли
подключение к Интернету
Кэширование
Метод для хранения данных
локально на устройстве пользователя
Уведомления
Метод для отправки уведомлений
пользователю о новых событиях или
обновлениях
"Таблица 3 представляет сравнительный анализ трех практик, которые
используются для создания эффективных прогрессивных веб-приложений
(PWA)."
"Первая практика - ""Проверка подключения"", используется для"
"определения наличия подключения к Интернету. Эта практика является важной,
поскольку многие PWA предполагают работу с Интернетом, и отсутствие
подключения может привести к непредсказуемому поведению приложения."
"Вторая практика - ""Кэширование"", используется для хранения данных
локально на устройстве пользователя. Это может повысить производительность
приложения, так как часто используемые ресурсы могут быть быстро загружены
из кэша, а не с сервера."
"Третья практика - ""Уведомления"", используется для отправки"
"уведомлений пользователю о новых событиях или обновлениях. Эта практика
может улучшить пользовательский опыт, предоставляя пользователям
своевременную информацию о важных событиях или изменениях в приложении."
"В целом, использование этих трех практик в сочетании с другими
технологиями, такими как Service Workers и Web App Manifest, может повысить
качество и эффективность PWA."
Заключение
"Прогрессивные веб-приложения (PWA) - это современный подход к
созданию веб-приложений, который обеспечивает высокую
производительность, доступность и масштабируемость, а также
усовершенствованный пользовательский опыт на любом устройстве и в любых
условиях."
"Разработка PWA включает в себя использование передовых методов и
инструментов, таких как Service workers, манифесты и кэширование данных, что
позволяет достичь максимально быстрого и отзывчивого дизайна, оптимизации
производительности, безопасности и конфиденциальности, а также поддержки
работы в оффлайн-режиме и прогрессивного улучшения."
"Приложения, разработанные с использованием лучших практик PWA,
могут успешно конкурировать с нативными приложениями благодаря высокому
уровню удобства использования и пользовательскому опыту."
"Внедрение PWA в проекты может стать ключевым фактором успеха
онлайн-бизнеса или веб-приложения, так как это позволяет увеличить уровень
удовлетворенности и вовлеченности пользователей. Кроме того, использование
PWA ведет к улучшению показателей конверсии, повышению лояльности
пользователей и уменьшению затрат на разработку и обслуживание приложений."
"С развитием технологий и совершенствованием браузеров,
прогрессивные веб-приложения будут продолжать набирать популярность среди
разработчиков и пользователей. Этот тренд может изменить пейзаж вебразработки,
сделав PWA неотъемлемым инструментом для создания вебприложений с высокими
показателями производительности и качества
пользовательского опыта [7]."
"РЕТРОСПЕКТИВА РАЗВИТИЯ ВЕБ-ТЕХНОЛОГИЙ В СОЗДАНИИ КОРПОРАТИВНЫХ
ИНФОРМАЦИОННЫХ СИСТЕМ"
"В течение последних десяти лет произошли значительные изменения в том, как мы
создаем"
"программное обеспечение. Этот эволюционный процесс затронул не только
серверную часть с"
"массовым переходом к использованию доступных облачных технологий и широким
выбором"
"технологий хранения данных, отличных от традиционных реляционных систем
управления базами данных. Во многом изменился и подход к созданию
пользовательских интерфейсов. Большой"
"акцент сегодня сместился именно на веб-приложения. Они продолжают, как и прежде,
использоваться для продвижения публичных интернет-ресурсов. Но что важнее, веб-
приложения становятся одним из основных способов реализации решений куда более
широкого спектра задач. Это"
"и корпоративные сервисы, которые раньше в большей степени реализовывались
через настольные приложения (Desktop Applications). Разработка мобильных
приложений также во многом"
"стремится использовать всю мощь современных браузеров. Даже те приложения,
которые выглядят и устанавливаются как классические настольные приложения, на
самом деле технически являются веб-приложениями, запущенными в браузере,
лишенном классических элементов управления и навигации в сети Интернет."
Примерами таких приложений сейчас являются Skype и
"Slack. Реализация приложений в виде веб-решений позволяет сделать их
кроссплатформенными,"
"то есть их можно запустить на любой из современных операционных систем, как и в
основном в"
любом современном браузере.
1. Основные этапы развития веб-технологий
"В начале 1990-х гг. Интернет существовал в виде протоколов, которые позволяли
обмениваться сообщениями и письмами. Первый сайт (info.cern.ch) появился лишь в
конце 1990 г. и соУДК 62; 004; 007 DOI: 10.14529/ctcr200402"
РЕТРОСПЕКТИВА РАЗВИТИЯ ВЕБ-ТЕХНОЛОГИЙ В СОЗДАНИИ
КОРПОРАТИВНЫХ ИНФОРМАЦИОННЫХ СИСТЕМ
А.А. Шинкарев
ООО «Софтмаст-ИТ», г. Челябинск, Россия
"Введение. Первые упоминания о корпоративных информационных системах
появились"
"в 60-х гг. XX в. Со временем эти системы развивались, становились более сложными,
но при"
"этом позволяли решать широкий круг задач. Начиная с 90-х гг. XX в. стали активно
развиваться веб-технологии. Естественным образом они нашли свое применение и
при разработке"
корпоративных информационных систем различного назначения. Цель исследования.
"Описание основных этапов развития веб-технологий, начиная от появления языка
гипертекстовой"
"разметки до современных одностраничных веб-приложений, а также их влияния на
подходы к"
"созданию корпоративных информационных систем. Выявление перспективных
направлений"
"развития решений на базе веб-технологий, которые могут успешно использоваться
при построении корпоративных информационных систем. Материалы и методы."
Рассматриваются
"современные веб-технологии, анализируется процесс их развития от этапа появления
до настоящего времени, рассматриваются примеры инструментов, которые были
признаны устаревшими, и причины невозможности дальнейшего развития этих
технологий. Результаты. В статье приводится история появления различных
технологий, описывается их влияние на подходы к реализации корпоративных систем,
а также приводится способ перехода от настольной"
"версии системы к ее онлайн-версии. В том числе дается оценка перспективности
отдельных"
"технологических направлений, которые имеют хорошие шансы успешно развиваться в
дальнейшем. Дается оценка растущей сложности веб-приложений, их сращивания с
подходами и"
"инструментами разработки серверной части. Выявляется актуальность разработчиков
программного обеспечения, которые могут разрабатывать как серверную, так и
клиентскую часть"
приложения.
"Ключевые слова: веб-технологии, корпоративные информационные системы, браузер,
веб-сервер, одностраничные приложения, JavaScript, ERP."
"Шинкарев А.А. Ретроспектива развития веб-технологий в создании
корпоративных информационных систем"
Вестник ЮУрГУ. Серия «Компьютерные технологии, управление, радиоэлектроника».
2020. Т. 20, № 4. С. 14–21
15
"стоял полностью из текста. Так зародился HTML (HyperText Markup Language – язык
гипертекстовой разметки), основы которого были описаны на этом сайте. HTML 
довольно быстро стал"
"поддерживать 16 цветов и позволял вставлять изображения. Появление таких
возможностей стало толчком к появлению первых браузеров – Mosaic (1993) и
NetScape (1994) [1, 2]."
"В 1991 г. появилась первая спецификация протокола HTTP 0.9 (Hyper Text Transfer 
Protocol –"
"протокол передачи гипертекста). С помощью этой версии протокола можно было
выполнять"
"только GET-запросы (простейшие запросы на чтение). При этом он не содержал
никаких заголовков, поэтому с его помощью можно было передавать только HTML-
страницы. В 1996 г. появилась версия HTTP 1.0, в которой была реализована
поддержка заголовков и кода состояния, а"
"также появилась возможность передавать разный формат документов. Все эти
нововведения появились не одномоментно, а постепенно в период с 1991 по 1995 г. С
тех пор HTTP развивался и"
"продолжает совершенствоваться по сей день. Он стал быстрее, надежнее и
универсальнее [3, 4]."
"В 1991 г. Тим Бернерс-Ли разработал первый веб-сервер CERN-httpd. По мере
развития"
HTML, HTTP и Интернета в целом появилась потребность в более быстром сервере.
Им стал
"NCSA httpd. Немного позднее к развитию этого сервера подключились другие
разработчики, которые добавляли новую функциональность и улучшения с
исправлениями. В 1995 г. все изменения были объединены в новый сервер, известный
как Apache. По развитию веб-серверов можно"
"судить о том, что Интернет и веб-технологии эволюционировали и становились
мощнее и удобнее. Благодаря этому стали доступны те возможности Web, которыми
мы обладаем сейчас [5, 6]."
"Марк Андрессен, основатель Netscape Communications и член бывшей команды
Mosaic, считал, что Интернету нужен способ стать более динамичным. Анимация,
взаимодействие и другие"
"формы небольшой автоматизации должны стать частью сети будущего. Поскольку на
тот момент"
веб-технологии находились на том уровне, чтобы быть понятными
"«непрограммистам», то и технология, которая бы сделала страницы Интернета более
динамичными, должна была стать доступной обычным пользователям, а не только
разработчикам. Так был создан JavaScript, который"
"сначала назывался Mocha. Для разработчиков планировалось использование очень
популярного в"
то время языка Java, а точнее Java-апплетов, которые могли выполняться в браузере.
В 1994 г.
"появилась первая версия JavaScript. В течение десятилетия наиболее популярным его
использованием был код такого вида (Листинг 1), что наглядно показывает, насколько
ограниченным было изначальное предназначение языка JavaScript [7]."
element.onClick = function() {
"document.getElementById(""myImage"").src = ""image.jpg"";"
}
Листинг 1
Listing 1
"Язык программирования JavaScript изначально не был разработан для создания
сложного"
"программного обеспечения. Это язык программирования с динамической типизацией,
с синтаксисом, который прощает ошибки, неоднозначным механизмом наследования
прототипа и отсутствующим понятием пакета или модуля. Все эти особенности
первоначальных версий делают его"
"более чем неоднозначным языком программирования, но именно ему
посчастливилось оказаться"
в нужном браузере в нужное время для того, чтобы сегодня ему не было альтернатив.
"То, что начиналось как скриптовый язык для украшения HTML-страниц, сейчас
используется обширнее,"
"чем когда-либо. Несмотря на всю его распространенность, изначальные слабые
стороны языка до"
сих пор позволяют писать код так, как этого делать не следует.
"Помимо JavaScript в 1994 г. был создан язык программирования PHP в виде CGI-
скриптов,"
"написанный с помощью языка программирования C. Уже через год потребовалась
большая"
"функциональность, которая была реализована в PHP в 1995 г. Эта новая реализация
была способна в том числе взаимодействовать с базами данных. Ее широкие
возможности лежали в основе"
"фреймворка, с помощью которого пользователи могли создавать простые
динамические вебприложения, такие как гостевые книги [8]."
Для простых пользователей компания Microsoft выпустила HTML-редактор FrontPage.
"Среди непрофессионалов приложение получило огромную популярность: теперь
любой человек в домашних условиях мог за несколько минут создать симпатичный
сайт. При этом"
Информатика и вычислительная техника
"Bulletin of the South Ural State University. Ser. Computer Technologies, Automatic Control, 
Radio Electronics."
2020, vol. 20, no. 4, pp. 14–21
16
"FrontPage отлично взаимодействовал с Internet Explorer, что сделало его популярным
в среде"
веб-разработчиков.
"Веб-программы, напоминающие современные SPA-сайты (Single Page Application – 
одностраничные приложения), на самом деле существуют с середины 90-х. Это сайты,
использующие"
"Java-апплеты и Flash. Также интересным технологическим решением, появившимся в
2007 г.,"
"была технология Silverlight, позволявшая писать кроссплатформенный код на C#, 
запускаемый в"
"браузере. Однако из-за запрета на запуск в браузере Safari данная технология уже в
2011 г. считалась отмирающей и после официального объявления о прекращении
поддержки в 2015 г. стала"
активно выводиться из использования в программных продуктах [9].
"Так называемые темные века веб-технологий продлились до 2005 г. В начале 2000-х
гг. в браузерах стало использоваться малоизвестное API под названием XML HTTP 
Request (оно же XHR)."
"Пример простейшего кода, позволяющий асинхронно загрузить и отобразить данные,
приведен"
"ниже (Листинг 2). Асинхронный JavaScript в сочетании с технологией XML появился в
2005 г."
var request = new XMLHTTPRequest();
request.onload = function() {
alert(this.responseText);
};
request.open('get', 'endpoint.php');
request.send();
Листинг 2
Listing 2
Рассмотрим основные вехи развития экосистемы веб-разработки в XXI в.
"1. JSON (2001) – появление формата представления данных JavaScript Object Notation, 
который сейчас является самым популярным форматом, используемым для
разработки интернетрешений. Сам формат основан на объектно-литеральном
синтаксисе языка JavaScript."
"2. JsLint (2002) – появление инструмента контроля качества программного кода,
написанного"
"на языке JavaScript. Эта библиотека является предком до сих пор популярной
библиотеки JSHint."
"3. JsMin (2003) – появление инструмента минификации программного кода,
написанного на"
"языке JavaScript. Минификация может значительно сокращать время, которое
необходимо для"
"загрузки ресурсов веб-сайта за счет сокращения размера итогового JavaScript-файла,
что в свою"
"очередь позволяет сайтам загружаться быстрее. В том числе в рамках агрессивной
минификации"
"производится так называемая аглификация (uglification), становится значительно
сложнее читать"
код и разбираться в нем.
"4. jQuery (2006) – создание библиотеки, позволяющей писать кросс-браузерный код,
расширяющей функциональность стандартной библиотеки языка JavaScript, а также
добавляющей библиотеку базовых UI-компонентов."
"5. JavaScript: Сильные стороны (2008) – издание книги, оказавшей значительное
влияние на"
сообщество веб-разработчиков и на то, как они пишут программный код.
"6. NodeJS (2009) – релиз платформы, позволяющей запускать программный код на
языке"
"JavaScript на сервере. С этого момента язык перестает существовать только в
песочнице браузера"
"и начинает распространяться и на бекенд-разработку и обрастать огромным
количеством различных фреймворков и библиотек, которые на сегодняшний день
покрывают почти любую необходимость при разработке корпоративных и публичных
веб-решений."
"2. Переход от статических веб-страниц к одностраничным приложениям
В начале 2000-х гг. и на более поздних этапах развития интернет-технологий
произошло"
"много событий. К тому времени веб-сайты нашли применение во многих сферах
повседневной"
"жизни. Информация приобрела большое значение. В основе большинства сайтов
лежал статический HTML с использованием некоторых серверных технологий, история
появления которых"
была описана ранее. С приходом в мир веб-технологий библиотеки jQuery в 2006 г.
"было положено начало развитию SPA-решений. Следует отметить, что в названии
этой технологии используется слово «application», а не «website», что может
свидетельствовать о том, что использование"
веба вышло на новый уровень.
"Шинкарев А.А. Ретроспектива развития веб-технологий в создании
корпоративных информационных систем"
Вестник ЮУрГУ. Серия «Компьютерные технологии, управление, радиоэлектроника».
2020. Т. 20, № 4. С. 14–21
17
"Однако jQuery был ориентирован на пользовательский интерфейс и не подходил для
обработки данных приложения. Следующим логичным шагом развития веб-
приложений становится"
реализация библиотеки KnockoutJS, выпуск первой версии которой состоялся в 2010 г.
"Она реализовывала паттерн проектирования MVVM (Model-View-ViewModel) и
позволяла связывать"
"данные и их представление в пользовательском интерфейсе [10]. Тем не менее
создание полноценного SPA еще представлялось маловозможным. Незадолго до
KnockoutJS в 2009 г. была представлена библиотека Backbone.js, которая предлагала
полноценную среду для разработки максимально приближенного к SPA приложения. В
2010 г. появилась первая версия AngularJS –"
"фреймворка, объединившего лучшие подходы в создании SPA и позволившего
реализовывать их"
"в том виде, в котором мы их знаем сейчас. AngularJS реализовывал двустороннюю
привязку данных, клиентский MVC, шаблоны и внедрение зависимостей в одном
фреймворке [11]."
"В современной разработке клиентской части приложений широкое распространение
получило применение упомянутого ранее паттерна проектирования MVVM, 
развивающего паттерн разработки MVC (Model View Conroller) и возможно лучше
подходящего для разработки пользовательских интерфейсов. В современных SPA-
фреймворках присутствует двустороннее или одностороннее связывание данных
(Data Binding). Для организации асинхронного взаимодействия"
"используются промисы (Promises) или же реактивное программирование (Reactive
Programming)."
"Также инъекция зависимостей (Dependency Injection) является неотъемлемой частью
архитектуры современных веб-решений."
"На сегодняшний день кажется вполне вероятным дальнейшее усиление роли SPA-
приложений на рынке разработки прикладного программного обеспечения. Этот
инструмент успешно"
"зарекомендовал себя как для создания публичных сайтов с высокими требованиями
производительности и поддержки кодовой базы, так и для построения корпоративных
веб-приложений с"
"богатой доменной логикой, являющейся частью клиентского приложения, так
называемых толстых клиентов. Помимо публичных и корпоративных систем SPA-
решения находят свое применение и в создании мобильных и десктопных
приложений, потому что позволяют писать логику"
"на популярных у разработчиков кроссплатформенных технологиях, таких как HTML, 
CSS и"
JavaScript [12].
"Сравнительно недавно появилась концепция под названием Micro Frontends, которая
нашла в"
"последнее время более серьезную поддержку на уровне официальных стандартов
таких технологий, как Web Components [13]. Суть идеи заключается в том, чтобы дать
возможность запускать в"
"браузере для одного и того же приложения несколько разных фреймворков работы с
деревом"
DOM (Document Object Model) через унифицированный интерфейс взаимодействия.
Поддержка
этого варианта взаимодействия уже присутствует во всех ведущих SPA-фреймворках.
"Эта поддержка будет только расширяться со временем. Идея разделить монолитную
клиентскую логику"
"веб-приложения по сути своей заимствует идеи микросервисной архитектуры, только
применительно к клиентской стороне программного обеспечения. Естественно, идея
разделения приложения на изолированные части, общающиеся между собой через
унифицированный протокол,"
"добавляет сложности процессам разработки и поддержки веб-приложений. Однако
вариант полной изоляции может подойти крупным проектам, в разработку которых
вовлечено несколько отдельных команд разработчиков. Этот шаг позволит сделать
рост сложности программного обеспечения, который происходит с ростом объема
функциональности, более линейным, а не экспоненциальным."
"Стоит отметить, что подход с использованием технологии iframe [14], существующий
по"
"меркам веб-разработки очень давно, до сих пор может успешно использоваться для
разбиения"
"приложения с общим интерфейсом на части, обладающие изолированностью и
независимостью"
"развертывания. Кажется, что на данном этапе подход со встраиванием через iframe 
более предпочтителен по сравнению с вариантом использования не до конца зрелой
технологии Micro"
Frontends [15].
"Стоит отметить, что и направление внедрения кода, написанного не на JavaScript,
имеет свое"
"продолжение, в частности через технологию WebAssembly [16]. Например, ее
использует Blazor,"
"являющийся частью платформы .NET. Это также является интересным вариантом
дальнейшего"
"развития клиентских веб-приложений со сложной логикой, вынесенной за пределы
серверной"
части.
Информатика и вычислительная техника
"Bulletin of the South Ural State University. Ser. Computer Technologies, Automatic Control, 
Radio Electronics."
2020, vol. 20, no. 4, pp. 14–21
18
"Помимо технологий интеграции крупных модулей, которые были рассмотрены выше,
важную роль играют системы реализации модульности на уровне кода отдельно
взятого приложения."
"Для разбиения кода на модули и их встраивания в код использовались такие пакеты,
как AMD,"
"RequireJS, CommonJS. Распространение пакетов происходило с использованием таких
сервисов,"
"как NPM и Bower. Основными средствами автоматизации являлись Grunt и Gulp. 
Создание сложных программных продуктов, таких как, например, офисные пакеты
работы с документами, уже"
"во многом переходит в веб-формат. В частности, рабочая версия статьи набиралась в
онлайнверсии Microsoft Word."
"Во многом можно сказать, что разработка пользовательского интерфейса веб-
решений становится все больше похожа на разработку серверной части за счет
активного внедрения статической типизации с использованием таких библиотек, как
TypeScript и Flow. Распространена тенденция, когда разработчики фронтенд-решений
переходят к разработке бекенд-сервисов на платформе NodeJS, ведь вся экосистема
им знакома. Также и бекенд-разработчики переходят к работе"
"над логикой уровня представления, встречая все больше знакомых концепций,
которые были у"
"них позаимствованы. В целом кажется, что тенденция на смешение ответственности и
переход к"
"универсальному типу разработчика (Full-Stack Developer) только будет набирать
обороты в дальнейшем."
"3. Использование веб-технологий в построении корпоративных информационных
систем"
"Развитие информационных технологий неизбежно привело к информатизации
большей части"
"процессов, протекающих в обществе и бизнесе. Все развивающиеся компании рано
или поздно"
"столкнулись с необходимостью систематизации и структурирования информации, а
также с автоматизацией процессов обработки этой информации. На начальном уровне
было возможно использование различных настольных приложений для работы с
информацией, однако с увеличением ее объемов стало ясно, что необходимо
создание корпоративных информационных систем."
"Корпоративная Информационная Система (КИС) – это масштабируемая система,
предназначенная для комплексной автоматизации всех видов хозяйственной
деятельности компаний, а также"
корпораций, требующих единого управления [17].
Рассмотрим этапы развития корпоративных информационных систем.
"1. 1960-е гг.: появление MRP (Material Requirements Planning) – планирование
потребности"
в материалах.
"2. 1980-е гг.: появление MRP 2 (Manufactory Resource Planning) – планирование
производственных ресурсов."
"3. 1990-е гг.: появление ERP (Enterprise Resource Planning) – набор интегрированных
приложений, позволяющих создать интегрированную информационную среду для
автоматизации планирования, учета, контроля и анализа всех основных бизнес-
операций предприятия."
"4. 2000-е гг.: появление CSRP (Customer Synchronized Resources Planning) – 
планирование ресурсов, синхронизированное с покупателем [18]."
"Использование веб-технологий в построении корпоративных систем началось на этапе
появления ERP. Поскольку информационные технологии активно развивались, то"
"компании, занимающиеся разработкой КИС, понимали, что удобство использования
систем будет намного выше, если взаимодействие с этими системами будет доступно
по сети Интернет. Изначально это"
"взаимодействие ограничивалось использованием HTML и XML. Архитектура таких
систем"
"включала в себя наличие сервера HTML-интерфейса, сервера XML-данных, сервера
приложения,"
"а также сервера СУБД (система управления базами данных). Сервера HTML и XML 
реализовывались на основе Apache или Netscape [19]."
"По мере развития HTTP, HTML, средств для создания пользовательских интерфейсов,
способов хранения и обработки данных, а также увеличения объема этих данных
зародилась идея реализации распределенных информационных систем. Первым
шагом на пути к этому стало использование ASP (Application Service Provider)."
"Технология ASP позволяла обеспечивать доступ к информационной системе, которая
была установлена на стороннем сервере. Такой подход зародился по причине того,
что КИС уже стоили больших денег, что делало невозможным их покупку
предприятиями малого и среднего бизнеса. Кроме того, значительно выросла и
сложность самих"
"систем, что приводило к огромным расходам на распространение программного
обеспечения"
"Шинкарев А.А. Ретроспектива развития веб-технологий в создании
корпоративных информационных систем"
Вестник ЮУрГУ. Серия «Компьютерные технологии, управление, радиоэлектроника».
2020. Т. 20, № 4. С. 14–21
19
"среди конечных пользователей. Доступ с использованием ASP предоставляла
компания SAP к"
своему продукту SAP R/3 [20].
"Традиционная структурная схема локальной информационной системы выглядит
следующим образом."
1. Интерфейс пользователя.
2. Ядро системы.
3. Информационный массив.
4. Интерфейс администратора.
5. Утилиты администратора.
"Переход от локальной информационной системы (ИС) к ее веб-версии возможен при
реализации ее структурных элементов с использованием веб-технологий. С точки
зрения веб-технологии интерфейс пользователя – это браузер, который
взаимодействует с ядром через HTTP-сервер."
Таким образом происходит первый этап декомпозиции традиционной ИС в веб.
"Второй шаг – это возможность использования браузера в качестве интерфейса
администратора."
"Здесь возникают вопросы разграничения доступа и актуализации информации в базах
данных системы."
"Следующий шаг – распределение нагрузки по нескольким серверам, а также
использование"
кэширования на серверах-посредниках.
"Пока декомпозиции подвергалась связка «конечный пользователь – ядро». Можно
провести"
"декомпозицию и на стороне сервера. Первым таким шагом является применение CGI
при доступе"
к ресурсам. Сервер становится посредником между браузером и сервером ресурса.
"Более эффективно это решается за счет API (Application Programming Interface), когда
сам HTTP-сервер имеет"
модуль доступа к серверному процессу.
"Другим важным моментом является внедрение результатов обращения к внешнему
ресурсу в"
"готовые шаблоны страниц. В терминологии веб – это Server Site Include. Вставка
может осуществляться как локально, так и с использованием данных удаленного
сервера. Таким образом, сервер"
оснащается языком манипулирования данными при формировании отклика.
"Другой инструмент – это видоизменение страниц на стороне клиента. Управление
формой"
"интерфейса пользователя осуществляется на стороне клиента при помощи
скриптовых языков,"
"таких как JavaScript. В первую очередь, это позволяет повысить интерактивность ИС,
построенной на основе веб-технологий. Сейчас активно используется SPA-подход в
организации пользовательского интерфейса."
"Для поддержки сеанса работы с сервером в веб применяется спецификация Cookie. 
Идея состоит в том, чтобы передавать от клиента на сервер и обратно информацию о
пользователе и его"
"действиях, которая привязывается по типу информационного ресурса и времени [21]. 
Например,"
компания SAP предоставляет ERP, реализованную по схожему подходу.
"Таким образом, использование веб-технологий при разработке КИС позволяет в
любое время"
и любом месте:
1) посылать письменные сообщения;
"2) представлять свое предприятие, свои товары и услуги, осуществлять обратную
связь с"
клиентами (получать заказы, рекламации и т. д.);
3) заниматься маркетингом;
4) искать сотрудников;
5) устанавливать деловые связи, покупать товары и услуги;
6) производить прямые расчеты с покупателями и поставщиками.
"Переход ИС из громоздких и сложных локальных приложений на сторону веб-
технологий"
"позволяет предприятиям малого и среднего бизнеса в полной мере использовать
возможности,"
"которые сегодня предоставляют информационные технологии, а значит, выйти на
новый уровень"
эффективности ведения бизнеса.
Заключение
"Развитие веб-технологий сыграло важную роль в подходах к созданию корпоративных
информационных систем. Технологии создания веб-приложений прошли большой путь
развития от"
"простейших текстовых страниц до больших и сложных приложений, способных решать
широкий"
круг бизнес-задач.
Информатика и вычислительная техника
"Bulletin of the South Ural State University. Ser. Computer Technologies, Automatic Control, 
Radio Electronics."
2020, vol. 20, no. 4, pp. 14–21
20
"По мере развития корпоративных информационных систем от простых настольных
приложений до крупных системных комплексов со сложной архитектурой их стоимость
на рынке программного обеспечения также росла, росли затраты на распространение
систем между конечными пользователями в организации. По этой причине
предприятия малого и среднего бизнеса не"
могли позволить себе использование корпоративных информационных систем.
"Поскольку в современном мире сложилась тенденция перехода различных систем в
вебпространство, а также тот факт, что веб-технологии достигли высокого уровня
развития, закономерно, что стала возможна и реализация корпоративных
информационных систем с использованием новейших веб-технологий. Это в свою
очередь открывает новые пути развития таких систем и дает возможность их
использовать малым и средним компаниям для достижения бизнесцелей. Доступность
системы, требующей от пользователя лишь наличия браузера, 24 часа 7 дней
в неделю в публичном пространстве, в значительной степени определила
лидирующую роль вебрешений по сравнению с классическими настольными
приложениями."
"Решения, базирующиеся на SPA-фреймворках, имеют все шансы продолжить
господствовать"
"среди инструментов создания веб-приложений. Однако не стоит сбрасывать со счетов
концепцию"
"микрофронтендов, которая, возможно, нивелирует синтаксическую пропасть между
лидирующими SPA-фреймворками сегодня. Также возможным направлением
универсализации является"
"развитие таких технологий, как рассмотренная технология WebAssembly, запуска в
браузере кода, написанного не на языке программирования JavaScript."
"Бесспорно одно – разработка клиентской части веб-приложений будет продолжать
усложняться и экосистема технологий вокруг будет лишь расти, вместе с тем рождая
новые альтернативы реализации той же функциональности, но используя разные
языки, библиотеки и подходы к"
"интеграции. Сложность этой части программного обеспечения во многом будет
сравниваться с"
"реализацией серверной части, а актуальность программистов-универсалов на рынке
труда будет"
лишь усиливаться.
"ИССЛЕДОВАНИЕ МЕТОДОВ ТЕСТИРОВАНИЯ ИНФОРМАЦИОННЫХ СИСТЕМ И ВЕБ-
ПРИЛОЖЕНИЙ"
"В настоящее время промышленное производство программного обеспечения (ПО)
достигло таких масштабов и такой степени сложности, что необходимость в
индустриально применимых технологиях систематического тестирования
общепризнана. Особенно актуальным является создание таких технологий, которые
обеспечивают одновременно качественное, систематическое тестирование целевого
ПО и высокую степень автоматизации разработки тестов. Традиционные методы
разработки тестов вручную уже не могут обеспечить качественное тестирование
современных программных систем."
"ВЕСТНИК НАУКИ И ОБРАЗОВАНИЯ № 23(101). Часть .1 2020. █ 30 █
Обычно автоматизация тестирования сводится к автоматизации выполнения
тестов и генерации отчетов по их результатам. Автоматизировать подготовку тестов и
анализ полученных результатов труднее, поскольку при этом необходимо обращение
к требованиям к ПО, соответствие которым, должно быть проверено во время
тестирования. Требования же часто представлены в виде неформальных документов,
а иногда - только как знания и опыт экспертов, аналитиков и проектировщиков ПО."
"Для того, чтобы вовлечь требования в автоматизированный процесс разработки
тестов, необходимо перевести их в формальное представление, которое может быть
обработано полностью автоматически. Для этой цели требования описывают в виде
формальных спецификаций целевой системы, которые можно преобразовать в
программы, выполняющие проверку соответствия работы целевого ПО
зафиксированным в них требованиям."
"Несмотря на активное развитие методов построения тестов на основе формальных
спецификаций или формальных моделей в академическом сообществе, лишь
немногие из них оказываются применимыми в индустрии производства ПО. Основная
проблема здесь в том, что индустрии нужны не отдельные методы, а технологии, т.е."
"инструментально поддержанные системы методов для решения наборов связанных
задач, относящихся к выделенному аспекту разработки ПО."
"Данная статья представляет описание технологии UniTe K, которая была
разработана в ИСП РАН на основе опыта нескольких проектов по верификации
сложного промышленного ПО и нацелена на то, чтобы сделать возможным
использование передовых методов тестирования в контексте индустриального
производства ПО. UniTe K в первую очередь предназначена для разработки
функциональных тестов на основе моделей требований к функциональности целевой
системы. Проблемы построения тестов для проверки нефункцио-нальных требований
выходят за рамки данной работы."
"Структура статьи такова. Следующий за введением раздел содержит описание
основных элементов технологии UniTe K, начиная с общего обзора ее базовых
принципов и дальше раскрывая некоторые из них в деталях. В третьем разделе
проводится сравнение UniTe K с другими подходами к разработке тестов на основе
моделей. В четвертом разделе кратко описываются примеры приложений UniTe K и
опыт использования этой технологии для тестирования промышленного ПО. В
заключении рассматриваются направления дальнейшего развития этой технологии."
1. Существующие методы функционального тестирования веб-приложений.
"Самым распространенным является подход, называемый Capture & Playba k
(другие названия – Re rd & Playba k, Capture & Replay). Суть этого подхода
заключается в том, что сценарии тестирования создаются на основе работы
пользователя с тестируемым приложением. Инструмент перехватывает и записывает"
"действия пользователя, результат каждого действия также запоминается и служит
эталоном для последующих проверок. При этом в большинстве инструментов,
реализующих этот подход, воздействия (например, нажатие кнопки мыши)
связываются не с координатами текущего положения мыши, а с объектами
HTMLинтерфейса (кнопки, поля ввода и т.д.), на которые происходит воздействие, и их
атрибутами. При тестировании инструмент автоматически воспроизводит ранее
записанные действия и сравнивает их результаты с эталонными, точность сравнения
может настраиваться. Можно также добавлять дополнительные проверки – задавать
условия на свойства объектов (цвет, расположение, размер и т.д.) или на
функциональность приложения (содержимое сообщения и т.д.). Все коммерческие
инструменты тестирования, основанные на этом подходе, хранят записанные
действия и ожидаемый результат в некотором внутреннем представлении, доступ к
которому можно получить, используя или распространенный язык програм80
мирования (Java в S lex), или собственный язык инструмента (4Te t в SilkTe t от
Segue, SQABa i в Rati nal R b t от IBM, TSL в WinRunner от Mer u ry). Кроме
█ 31 █ ВЕСТНИК НАУКИ И ОБРАЗОВАНИЯ № 23(101). Часть 1. 2020."
"элементов интерфейса, инструменты могут оперировать HTTP-запросами,
последовательность которых также может записываться при работе пользователя, а
затем модифицироваться и воспроизводиться. Основное достоинство этого подхода –
простота освоения."
"Создавать тесты с помощью инструментов, реализующих данный подход, могут
даже пользователи, не имеющие навыков программирования. Вместе с тем, у подхода
имеется ряд существенных недостатков. Для разработки тестов не предоставляется
никакой автоматизации; фактически, инструмент записывает процесс ручного
тестирования. Если в процессе записи теста обнаружена ошибка, то в большинстве
случаев создать тест для последующего использования невозможно, пока ошибка не
будет исправлена (инструмент должен запомнить правильный результат для
проверки). При изменении тестируемого приложения набор тестов трудно
поддерживать в актуальном состоянии, так как тесты для изменившихся частей
приложения приходится записывать заново. Этот подход лучше всего использовать
для создания прототипа теста, который впоследствии может служить основой для
ручной доработки. Одна из возможных доработок – параметризация теста для
проверки тестируемого приложения на различных данных. Этот подход называется
тестированием, управляемым данными Data Driven."
"Основное ограничение – перебираемые данные не должны изменять поведение
тестируемого приложения, поскольку проверки, записанные в тестовом сценарии, не
подразумевают какой-либо анализ входных данных, т.е. для каждого варианта
поведения нужно создавать свой сценарий тестирования со своим набором данных."
"Некоторые инструменты, реализующие Capture & Playba k, предоставляют
возможность по перебору данных; кроме того, над большинством распространенных
инструментов существуют надстройки. Описанные подходы основываются на
построении тестов с использованием тестируемого приложения. В подходе Keyw rd
Driven. предпринимается попытка сделать процесс создания тестов независимым от
реализации. Суть подхода заключается в том, что действия, выполняемые в ходе
тестирования, описываются в виде последовательности ключевых слов из
специального словаря («нажать», «ввести», «проверить» и т.д.). Специальный
компонент тестовой системы переводит эти слова в воздействия на элементы
интерфейса тестируемого приложения. Таким образом, никакого"
"программирования для создания тестов не нужно. Единственное, что нужно
менять при изменении интерфейса, – это компонент, который отвечает за перевод
слов из «словаря» в последовательность воздействий на приложение. Комплект
тестов может 81 разрабатываться пользователями, не владеющими навыками
программирования, однако для поддержания комплекта в рабочем состоянии
программирование все-таки необходимо. В качестве примера инструмента,
поддерживающего такой подход к разработке тестов, можно привести Certify от
W rkS ft, в котором поддерживается библиотека функций для работы с каждым
компонентом интерфейса (окна, гиперссылки, поля ввода и т.д.) и предоставляется
язык воздействий на эти элементы (InputText, VerifyValue и VerifyPr perty)."
"Основные преимущества этого подхода заключаются в том, что он позволяет
создавать тесты, не дожидаясь окончания разработки приложения, руководствуясь
требованиями и дизайном интерфейса. Созданные тесты можно использовать как
для автоматического выполнения, так и для ручного тестирования. Основной
недостаток этого подхода – отсутствие автоматизации процесса разработки
тестов. В частности, все тестовые последовательности разрабатываются вручную,
что приводит к проблемам, как на стадии разработки, так и на стадии
сопровождения тестового набора. Эти проблемы особенно остро проявляются при
тестировании Web-приложений со сложным интерфейсом."
"ВЕСТНИК НАУКИ И ОБРАЗОВАНИЯ № 23(101). Часть .1 2020. █ 32 █
1. Технология UniTesK"
"Большинство проблем, присущих рассмотренным подходам разработки тестов,
решены в технологии UniTe K, разработанной в Институте системного
программирования РАН. Технология хорошо себя зарекомендовала при
функциональном тестировании разнообразных систем (ядро операционной системы,
стеки протоколов, компиляторы). Опыт применения технологии для тестирования
Web-приложений показал, что UniTe K может служить хорошей базой для
тестирования такого класса приложений. В этом разделе мы остановимся на основных
моментах технологии UniTe K, в последующих разделах рассмотрим особенности
применения технологии для тестирования Webприложений."
"Технология UniTe K – это технология разработки функциональных тестов на
основе моделей, которые используются для оценки корректности поведения целевой
системы3 и автоматической генерации последовательностей воздействий, далее
называемых тестовыми последовательностями. Результат воздействия (реакция
системы) представляется выходными параметрами, значения которых могут зависеть
от истории взаимодействий целевой системы с окружением. Информация об истории
моделируется внутренним состоянием целевой системы. Внутреннее состояние
влияет на выходные параметры интерфейсных функций и может изменяться в
результате их работы."
"Следует заметить, что в рамках данной статьи для тестирования Webприложений
рассматривается представление, в котором воздействия на целевую систему и
получение ее реакции на это воздействие (выходные параметры интерфейсной
функции) рассматриваются как атомарное действие. Под атомарностью действия
понимается, что следующее воздействие можно произвести только после получения
реакции на предыдущее. Технология UniTe K также позволяет представлять целевую
систему и как систему с отложенными реакциями, т.е. как систему, разрешающую
воздействие до получения всех реакций на предыдущее."
Корректность поведения целевой системы оценивается с точки зрения его
соответствия поведению некоторой «эталонной» модели, называемой спецификацией.
"В технологии UniTe K эталонная модель описывается неявно в виде требований к
поведению каждой интерфейсной функции. При задании эталонной модели можно
описывать функции и их параметры в достаточно обобщенном виде, отвлекаясь от
несущественных подробностей. Основными компонентами тестовой системы
являются итератор тестовых воздействий, оракул и медиатор. Задачей итератора
тестовых воздействий, работающего под управлением обходчика, является
построение тестовой последовательности, обеспечивающей заранее определенный
критерий тестового покрытия. Задачей оракула является оценка корректности
поведения целевой системы. Задача медиатора – преобразовывать тестовое
воздействие в последовательность реальных воздействий на целевую систему и на
основании доступной информации построить новое модельное состояние целевой
системы после вызова. В качестве языка описания компонентов тестовой системы
используются спецификационные расширения обычных языков программирования,
таких как C# и Java. В этих расширениях реализованы три вида специальных классов,
предназначенных для описания компонентов тестовой системы. Из
спецификационных классов генерируются оракулы, из медиаторных – медиаторы, а
из сценарных – итераторы тестовых воздействий. В спецификационных классах
описываются спецификационные методы, каждый из которых соответствует
некоторой интерфейсной функции и содержит формальное описание требований к
поведению целевой системы при взаимодействии с ней через данную интерфейсную
функцию. Сценарные классы предназначены для описания тестовых сценариев,
содержащих описание единичных воздействий и правил итерации их параметров."
"Медиаторы генерируются на основе медиаторных классов, которые связывают
интерфейсные функции с воздействиями на целевую систему."
█ 33 █ ВЕСТНИК НАУКИ И ОБРАЗОВАНИЯ № 23(101). Часть 1. 2020.
"Основной шаг работы тестовой системы устроен следующим образом. Обходчик
выбирает очередное сценарное воздействие. Сценарное воздействие содержит
несколько обращений к целевой системе, представляющих собой вызов интерфейсной
функции с определенным набором значений входных параметров. Вызов
интерфейсной функции передается оракулу, который, в свою очередь, передает его
медиатору. Медиатор преобразует вызов интерфейсной функции в
последовательность действий над тестируемой системой, получает результат этих
действий от тестируемой системы и преобразует его в значения выходных параметров
интерфейсной функции. Медиатор также синхронизирует модель состояния
тестируемой системы, используемую оракулом для оценки корректности поведения, с
ее реальным состоянием."
"В результате анализа функциональности необходимо определить интерфейс
тестируемой системы. Для этого требуется выделить функции, предоставляемые
системой, и для каждой такой функции определить, что выступает в качестве ее
входных и выходных параметров. На этапе формализации требований для каждой
интерфейсной функции, выявленной на предыдущем шаге, необходимо описать
ограничения на значения выходных параметров в зависимости от значений входных
параметров и истории предыдущих взаимодействий с тестируемой системой. Для
этого в технологии UniTe K используется широко известный подход программных
контрактов. В основе этого подхода лежат инварианты данных, а также предусловия и
постусловия интерфейсных операций. При связывании требований с реализацией
необходимо описать, как каждая интерфейсная функция отображается на реализацию"
"тестируемой системы. В рамках этого отображения требуется установить правила
преобразования вызовов интерфейсных функций в последовательность действий над
тестируемой системой, а также правила построения модели состояния тестируемой
системы. Для систем с прикладным программным интерфейсом, когда
взаимодействие через интерфейсную функцию соответствует вызову функции
тестируемой системы, установление такого отображения может быть
автоматизировано при помощи интерактивных шаблонов, предоставляемых
инструментами семейства UniTe K."
2. Применение UniTesK для тестирования Web-приложений
"Технология UniTe K применялась для тестирования Web-приложений в
нескольких проектах. В ходе разработки тестов выяснилось, что большая часть
усилий тратится на создание медиаторов, которые переводят вызов интерфейсных
функций в последовательность воздействий на Web-приложение. Анализ опыта
показал, что большая часть этой работы может быть автоматизирована, опираясь на
стандартизированную архитектуру пользовательского интерфейса Web-приложений."
"В принципе, эту особенность Web-приложений можно было бы использовать для
автоматизации других шагов технологии UniTe K. В этом разделе будут рассмотрены
варианты моделирования поведения Web-приложения в контексте возможной
автоматизации шагов технологии UniTe K. Моделирование определяется способом
выделения интерфейсных функций и способом построения модели состояния
Webприложения. Первый вариант основывается на стандартном протоколе HTTP,
который служит для взаимодействия между Web-браузером и Web-приложением."
"Поведение Webприложения рассматривается на уровне HTTP, и этот уровень
считается единственно возможным для обращения к Web-приложению. Во втором
варианте за основу берется формальное описание интерфейса в виде HTML, которое
используется Web-браузером для организации взаимодействия с пользователем. В
этом варианте взаимодействие с Web-приложением происходит только посредством
Web-браузера. И, наконец, в третьем варианте поведение Web-приложения
моделируется без привязки к конкретному способу обращения, основываясь лишь на
тестируемой функциональности."
"ВЕСТНИК НАУКИ И ОБРАЗОВАНИЯ № 23(101). Часть .1 2020. █ 34 █
3.1. Моделирование поведения на уровне HTTP"
"В первом варианте модель Web-приложения представляется одной интерфейсной
функцией, описывающей HTTP-запрос к Web-приложению. Параметры этой функции
– это параметры запроса (например, тип запроса (GET или POST), адрес (URL),
параметры заголовка и т.д.) и список данных, которые передаются Web-приложению."
"Выходные параметры функции формируются на основе HTTP-ответа, пришедшего от
Web-приложения. Требования к функциональности формулируются в виде набора
ограничений на выходные параметры в зависимости от значений входных параметров
и модели состояния Web-приложения. Требования в большинстве случаев сильно
различаются в зависимости от URL, поэтому спецификацию интерфейсной функции
можно разделить на независимые спецификации нескольких интерфейсных функций,
каждая из которых описывает поведение, характерное для конкретного семейства
значений параметра, определяющего URL. Однако для больших Web-приложений
такое описание требований получается громоздким и плохо структурируемым."
"Каждая интерфейсная функция соответствует определенному запросу с некоторыми
параметрами; в процессе работы тестовой системы вызов интерфейсной функции
преобразуется в посылку соответствующего HTTP-запроса серверу. HTTP-запрос"
"строится на основе формальных правил преобразования параметров, поэтому шаг
технологии UniTe K, на котором происходит связывание требований с реализацией,
полностью автоматизируется. При создании тестовых сценариев для этого варианта
наибольшую трудность представляет организация перебора параметров выделенных
интерфейсных функций. Для каждого конкретного случая можно найти наиболее
подходящий способ перебора параметров, однако это требует от тестировщика
определенной квалификации и опыта. Следует отметить, что этот вариант позволяет
тестировать Web-приложение на устойчивость к некорректным HTTP-запросам, так
как можно имитировать ситуации, которые не должны появиться в процессе
нормальной работы с Web-приложением посредством браузера."
3.2. Моделирование на уровне веб-браузера
"Во втором варианте в качестве интерфейса системы рассматривается интерфейс,
предоставляемый Web-браузером. В этом варианте интерфейсным функциям
соответствуют воздействия на активные элементы интерфейса, в результате которых
происходит обращение к Web-приложению. Такими элементами можно считать
гиперссылки, кнопки форм и элементы интерфейса, для которых определена
обработка на клиентской стороне, приводящая к обращению к серверу. Входные
параметры этих функций – это данные, которые может вводить пользователь,
например, при заполнении полей ввода или выборе значений из выпадающих списков
и т.д. Таким образом, если 87 рассматривать HTML-форму, то нажатию на кнопку, по
которой отправляются данные, будет соответствовать интерфейсная функция,
параметрами которой являются значения полей этой формы. Стоит оговориться, что в
этом варианте в качестве тестируемой системы рассматривается Web-приложение в
целом, включая как серверную, так и клиентскую часть. Однако внимание
акцентируется на тестировании серверной части, и не ставится задача покрытия
функциональности клиентской части. В этом варианте считается, что выходные
параметры интерфейсных функций отсутствуют, поскольку результат воздействия
описывается как изменение состояния Web-приложения. Состояние Web-приложения
в этом варианте разбивается на состояние интерфейса, отображаемого
Webбраузером, и состояние сервера. К состоянию интерфейса можно отнести
текущую"
"отображаемую страницу и состояние элементов на ней. К состоянию сервера
относится, например, состояние базы данных, с которой работает Web-приложение,
или данные, описывающие сеанс работы пользователя. Интерфейсные функции
доступны не во всех состояниях, так как не во всех состояниях пользовательского
интерфейса присутствуют элементы интерфейса, воздействия на которые
соответствуют этим интерфейсным функциям. Например, некоторые элементы
█ 35 █ ВЕСТНИК НАУКИ И ОБРАЗОВАНИЯ № 23(101). Часть 1. 2020."
"интерфейса становятся доступны только после авторизации, HTML-формы с полями и
кнопками располагаются не на всех страницах Web-приложения. Условия
доступности описываются в предусловии и определяются состоянием
Webприложения. Требования к функциональности описываются в постусловии в виде
ограничений на состояние, в которое переходит Web-приложение в результате
воздействия, описываемого интерфейсной функцией. Часто одному URL
соответствуют пользовательские интерфейсы, содержащие одни и те же наборы
интерфейсных функций. В таких случаях эти наборы удобно объединять в группы
функций и специфицировать их как методы одного спецификационного класса. В
других случаях одни и те же функции могут присутствовать сразу на нескольких"
"интерфейсах, соответствующих разным URL. В этом случае интерфейсные функции
удобно объединять в группы в зависимости от функционального назначения и
специфицировать отдельно. Это позволяет получить хорошо структурированные
спецификации, в которых дублирование описания функциональности сведено к
минимуму. По сравнению с первым, этот вариант позволяет уделить большее
внимание описанию именно функциональности Web-приложения, абстрагируясь от
деталей обработки HTTP-запросов и ответов, что существенно упрощает
моделирование работы пользовательских интерфейсов, обладающих сложным
динамическим поведением."
3. Дополнительная инструментальная поддержка
"Основной задачей, возлагаемой на инструментальную поддержку, является
упрощение работы пользователя по созданию компонентов тестовой системы. Это
достигается за счет дополнительной автоматизации шагов технологического процесса
UniTe K с учетом специфики Web-приложений. Первый шаг технологического
процесса UniTe K – анализ функциональности тестируемой системы – не
предполагает инструментальной поддержки, однако для Web-приложений можно
предложить способ выделения интерфейсных функций на основе
автоматизированного анализа интерфейса Webприложения. На шаге формализации
требований пользователь может описывать требования в виде условий на различные
атрибуты элементов интерфейса; эти условия могут строиться с использованием
поддержки инструмента. Информации, собранной при автоматизации первого и
второго шагов, оказывается достаточно для автоматического связывания
интерфейсных функций с Web-приложением. Для шага разработки тестовых
сценариев предлагаются дополнительные возможности по описанию его компонентов
в терминах интерфейса Web-приложения. Последний шаг не требует дополнительной
автоматизации, так как все инструменты семейства UniTe K уже предоставляют
развитые средства выполнения тестов и анализа их результатов."
"При использовании дополнительной инструментальной поддержки процесс
разработки тестов для функционального тестирования Web-приложений изменяется,
и состоит из следующих шагов:"
1) создание модели Web-приложения;
2) создание тестового сценария;
3) выполнение тестов и анализ результатов.
"Первый шаг – создание модели Web-приложения – включает в себя определение
интерфейсных функций, описание требований к ним и их связывание с
Webприложением, т.е. объединяет первые три шага технологии UniTe K. Основная
задача"
"этого шага – формализация требований к интерфейсным функциям – в отличие от
второго шага технологии UniTe K может быть частично автоматизирована, а
выделение интерфейсных функций и их связывание с Web-приложением
происходит автоматически. Два последних шага соответствуют двум последним
шагам технологии UniTe K и отличаются только уровнем автоматизации. На
первом шаге должно быть получено описание модели, состоящее из набора
интерфейсных функций и описания требований к ним. На втором шаге нужно
ВЕСТНИК НАУКИ И ОБРАЗОВАНИЯ № 23(101). Часть .1 2020. █ 36 █
получить описание тестов для Web-приложения. При создании тестов
используется подход, предлагаемый технологией UniTe K. Согласно этому
подходу тесты описываются в виде тестовых сценариев, в основе которых лежит"
"алгоритм обхода графа переходов конечного автомата. По сравнению с базовым
подходом UniTe K описанный подход обладает следующими преимуществами."
"Во-первых, уменьшается объем ручного труда за счет автоматизации действий,
предписываемых технологией UniTe K. Во-вторых, снижаются требования к
квалификации пользователей технологии, так как в этом подходе основным
языком взаимодействия с пользователем является не язык программирования (или
его расширение), а язык элементов интерфейса и воздействий на них"
ОСНОВНЫ ТЕСТИРОВАНИЯ СИСТЕМ
"Современный цикл жизни IT-продукта невозможно представить без
тестирования на предрелизном этапе. Целью тестирования является выпуск
качественного продукта, выявление проблем в бизнес-процессах, интеграции
между системами, корректного отображении информации до момента
ФОРУМ МОЛОДЫХ УЧЕНЫХ 11(27) 2018 http://forum-nauka.ru 77
внедрения и эксплуатации."
"Тестирование – мощный инструмент для обнаружения ошибок и
повышения качества программного обеспечения, иногда с его помощью
можно обнаружить дефекты, заложенные на этапах написания технического
задания и разработки архитектуры приложения по ТЗ, что намного лучше,
чем разгребать ошибки в уже проданном программном обеспечении."
"На этапе проектирования релиза, формируются основные требования к
выпускаемому продукту. Эти требования оформляются в функциональные
требования и далее в техническое задание. Основываясь на этих документах,
программист начинает разработку продукта, а тестировщик написание либо
чек-листов, либо полноценных тест-кейсов."
Этап тестирования может начаться как после выхода продукта на
"стадию тестирования, так и идти параллельно с разработкой. Второй вариант
значительно сокращает путь от нахождения ошибки до его исправления, и,
следовательно, удешевляет стоимость исправления ошибок."
"Первоначально разработчик пишет модульные (unit) тесты для
каждого написанного им метода."
"По окончании этапа разработки, новый функционал устанавливается
на тестовую среду, где первоначально запускаются приемочные (smoke)
тесты. В зависимости от их результата делается вывод о работоспособности
продукта. Приемочные тесты должны относиться к высшей категории
критичности и затрагивать основные бизнес-процессы."
"После положительных приемочных тестов начинается этап
регрессионного тестирования. При нахождении дефектов, они заводятся в
баг-трекинге, с указанием проблемы и прикладыванием информации,
ускоряющей понимание причины проблемы. Дефект назначается на
ответственных аналитиков, которые после анализа проблемы назначают его
на разработчика (рис 1)."
ФОРУМ МОЛОДЫХ УЧЕНЫХ 11(27) 2018 http://forum-nauka.ru 78
Рисунок 1. Цикл жизни дефекта на этапе тестирования
"Каждый чек-лист или тест-кейс имеет время прохождения от момента
нахождения тестируемых данных, до момента проверки функциональности."
"Сумма времени прохождения всех кейсов (листов) составляет вес
регрессионной модели. Для небольшого продукта данная цифра имеет
разумную цифру, и без труда может обходиться функциональными
тестированием без участия автоматизации. Если же вес модели переваливает
за рамки выделенного времени тестирования или возрастает риск
невозможности полноценно протестировать, то на помощь может прийти
автоматизация тестирования."
Написанием автотестов, как правило, занимается узконаправленный
"IT-специалист. Разворачивание системы автотестрования включает в себя не
только написание автотестов, но и подборку инструментов, библиотек и
фрейворков для облегчения написания, запуска, и сбора результатов
тестирования."
"Автоматизация тестирования в разы сокращает время проведения
регрессионного тестирования. Но стоит учитывать баланс между временем
написания автотеста и временем функционального тестирования этого кейса."
"Трудозатраты (в человеко-часах) на написание автотеста сопоставляются со
временем прохождения теста вручную и, исходя из этих данных,
высчитывается количество итераций тестирования, после которых будет
приносить чистую пользу. На практике есть случаи, когда написание"
"ФОРУМ МОЛОДЫХ УЧЕНЫХ 11(27) 2018 http://forum-nauka.ru 79
автотеста по бизнес-процессу невозможно. Как, например, тестирование
телефонии, когда оператор должен сделать физические манипуляции вне
экрана приложения."
Преимущества автоматизации тестирования:
"1) Скорость выполнения тест-кейсов может в разы и на порядки
превосходить возможности человека;"
2) Средства автоматизации способны выполнить тест-кейсы, в
"принципе непосильные для человека в силу своей сложности, скорости или
иных факторов;"
"3) Средства автоматизации способны собирать, сохранять,
анализировать, агрегировать и представлять в удобной для восприятия
человеком форме колоссальные объёмы данных;"
"4) Средства автоматизации способны выполнять низкоуровневые
действия с приложением, операционной системой, каналами передачи
данных и т.д."
Риски автоматизации:
"1) Необходимость наличия высококвалифицированного персонала в
силу того факта, что автоматизация — это «проект внутри проекта;"
"2) Разработка и сопровождение как самих автоматизированных тесткейсов, так и всей
необходимой инфраструктуры занимает очень много
времени;"
"3) Автоматизация требует более тщательного планирования и
управления рисками, т. к. в противном случае проекту может быть нанесён
серьёзный;"
"4) Коммерческие средства автоматизации стоят ощутимо дорого, а
имеющиеся бесплатные аналоги не всегда позволяют эффективно решать
поставленные задачи;"
5) Средств автоматизации крайне много, что усложняет проблему
"выбора того или иного средства, затрудняет планирование и определение
стратегии тестирования, может повлечь за собой дополнительные временные
и финансовые затраты, а также необходимость обучения персонала или
найма соответствующих специалистов.[1]"
"Ключевые процессы тестирования протекают в контексте проекта
тестирования, который, в свою очередь, входит в объемлющий проект
разработки, сопровождения, интеграции и приемо-сдаточных испытаний
системы.[2]"
Идеальной картиной считается пирамида тестирования, где
"основанием являются unit-тесты, далее интеграционные, системные и end-toend тесты
(рис. 2)."
ФОРУМ МОЛОДЫХ УЧЕНЫХ 11(27) 2018 http://forum-nauka.ru 80
Рисунок 2. Правильная пирамида тестирования.
Но практика показывает, что:
"1) Чаще всего пирамида оказывается перевернутой и количество E2Eтестов
преобладает над количеством unit-тестов;"
"2) Пирамида становится моделью песочных часов, т.к. при большом
количестве интеграции со сторонними сервисами необходимо больше end-toend 
тестов."
"Полнота тестирования, сложность проекта, зрелость команды, уровень
межотдельной коммуникации, грамотность оперирования входными
данными, умением анализировать выходящий результат – одни из главных
показателей, от которых зависит качество тестирования, а значит и качество
выпускаемого продукта. Что, в свою очередь, сказывается на восприятии
пользователей системы и ведении бизнеса."
АВТОМАТИЗАЦИЯ ТЕСТИРОВАНИЯ ВЕБ-ПРИЛОЖЕНИЙ
"Современный мир разработки программного обеспечения тесно связан с
тестированием, которое"
"используется на всех этапах разработки. Современный комплекс услуг по
тестированию программного"
"обеспечения включает в себя тестирование на стадии проектирования проекта,
тестирование требований,"
тестирование во время разработки и поддержки.
"Одним из видов тестирования является автоматическое тестирование, которое
подразумевает собой создание скриптов, эмулирующих определенные действия."
Кроме того, в определенных областях без
автоматизации тестирования не обойтись.
"Большинство программных продуктов, выпускаемых сегодня, являются веб-
ориентированными"
"приложениями, рассчитанными на работу в интернет-браузере. Эффективность
тестирования подобных"
"приложений отличается в различных компаниях и организациях. В эпоху высокой
интерактивности и"
"взаимодействия в процессе разработки программ, когда многие организации
используют методологию"
"Agile в той или иной форме, автоматизация тестирования часто становится
необходимостью. Под автоматизацией тестирования подразумевается использование
инструментов для того, чтобы многократно"
"выполнять повторяющиеся тесты для тестируемого приложения. Регрессионное
тестирование является"
наиболее типичным примером применения этого подхода.
"Автоматизированное тестирование обладает множеством достоинств, связанных
главным образом"
"с высокой скоростью выполнения тестов и возможностью выполнять однотипные
тесты снова и снова."
"Существует большое количество как коммерческих, так и бесплатных инструментов,
помогающих в разработке автоматизированных тестов [1]."
"Автоматизация – процесс перевода повторяющего ручного труда в автоматический
режим."
"Автоматизированное тестирование программного обеспечения — часть процесса
тестирования на"
"этапе контроля качества в процессе разработки программного обеспечения. Оно
использует программные средства для выполнения тестов и проверки результатов
выполнения, что помогает сократить время"
тестирования и упростить его процесс [2].
"Касательно тестирования веб-приложений с помощью автоматизации понимают
создание тестовых сценариев, эмулирующих действия тестировщика для
повторяющегося ручного труда или создания
необходимых условий для тестирования."
"Исходя из определения можно сделать вывод, что автоматизация облегчает работу
ручных тестировщиков, покрывая некоторые области, но нельзя сказать, что
автоматизация полностью заменяет их."
Она позволяет покрыть достаточную область набора тестов.
Основные области применения автоматизации тестирования:
– функциональное тестирование (регрессия);
– генерация данных для автотестов и ручных тестировщиков;
– тестирование программного кода;
– нагрузочное тестирование;
– объемное тестирование.
© Берегейко О.П., Дубовский А.С., 2016.
"Научные руководители: Теслюк Владимир Николаевич – кандидат физико-
математических наук,"
"доцент, Белорусский государственный университет информатики и радиоэлектроники,
Республика Беларусь."
Вестник магистратуры. 2016. № 12-4(63). ISSN 2223-4047
"_________________________________________________________________________
_________"
40
"В списке выше представлены основные области, в которых применима автоматизация
тестирования при разработке проекта."
"Автоматизация очень затратна в плане человеко-часов, поэтому применяется лишь на
крупных"
"проектах. Окупаемость содержания команды автоматизаторов наступает в среднем
через полтора года"
"после внедрения автоматизации. Именно поэтому для проверки функционала
приложения с помощью"
"автотестов выбираются области, которые позволяют определить пригодность билда
для использования."
"Такими областями являются кейсы, успешное выполнение которых гарантирует
базовую работоспособность приложения."
Существуют три подхода к написанию автотестов:
– тестирование на уровне кода;
– тестирование на уровне бизнес логики приложения;
– тестирование через пользовательский интерфейс.
"В первом случае созданием тестов занимаются разработчики приложения для
проверки определенных базовых функций приложения на всех этапах разработки."
"Считается, что unit-тесты должны присутствовать в любом проекте, так как они
позволяют быстро и легко обнаружить проблему в логике приложения. Создаются
юнит-тесты с помощью стандартных средств языка или сторонних библиотек. Идея
состоит в том, чтобы писать тесты для каждой нетривиальной функции или метода."
"Это позволяет достаточно быстро проверить, не привело ли очередное изменение
кода к регрессии, то есть к появлению"
"ошибок в уже оттестированных местах программы, а также облегчает обнаружение и
устранение таких"
ошибок.
"Под тестированием на уровне бизнес логики приложения понимают создание таких
автотестов,"
"которые работают с приложением через предоставляемые разработчиками
интерфейсы. Как правило, это"
"тестирование приложения путем вызова API команд и проверки корректности их
выполнения."
"Тестирование через пользовательский интерфейс – это тестирование путем эмуляции
действий"
"пользователя при работе с приложением через UI интерфейс. В данном случае
тестовый скрипт выполняет определенные действия и сравнивает с ожидаемым
результатов на UI или в базе данных."
Преимущества автоматизации:
– скорость выполнения тестов быстрее ручной проверки;
"– возможность тестирования областей, которые невозможно протестировать вручную
(нагрузочное тестирование, объемное тестирование);"
"– «независимость» выполнения – автоматические тесты могут выполняться без
наблюдения тестировщика;"
"– в результате выполнения автотестов формируются отчеты, позволяющие наблюдать
за динамикой изменения процента дефектов;"
"– меньшие затраты на поддержку – написанные скрипты периодически требуют
вмешательства, но"
"затраты на их поддержку ниже чем проведение того же объема работ вручную;
– повторяемость – все тесты выполняются однообразно, что гарантирует
независимость результата"
от внешних воздействий.
Недостатки автоматизации:
– большие денежные и временные затраты на разработку фреймворка;
"– пропуск мелких ошибок, так как тесты выполняют только запрограммированные
проверки;"
– стоимость некоторых инструментов для автоматизации слишком высока;
"– необходимость постоянной поддержки фреймворка и используемых в нем библиотек
в актуальном состоянии, настройке окружения."
"Как видно, основным минусом автоматизации тестирования веб-приложений являются
большие"
денежные затраты на создание фреймворка для написания тестов и его поддержка.
"Для начала автоматизации разрабатывается фреймворк на одном из популярных
языков программирования в связке с одной"
"из тестовых библиотек, а также библиотеки для логирования событий. Для
взаимодействий между программным кодом и веб-браузером используется
библиотека Selenium Webdriver в связке с драйверами
для конкретного браузера."
"Создаваемый фреймворк должен отвечать следующим требованиям:
- генерация удобночитаемых отчетов"
- возможность выполнения запросов к базе данных
"- возможность гибкой конфигурации окружения для выполнения тестов (браузер, url 
приложения,"
локализации)
- возможность запуска тестов на CI системе
- возможность работы с файлами
- реализация data managed тестов
ISSN 2223-4047 Вестник магистратуры. 2016. № 12-4(63)
"_________________________________________________________________________
_________"
41
- возможность работы с FTP
- легкая расширяемость средствами языка программирования
\
Критерии доступности веб-интерфейсов
"Первое, что видит пользователь при взаимодействии с веб-продуктом –
пользовательский интерфейс. Это понятие включает в себя, например, дизайн
элементов, цветовое оформление, наличие или отсутствие картинок. Однако,
не все разработчики уделяют должное время наиболее главному требованию
любого пользовательского интерфейса – его доступности. Например:"
1. Как быстро система реагирует на запросы пользователя?
2. Различимы ли основные элементы (текст, кнопки)?
3. Насколько устают глаза при прочтении текста?
Целью статьи является составление конкретных критериев доступности
"для фокусировки на них при создании нового пользовательского интерфейса или для
оценки уже разработанного."
Критерии доступности пользовательского интерфейса
Время загрузки
"Скорость загрузки – один из первых параметров, которые вспоминают
люди, когда их просят оценить свой опыт взаимодействия с определ нным
веб-сайтом [2]. Проблема восприятия в том, что обычному человеку время
загрузки кажется на 15 % дольше, чем есть на самом деле. Но самое интересное, что
когда они будут делиться своим опытом с другими, они назовут время загрузки на 35 
% больше реального – нормальная человеческая склонность преувеличивать [3]."
"Jakob Nielsen, основываясь на сорокалетних исследованиях, в своей статье «Website 
Response Times» [4] дает следующую классификацию:"
0,1 секунды дает иллюзию мгновенного ответа.
1 секунда сохраняет ощущение нормального взаимодействия.
Аспирант кафедры Математического моделирования.
Системный анализ, управление и обработка информации 7
Задержка в 1-10 секунд воспринимается как медленная, неприятная, но терпимая.
После 10 секунд, пользователь отвлекается или завершает работу.
"Помимо оптимизации программного кода, существуют способы снизить
негативное восприятие в случае большого времени загрузки:"
Прогрессивный рендеринг страницы – элементы загружаются последовательно – с
первого, который заметит пользователь.
Индикаторы прогресса – информация о текущем состоянии запроса
"(«Сохранение», «Отправка» и т.д.), но они не должны указывать
пользователям, что им делать («Ожидайте»). Показывать индикаторы стоит, если
задержка превышает 5 секунд."
Белый цвет в дизайне. Такие страницы кажутся быстрее, но и требования к скорости
для них завышены.
"Не указывать время загрузки – автоматически рассчитанное время,
не соответствующее действительности – причина отвлечения внимания или
завершения работы."
"Анимация загрузки конкретных блоков пользовательского интерфейса вместо
индикатора прогресса – только в том случае, если анимация загрузки выполнена
качественно."
Оптический контраст
"Контраст между фоном и цветом элементов (текст, иконки и т.д.), т.е. различимость
предмета наблюдения от окружающего его фона – оптический"
"контраст. Визуальное восприятие объекта возможно только при наличии контраста
между объектом и фоном. Данное утверждение особенно актуально"
"для пользователей, страдающих дальтонизмом или работающих не в идеальных
условиях (плохой монитор, отражение окон, блики от солнца)."
"Контраст K определяется отношением разности яркостей объекта наблюдения B1 и
фона B2 к одной из этих яркостей:"
K = (B1 – B2) / B1
"Когда объект имеет абсолютный контраст, то K = 1, при его отсутствии
(объект сливается с фоном) K = 0 [5]. Величины контраста:"
до 20 % – малый контраст.
до 50 % – достаточный контраст.
выше 50 % – высокий контраст.
"Более качественный алгоритм, принятый W3C и входящий в Web Content Accessibility 
Guidelines (WCAG 2.0):"
Коэффициент контраста:
C = (L1 + 0.05) / (L2 + 0.05)
"где L1 – относительная яркость самого светлого оттенка,
L2 – самого темного."
8 ПЕРСПЕКТИВЫ РАЗВИТИЯ ИНФОРМАЦИОННЫХ ТЕХНОЛОГИЙ
Относительная яркость (для цветового пространства sRGB):
L = 0.2126 * R + 0.7152 * G + 0.0722 * B
R, G и B определены как:
"if RsRGB  0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4
if GsRGB 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4
if BsRGB  0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4
RsRGB, GsRGB, and BsRGB определены как:"
RsRGB = R8bit/255, GsRGB = G8bit/255, BsRGB = B8bit/255
Значения коэффициента контраста C (максимальный 21:1):
7:1 и выше – высший уровень соответствия WCAG 2.0.
4.5:1 и выше – достаточный уровень.
Ниже 4.5:1 – недостаточный уровень.
"Чтобы оценить контраст приложения, его необходимо увидеть в «чернобелом»
варианте. Если все элементы дизайна хорошо видны, а текст легко
читаемый, значит выбран правильный контраст, и наоборот [6]."
"Для более качественной проверки контраста, можно воспользоваться
ПО сравнения контрастности на основе сложных."
Шрифт
"Понятие «Шрифт» включает в себя множество аспектов. Однако, в плане
доступности, наиболее важными является правильная комбинация количества
слов в строке и длины строки. Сложности заключаются в следующем:
1. экраны мониторов и ноутбуков, а также подключаемых проекторов,
плазменных панелей и т.д., имеют разную плотность пикселей (количество пикселей,
которое помещается в один линейный дюйм) [7];"
2. расстояние от экрана до глаз пользователя может быть разным.
"И если первый параметр можно получить, то для определения второго
необходимо специальное оборудование, поэтому будем измерять длину
строки именно в сантиметрах, а не в пикселях."
"С конца 19-го столетия было проведено много исследований по оптимальной ширине
линии текста, но идеального решения так и не появилось."
Если собрать результаты исследований, то можно сделать выводы [8] (см.
табл. 1).
"Широкий параграф да т лучший результат в скорости чтения, но при
этом глаза устают быстрее. Дело в том, что после прочтения одной строки,
глазу необходимо перестраиваться на следующую строку. А при длинной
строке, глаз должен преодолеть большее расстояние, из-за чего ему сложнее
найти следующую строку."
Системный анализ, управление и обработка информации 9
Таблица 1
Исследователь Год Оптимальная
длина строки
Примечание
Вебер 1881 10 см Максимальная длина 15 см.
Джавель 1881 9 см
Тинкер и Паттерсон
"1929 7,5-9 см Использовался текст размером 10 пунктов. Параграфы
длиной 18,5см читались медленнее."
Кон 1983 9 см Максимальная длина 10 см
Дачники и Колерс
1983 18,7 см Строка длиной 18,7 см читалась быстрее на 28 % чем
1/3 длины монитора – 6,2 см.
Дайсон и Киппинг
1998 18,2 см
"Использовался текст размером 12 пунктов. Тесты показали, что скорость чтения
увеличивается вместе с увеличением количества символов в строке. Несмотря на
то, что текст в одной колонке читался быстрее, пользователи предпочитали 3-х
колоночный формат."
Янгмэн и Шарф 1999 20 см
Использовался текст размером 12 пунктов. 20 см были
оптимальны для скорости чтения, но пользователи предпочитали длину 10-12,5 см.
Бернард, Фернандес и Хал 2002 24,5 см
Использовался текст размером 12 пунктов. Данный тест
"не выявил особой разницы в скорости чтения между тремя размерами – 24,5 см, 14,5 
см и 8,5 см. Взрослые пользователи вс же выбрали 2 более коротких длины."
"В итоге, оптимальная длина строки: 9-14 сантиметров. Допустима длина от 7,5 до 20 
сантиметров, другие значения будут приводить к слишком
быстрой усталости глаз."
Количество слов в строке
"Роберт Брингхерст в книге «Основы стиля в типографике» [9] говорит,
что для одноколонного набора мелким кеглем текстовой антиквой на английском языке
оптимальное значение длины строки составляет от 45 до 75"
"знаков. 66 знаков – идеальный вариант. Для многоколонного набора – 40-50
знаков. Эти же данные подтверждаются и в других исследованиях [20]."
Семейство шрифта
"Обычно выбор стоит между шрифтами с засечками (хвостики на буквах
снизу и сверху) и без (не имеющие хвостиков на буквах). Говоря об удобстве
чтения, противопоставление шрифта с засечками и без засечек вылилось в
целый комплекс исследований, состоящих из слабых противоборствующих
утверждений. Одно за другим, исследования проводились лишь для того,
чтобы приходить к одному и тому же выводу: «нет различий» [12]. Оба этих
начертания будут хорошо смотреться, если выбрать размер основного текста больше
12 пикселей. Шрифт с засечками размером менее 12 пикселей
смотрится размыто [13]. В итоге, для удобства чтения большее значение
имеет конкретное семейство шрифта, нежели наличие у него засечек, однако,
количество современных семейств значительно усложняет нахождение
10 ПЕРСПЕКТИВЫ РАЗВИТИЯ ИНФОРМАЦИОННЫХ ТЕХНОЛОГИЙ"
"лучших. Кроме того, в разных ситуациях, разные семейства могут быть более или
менее уместны. Приведем несколько обоснованных фактов, которые
могут помочь с выбором семейства шрифта:"
шрифт с засечками имеет более авторитарный оттенок, в то время
как шрифт без засечек кажется более демократичным.
Comics Sans доказал свою полную некомпетентность в передаче
важной информации [14].
по результатам исследования, Baskerville и Computer Modern являются лучшими
шрифтами в вопросе доверия к содержимому текста
"(среди шести претендентов, среди них Georgia, Trebuchet, Helvetica,
Comic Sans) [15]."
среди 52 очерков студента, 11 были написаны Times New Roman, 18 –
"Trebuchet MS, а остальные 23 – Georgia. Times New Roman очерки
заработали в среднем A- (5 с минусом), Trebuchet – только B- (4 с
минусом), Georgia – только твердые A (5)."
в приложениях, в отличие от печатной продукции, чаще используются шрифты без
"засечек – на экранах с низким разрешением форма засечки плохо воспроизводится
[16]."
самый безопасный шрифт для приложений – Verdana (по версии
ученых из Лаборатории зрительной эргономики) [17].
Заключение
"Таким образом, мы выявили критерии доступности, за которыми необходимо следить
и измерять при разработке нового или оценке эффективности существующего веб-
продукта. Они сыграют большую роль в формировании положительного восприятия у
пользователей, а значит обеспечат большую посещаемость и большее внимание"
Оптимизация приложений для дальтоников
"Дальтонизм, или цветовая слепота, — это нарушение восприятия цветов, вызванное
расстройством цветного зрения. Следует отметить, что это одно из распространенных
нарушений зрения: около 8 % мужчин и 1 % женщин
имеют дальтонизм какой-либо степени [1]. Это означает,
что почти каждый десятый человек, пользующийся тем
или иным программным продуктом (приложением) будет
иметь трудности с правильным пониманием (обработкой)
визуальных данных. Если работа приложения зависит от
восприятия цвета пользователем, то это может сказаться"
"на пользовательском опыте, пусть даже и одного из десяти человек, т. к. именно
сбалансированная инфографика"
"предполагает грамотное использование визуального представления (например,
диаграмм, графиков, иконок, изображений), соответствующий выбор цветов и
шрифтов и"
др.
"Так как же нам настроить приложение? Как исправить проблемы? Как можно
предотвратить эти проблемы?"
ПРЕДСТАВЛЕНИЕ ЦВЕТА В ЭВМ
При построении модели цвета в ЭВМ опираются в
"первую очередь на то, как работает человеческий глаз. Его
можно представить как оптический прибор со своим"
«объективом» — хрусталиком — и светочувствительным
"элементом — сетчаткой. С помощью глаза можно различить не все электромагнитные
волны, а только те, длина"
"которых находится в диапазоне 400...700 нм. Хрусталик
проецирует видимое изображение на сетчатку, покрытую
светочувствительными рецепторами — палочками и колбочками. Строение глаза
можно увидеть на рисунке 1."
Рис. 1. Строение человеческого глаза
Intellectual Technologies on Transport. 2019. No 2
Интеллектуальные технологии на транспорте. 2019. № 2 26
"Рецепторы содержат несколько типов цветочувствительных пигментов белкового
происхождения. Так,"
например, в колбочках содержится йодопсин (общее
"название зрительных пигментов, содержащихся в колбочках сетчатки). В состав
йодопсина входят три пигмента,"
"один из них — хлоролаб, специфический фоточувствительный пигмент. Хлоролаб
получил свое название в связи со специфическим спектром поглощения в
видимойобласти спектра, с максимальной чувствительностью к
области, соответствующей желто-зеленой части спектра"
"(максимум около 534–545 нм). Второй — эритролаб, максимальная чувствительность к
области, соответствующей"
"желто-красной части спектра (около 564–580 нм). Третий
пигмент — цианолаб, с максимальной чувствительностью
к сине-фиолетовой части спектра (420–440 нм) [2]."
"Палочки, расположенные в основном на краю сетчатки, обладают крайне высокой
светочувствительностью, но"
"при этом слабо различают длину волны. Колбочки, расположенные в основном в
центре сетчатки, обладают низкой"
светочувствительностью и узким диапазоном воспринимаемых длин волн (рис. 2).
Рис. 2. Чувствительность колбочек к длинам волн
Таким образом, цвет можно задавать как сумму трех
базовых цветов — красного, зеленого и синего. Такая модель получила название RGB.
"Эту модель можно представить в виде куба (рис. 3), в котором каждый цвет
представляется трехмерным вектором, компоненты которого
определяют доли красного, зеленого и синего цветов,
смешивая которые можно получить все остальные цвета и"
"оттенки. В этой модели черный цвет представлен вектором (0, 0, 0), белый цвет — (1, 
1, 1) [3]."
Рис. 3. Куб представления цвета в RGB
"Несмотря на всеобщее использование модели RGB,
она не является стандартом. Стандартом является модель"
CIE XYZ, в которой каждый видимый человеком цвет
"однозначно представляется с помощью тройки неотрицательных чисел (X, Y, Z). Для
получения этих чисел"
используются формулы
, ,
	,	1
где , , — определенные стандартом базовые функции (рис. 4).		
Рис. 4. График функций , , 		
В представленных моделях все три координаты несут в		
"себе информацию о цвете. Тем не менее существуют модели с явным делением
координат на яркость и хроматические координаты. Одна из таких моделей – Yxy, 
которая"		
определяется следующими формулами:		
, 		
	. (2)	
Хроматические координаты x и y полностью определяют цвет без учета его яркости.		
Рис. 5. Хроматическая диаграмма		
Intellectual Technologies on Transport. 2019. No 2		
Интеллектуальные технологии на транспорте. 2019. № 2 27		
"На рисунке 5 представлена хроматическая диаграмма,
которая содержит хроматические координаты всех видимых человеком цветов [4]. На
этом изображении дуга соответствует чистым спектральным цветам, а отрезок —
цветам, получающимся при смешивании красного и синего цветов."		
"Если взять два цвета, то им будут соответствовать две
точки на диаграмме. Все множество цветов, получаемое
смешиванием этих двух цветов, будет выражено отрезком
между этими двумя точками. Соответственно при трех
цветах множество будет выражено треугольником."		
"Вывод: никакое конечное количество цветов не может
дать при смешивании все видимые человеком цвета."		
Несмотря на то, что цветовое пространство CIE XYZ		
"является стандартом, на практике почти для всех светоизлучающих устройств
используют модель RGB, поскольку"		
"она проста и удобна; даже несмотря на то, что она не может дать все видимые цвета,
ее почти всегда бывает достаточно."		
Существует еще несколько моделей представления:		
"CMY (Cyan, Magenta, Yellow) — является обратной модели RGB и используется при
печати на бумаге."		
"HSV (Hue, Saturation, Value) — выявляет цвет по
яркости, насыщенности и тону."		
"HSL (Hue, Saturation, Lightness) — цветовая модель, в которой цветовыми
координатами являются тон,"		
насыщенность и светлота [5].		
ДАЛЬТОНИЗМ		
"Дальтонизм (цветовая слепота) — наследственная, реже приобретенная особенность
зрения, выражающаяся в"		
неспособности различать один или несколько цветов и		
"оттенков. Названа в честь Джона Дальтона, который впервые, в 1794 году, дал
широкодоступное описание одного"		
из видов цветовой слепоты на основании собственных		
ощущений.
Рис. 6. Виды дальтонизма
"Люди с нормальным цветным зрением имеют в рецепторах все три пигмента
(эритролаб, хлоролаб и цианолаб)"
в необходимом количестве. Их называют трихроматами
(от слова хрома — цвет).
Существует несколько типов дальтонизма:
"монохроматизм, имеется либо один пигмент, либо
полное их отсутствие;"
"дихроматизм, имеются два пигмента, третий полностью отсутствует;
аномальный трихроматизм, имеются все три пигмента, но смещен пик
чувствительности для одного из"
них, в результате чего получается меньший спектр цветов.
"Дихроматы и аномальные трихроматы также делятся
на три типа (рис. 6):"
"тританопия — отсутствие/неисправность колбочек
с цианолабом (синий);"
"дейтеранопия — отсутствие/неисправность колбочек с хлоролабом (зеленый);
протанопия — отсутствие/неисправность колбочек
с эритролабом (красный) [6]."
"В результате того, что многие цвета являются сочетаниями других цветов, можно
заметить, что дальтонизм"
влияет на весь цветовой спектр.
"На рисунке 7 представлены хроматические диаграммы
с линиями спутывания. Все цвета в направлении линий
являются трудноразличимыми. Место, где они сходятся,
называется копунктуальной точкой. Для трех разных типов дальтонизма — три разные
копунктуальные точки."
"Рис. 7. Хроматические диаграммы с линиями спутывания
для разных видов дальтонизма"
АДАПТАЦИЯ ПРИЛОЖЕНИЙ ДЛЯ ДАЛЬТОНИКОВ
"Один из самых простых способов адаптировать приложение для дальтоников — 
использовать символы, текст"
или различные изображения вкупе с цветом. Примером
"такого подхода может служить приложение Trello — органайзер, реализованный как
веб-сервис [7]. На рисунке 8"
"видно, как эта программа меняет вкладки в зависимости
от включенного режима для дальтоников."
Intellectual Technologies on Transport. 2019. No 2
Интеллектуальные технологии на транспорте. 2019. № 2 28
Рис. 8. Интерфейс приложения Trello
"Следующий пример — игра Two Dots, которая основана на соединении точек одного
цвета [8]. С нарушением"
"цветоощущения в эту игру совершенно невозможно играть, тем не менее
разработчики реализовали режим, который добавляет еще один признак для
классификации в"
виде рисунка или символа на цвете (рис. 9).
Рис. 9. Интерфейс игры Two Dots
"Еще одним способом обеспечения доступности приложения для дальтоников является
использование особых"
"палитр цветов. На рисунке 10 представлена палитра из 15
цветов, сделанная специально для случаев дейтеранопии."
Она сделана с помощью модели представления HSL, а не
"RGB. HSL особенно хорошо подходит для создания палитр для дальтоников, так как
они больше ориентируются"
на яркость (Luminosity), чем на сам цвет (Hue).
Рис. 10. Палитра цветов для дейтеранопии
Данная палитра хороша для дейтеранопов, но не подходит для нормального зрения.
Обратная ситуация будет,
если строить палитру только для обычного зрения.
"Чтобы сделать приложение доступным для всех типов
цветоощущения, необходимо создать разные палитры для
каждого из них."
"Множество компаний используют этот способ. Например, в Android (рис. 11) и iOS уже
в самой ОС встроены"
средства для изменения палитры цветов [9].
Рис. 11. Режимы для дальтоников в ОС Android
"Одной из самых удачных попыток имплементации
данного способа является видеоигра Destiny 2 [10]. В игре,
где цвет играет очень важную роль, разработчики точно"
"определили, какие цвета необходимы для каждой палитры, тем самым обеспечив
одинаковый опыт для всех пользователей. На рисунке 12 можно увидеть окно
настройки"
палитры и примеры цветов.
Рис. 12. Настройки режима для дальтоников в Destiny 2
"Для проверки выбранных решений можно воспользоваться специальными
симуляторами дальтонизма, которые активируют фильтр, имитирующий зрение
человека с"
"проблемным цветоощущением. С помощью этих фильтров можно проверить
правильность выбранных цветов."
Еще одним способом является просмотр всего дизайна
"в монохроме. Этот тест очень полезен для выявления сливающихся оттенков, так как
он позволит увидеть, какие"
цвета одинаковой теплоты имеют схожие оттенки.
ЗАКЛЮЧЕНИЕ
"Очень важно при создании приложения сделать его доступным для людей с
отклонениями, которые при нормальных условиях не смогли бы им пользоваться"
"СОВРЕМЕННЫЕ ФРЕЙМВОРКИ ДЛЯ РАЗРАБОТКИ ИНФОРМАЦИОННЫХ СИСТЕМ
НА ПРИМЕРЕ VUE "
"Фреймворки (Frameworks) представляют собой платформы вебразработки, которыми
руководствуются разработчики при создании вебприложений высокого качества,
используя один язык программирования."
"Важное значение при изучении компонентов поля веб-приложений
для разработчиков играют их рамки, общей целью которых является
содействие развитию. Таким образом, результат достижения данной цели
и является отличительной чертой. В последние годы была отмечена
высокая потребность во фронтенд-фреймворках, ориентированных на
ФОРУМ МОЛОДЫХ УЧЕНЫХ 5(45) 2020 http://forum-nauka.ru 302
веб-разработку. Для построения веб-приложения существует множество
фреймворков. Казалось бы, что выбор фреймворка– это довольно простая
задача, но реализовать его в целом приложении и тем более в ИС сложно."
"Рассмотрим платформу Vue, разработанную Evan You, бывшим
сотрудником Google, которая является наиболее быстро растущим
JavaScript-фреймворком. Он описывается как перцептивный, быстрый
MVVM (Model–View–ViewModel), предназначенный для создания
интерактивных интерфейсов. Первый публичный релиз данного фреймворка
состоялся в феврале 2014 года. Платформа Vue.js – это прогрессивная
структура, которая может быть использована для создания
пользовательских интерфейсов. В отличие от других монолитных каркасов,
Vue спроектирован с нуля, что делает возможным его постепенное
применение. Его основная библиотека ориентирована только на
определенный слой представления, и ее легко сочетать и интегрировать с
другими библиотеками или уже существующими проектами."
"В то же время, Vue идеально подходит для «накачки» сложных
одностраничных приложений при условии использования в сочетании с
современными инструментами и вспомогательными библиотеками."
"Многие компании, например китайские, такие как: Alibaba, Baidu,
Xiaomi, Sina Weibo и др. широко используют Vue. Он входит в ядро Laravel
и PageKit. Не так давно GitLab, система управления репозиториями, тоже
перешла на Vue.js."
"В конце сентября 2016года вышел в релиз Vue.js 2.0. Данная
платформа обладает еще большими возможностями. Она была создана с
упором на производительность: используется виртуальный DOM,
поддерживается серверный рендеринг, возможность использовать JSX и т.д."
"Хотя сейчас данный фрейворк поддерживается только сообществом, но даже
на уровне продуктов таких гигантов, как Google и Facebook (Angular 5-6 и
React 15) выглядит достойно и постепенно догоняет их по популярности."
Основными концепциями Vue являются:
Конструктор;
Компоненты;
Директивы;
Переходы.
"Работа с Vue.js начинается с создания нового инстанса new Vue: el –
элемент, за которым следит Vue. В template выбран (либо прописан
инлайново) элемент, куда Vue будет рендерить. В data хранится текущее
состояние инстанса, а метод computed предоставляет нам вычисляемые
свойства."
"В methods можно выделить следующие кастомные методы и методы
жизненного цикла Vue:"
beforeCreate — смотрит данные и инициализирует события;
"created — смотрит, есть ли el или template. Если есть, то
рендерит в них, если нет, то ищет метод render;"
"ФОРУМ МОЛОДЫХ УЧЕНЫХ 5(45) 2020 http://forum-nauka.ru 303
beforeMount — создает vm.$el и заменяет им el;
mounted — элемент отрендерен."
При изменении состояния:
"beforeUpdate — снова рендерит VDOM и сравнивает с
реальным DOM-ом, применяет изменения;
updated — изменения отрендерены;"
"beforeDestroy — полный демонтаж watchers, внутренних
компонентов и слушателей событий;"
"destroyed — вызывается, когда выполнение операции
останавливается."
Графически работу с Vue можно представить на рисунке 1.
Рис. 1 Схема работы на платформе Vue
"Директивами в этом фреймворке являются специальные атрибуты
для добавления элементам html дополнительной функциональности."
Рассмотрим некоторые встроенные директивы:
"V-bind – динамически связывается с одним или несколькими
атрибутами."
"v-cloak – прячет «усатые» выражения, пока не подтянулись
данные"
"v-if – условие для рендера элемента
v-else – обозначает “else блок” для v-if
v-for – циклично проходит массив объектов
v-model – связывает состояние с input элементом
v-on – связывает слушателя события с элементом"
"ФОРУМ МОЛОДЫХ УЧЕНЫХ 5(45) 2020 http://forum-nauka.ru 304
v-once – рендерит элемент только вначале и больше не следит
за ним"
"v-pre – не компилирует элемент и его дочерние элементы
v-show – переключает видимость элемента, изменяя свойство
CSS display"
v-text– обновляет textContent элемента.
"Все Vue-директивы имеют префикс “v-”. В директиву передается
какое-то значение состояния, а в качестве аргументов могут быть
атрибуты html или события."
"Компоненты помогают расширить основные html элементы и
внедрить переиспользуемый код. По сути, компоненты – это повторно
используемые части UI."
"На этапе проектирования мы разбиваем наше приложение на
независимые части и получаем древовидную структуру компонентов как
это представлено на рисунке 2."
Рис.2 Структура компонентов в Vue.js
"В Vue.js нет особых требований к именам компонентов, но лучше
придерживаться правил W3C насчет кастомных компонентов, то есть
буквы нижнего регистра и разделения через дефис."
Коммуникация между vue-компонентами осуществляется по
"принципу “Props in, Events out”. То есть от родительского элемента к
дочернему информация передается через пропсы, а обратно – вызываются
события."
"Также во Vue.js есть так называемые однофайловые компоненты. При
создании файла с расширением .vue туда вписывают стили, шаблон и
логику. Причем писать можно на любом удобном препроцессоре (SASS,
Stylus, PostCSS, Jade, ...) и языке, компилирующимся в JS (CoffeeScript,
TypeScript)."
"Vue предоставляет различные способы применения анимационных
эффектов, когда элементы отрисованы, обновлены или удалены из DOM."
Они включают в себя инструменты для:
"ФОРУМ МОЛОДЫХ УЧЕНЫХ 5(45) 2020 http://forum-nauka.ru 305
автоматического применения классов для CSS-переходов и
анимаций"
"интеграции сторонних библиотек для CSS-анимаций, таких
как Animate.css"
"использования JavaScript для манипуляции DOM-ом
интеграции сторонних JavaScript библиотек для анимаций,
таких как Velocity.js"
"На платформе реализована возможность управления состоянием через
паттерн Vue.js."
"Этот паттерн является библиотекой управления состоянием для
приложений на Vue.js. Он предоставляет централизованное общее
состояние для всех компонентов в приложении и правила,
обеспечивающие предсказуемое изменение состояния."
"На рисунке 3 представлено приложение на Vue+Vuex со
следующими частями:"
"Состояние (State), которое является единственным источником
данных для компонентов."
"Vue-компоненты (Vue-components), которые по сути являются
лишь декларативным отображением состояния."
"Действия (Actions), которые отлавливают событие, которое
произошло, собирают данные с внешних API и запускают нужные
мутации."
"Мутации (Mutations) — единственная часть, которая может
изменять состояние и, получив данные от Actions, применяет их на
состоянии."
Рис. 3 Библиотека управления на Vue+Vuex
"Таким образом, как было показано на примере проведенного анализа
фреймворка, используемого для создания современных ИС и КИС, выбор
платформы для разработчиков должен основываться, прежде всего, на
понимании общих принципов взаимодействия в процессе организации
профессионального подхода к соответствующей разработке."
РАЗРАБОТКА ВЕБ-СЕРВИСА ДЛЯ УПРАВЛЕНИЯ ПРОЕКТАМИ
На сегодняшний день IT-специалисты реализуют множество
"проектов: коммерческие (стартапы, внутрикорпоративные стартапы и
«Научные исследования и инновации»"
97
"т.д.), учебные (научные исследования, курсовые работы, выпускные
квалификационные работы и т.д.), некоммерческие проекты."
"Существуют различные решения для координации работы,
демонстрации развития проекта, поиска участников в команду, поиска
инвесторов для коммерческих проектов. Несмотря на то, что эти
потребности связаны между собой, представляет сложность найти
единое решение, удовлетворяющее эти потребности внутри одной
общей системы."
"Разрабатываемое веб-приложение должно стать единой
площадкой для управления проектами, совместной работой команды,
ведения истории и портфолио, поиска научного руководителя, поиска
помощи среди других разработчиков и для получения инвестиций."
"Данное приложение является PWA (Progressive Web Application),
что означает стабильную и удобную работу на любом устройстве. Для
совместной работы большая часть интерактивных элементов
управления управляется через WebSocket и покажет реактивную
реакцию на устройстве любого пользователя."
"Backend – серверная часть приложения, в него входят базы
данных, хранящие данные для функционирования проекта, API,
генерация токенов, шифрование и дешифрование информации и
многие другие необходимые программные компоненты."
"Для реализации backend части приложения был использован вебфреймворк Django 
высокоуровневого языка Python, что на данный"
"момент является одним из наиболее частых решений для разработки
веб-приложений. С помощью данных инструментов было реализовано
REST API. REST (Representational State Transfer) – архитектурный
стиль передачи репрезентативного состояния для распределенных
гипермедийных систем. REST API предполагает такую архитектуру
веб-приложения, когда клиент передает на сервер HTTP-запрос,
хранящий в себе информацию о данных, которые сервер должен"
XI Международная научно-практическая конференция
98
"вернуть. Данные передаются с помощью формата JSON, наиболее
часто используемого на данный момент способа передачи данных
между клиентом и сервером в WEB-приложении. В зависимости от
типа запроса, сервер возвращает строку формата JSON с
необходимыми данными или добавляет новые данные в базу данных."
"Также для реализации WebSocket, необходимого для управления
реактивными элементами управления используется высокоуровневый
язык GO."
"Frontend – клиентская часть приложения, включает в себя
разработку пользовательского интерфейса. Эта часть предполагает
непосредственно отображение HTML-страниц, отправку запросов со
стороны клиента на сервер для получения необходимых данных или
внесения новых данных в базу данных на сервере."
"Для реализации frontend части приложения был использован
фреймворк Nuxt языка JavaScript, который является одним из наиболее
актуальных решений для разработки веб-приложений. Для
отображения HTML-страниц была использован UI фреймворк Vuetify,
следующий концепции Material Design."
"Для хранения данных использована СУБД PostgreSQL, одна из
наиболее современных систем управления базами данных,
поддерживающая язык SQL."
"Выбор средств программной реализации представляет собой
сложную задачу и является одним из важных этапов при разработке
приложения. Выбранные программные продукты должны
удовлетворять как текущим, так и будущим потребностям
пользователей приложения, при этом следует учитывать финансовые
затраты на приобретение необходимого оборудования, самой системы,
разработку необходимого программного обеспечения на её основе, а
также обучение персонала. Выбранные для реализации проекта
«Научные исследования и инновации»"
99
"технологии являются одними из наиболее современных и актуальных,
позволяют реализовать весь необходимый функционал."
"Доступ к функциям сервиса имеют только авторизованные
пользователи. После авторизации пользователь попадает в раздел
личного кабинета, где он имеет возможность редактировать
собственную информацию, а также управлять своими проектами."
"По степени открытости проекты в сервисе могут быть открытыми
для всех участников или приватными, когда проект видят только его
автор и приглашенные им исполнители."
По отношению к каждому пользователю проекты могут быть
"двух типов: собственные (созданные самостоятельно пользователем) и
сторонние (созданные другими участниками, к которым
присоединился данный пользователь). Первые создаются в личном
кабинете через форму создания проекта. Во втором случае
пользователь может присоединиться к любому проекту других
пользователей, находящемуся в открытом доступе. Для этого нужно
найти проект через страницу поиска, выбрать соответствующую роль в
проекте и ждать одобрения от автора. В проектах доступны различные
роли: автор, непосредственный участник проекта, сторонний участник,
научный руководитель (для проектов, связанных с научной
деятельностью), ментор, эксперт, инвестор и другие."
"В карте проекта пользователь сервиса может изучить его
основные характеристики: общая информация, статус, участники,
автор, активности, комментарии к этапам проекта и комментарии к
активностям. В отношении открытых проектов любой пользователь
веб-сервиса может помочь развитию проекта, создав активность,
добавить свое мнение через комментарии, предложить помощь
команде проекта."
"Управляя проектом, автор может развивать его, вести
совместные работы с использованием канбана и календаря,"
XI Международная научно-практическая конференция
100
"фиксировать всю активность участников. Развивая проект,
пользователь проводит его через все этапы жизненного цикла."
"При реализации проектов в сфере науки данный веб-сервис
поможет пользователю найти научного руководителя, наставника и т.д."
"Ведя в сервисе стартап, пользователь имеет возможность довести его
до этапа представления инвесторам, а заинтересованные инвесторы
могут найти подходящие им стартапы."
"Разработанное с помощью современных средств и технологий
веб-приложение благодаря удобному пользовательскому интерфейсу
позволяет пользователю совместно с другими участниками развивать
свой проект с возможностью демонстрации прогресса другим
пользователям, вести своё портфолио, искать среди других
пользователей возможных соучастников, привлекать экспертную
помощь, привлекать инвестирование."
"Таким образом, данный веб-сервис способен стать мощным
инструментом организации процесса управления проектами самой
различной направленности, площадкой для общения
единомышленников, средством привлечения инвесторов и массового
информирования о научных и технических разработках."
"Ознакомительная версия сервиса размещена в сети интернет по адресу
https://cyber-garden.admire.social/"
"РАЗРАБОТКА ВИЗУАЛЬНОЙ ИНТЕРАКТИВНОЙ ОТЧЕТНОСТИ ДЛЯ РУКОВОДСТВА
СТРАХОВОЙ КОМПАНИЕЙ"
"Визуализация отчетности – представление информации о деятельности компании за
определённый"
период в виде графического изображения для максимального удобства её восприятия.
Визуализация отчетов –
это уже не вопрос творчества, а вопрос логики, понимания структуры данных.
Визуализация данных в компании
"становится отдельной задачей. Её основная роль – экономия времени при обработке
массивов больших данных."
"Для качественного визуального отчета о деятельности фирмы необходим ряд условий:
— точно определить цель создания отчета;"
— выявить и изучить целевую аудиторию отчета;
— понимать, какие выводы могут сделать пользователи отчета после его анализа.
"В условиях тенденций рынка и растущей актуальности визуализации данных в бизнесе
интерактивная"
"инфографика представлена аналитическими панелями или, как их часто называют,
дашбордами."
"Стивен Фью, мировой эксперт в области бизнес-процессов и работы с информацией, в
статье «Dashboard"
Вопросы студенческой науки Выпуск №4 (68), апрель 2022
364
"Confusion» определяет дашборд как «визуальное отображение наиболее важной
информации, необходимой для"
"достижения одной или нескольких целей, собранной и размещённой на одном экране
так, чтобы вся информация"
отслеживалась одним взглядом» [5].
"Приведём собственное определение дашборда: дашборд – главный инструмент
визуальной аналитики,"
"позволяющий проводить качественный анализ ключевых показателей эффективности
бизнеса – KPI."
"Аналитические дашборды используются компаниями во всех направлениях
деятельности: от управления"
"денежными средствами до управления рисками. Так, результаты исследования,
проведенного ООО «КПМГ» в"
"2019 году, показывают, что процент использования аналитических дашбордов как
инструмента цифровых"
"технологий в российских компаниях составил 29%, а как инструмента ведения
отчетности – 13% [7]."
"Современный отчет в виде дашборда для управленческих кадров обеспечивает
поддержку принятия"
"решений и предоставляет актуальную, полную и структурированную информацию по
наиважнейшим вопросам:"
"— резюме для руководства (какие выводы можно сделать по всем разделам отчета);
— вопросы для обсуждения (какие приоритетные задачи стоят перед компанией);
— обзор основных результатов (каковы показатели деятельности компании);"
"— анализ чувствительности (как компания реагирует на изменение факторов внешней
среды);"
— обзор рынка (какие существуют рыночные тенденции) и т.д.
Шаги для формирования качественного дашборда:
1. Аккумулирование данных.
2. Подготовка данных к анализу.
3. Изучение данных (обработка данных, формулирование закономерностей).
4. Фильтрация данных.
5. Структурирование данных (формирование макета дашборда).
"6. Визуализация данных (подбор способа презентации информации с учетом целевой
аудитории)"
Сформулируем основные правила построения дашбордов:
"— в среднем человек удерживает в рабочей памяти около семи элементов. Примерно
на таком"
"количестве блоков в дашборде пользователь сможет сфокусироваться при анализе
данных."
— большинство пользователей просматривают страницу слева направо и сверху вниз.
Это характеризует
"Z-образный способ восприятия информации. Следовательно, при построении таблиц в
дашборде заголовки и"
подзаголовки лучше располагать слева.
"— в управленческой визуальной отчетности большой поток цифр лучше представлять
в упрощенном"
формате и в целых числах, другими словами, в миллионах либо миллиардах.
Инструментом визуализации цифр
служит диаграмма. Диаграммы могут быть:
а) линейчатые;
б) кольцевые;
в) гистограмма;
г) график и др.
"— для того чтобы сделать дашборд наиболее результативным, следует связанные
элементы объединять"
в группы – это помогает пользователю воспринимать их как единое целое.
"— при построении дашборда, чтобы привлечь внимание читателя к тем моментам,
которые выделяются"
"в документе, следует использовать контраст (выделение). Так, можно увеличить
шрифт или сделать его жирным,"
оттенить цветом текст, поставить акцентирующий символ и др.
— немаловажную роль в процессе создания дашборда играет использование цвета.
При выделении
Вопросы студенческой науки Выпуск №4 (68), апрель 2022
365
"заголовков или столбцов можно использовать стимулирующие цвета (оранжевый,
желтый, красный) или"
"дезинтегрирующие цвета (сине-зеленый, синий). Для отображения цифр оптимальнее
выбирать темно-синий"
"цвет. Чтобы выделить положительные отклонения (например, рост выручки),
рекомендуется использовать"
зеленый цвет, а для выделения отрицательных – красный.
"Правильно построенная отчетность с помощью дашборда дает ряд преимуществ для
компании:"
1) повышение скорости формирования и анализа отчетности;
2) увеличение точности планирования и прогнозирования;
3) повышение качества принятия решений;
4) уменьшение количества системных ошибок и т.п.
"Рассмотрим процесс создания аналитического дашборда (визуальной отчетности) на
примере"
"российской страховой компании, а именно страхового публичного акционерного
общества «Ингосстрах» (далее"
– СПАО «Ингосстрах»).
"В качестве исходных данных для исследования используется вторичная информация
— открытые"
данные СПАО «Ингосстрах», размещенные на официальном сайте компании.
Открытые данные,
"опубликованные СПАО «Ингосстрах» в формате годового отчета, содержат
информацию об основных"
результатах деятельности СПАО «Ингосстрах» за 2020 год [6].
"Для начала производился отбор показателей для исследования. В целях уменьшения
информационной"
"перегрузки дашборда были исключены характеристики, на теоретическом уровне не
имеющие значимую связь"
"со страхованием клиентов СПАО «Ингосстрах». В результате были отобраны 5 
показателей для построения"
дашборда:
1. Сборы по прямому страхованию в целом.
"2. Страховая премия по добровольному страхованию как часть сборов по прямому
страхованию."
"3. Страховая премия по обязательному страхованию (кроме обязательного
медицинского страхования"
(ОМС)) как часть сборов по прямому страхованию.
4. Страхование физических лиц.
5. Страхование юридических лиц.
"Затем было реализовано создание интерактивной аналитической панели. Для этого
было определено"
количество диаграмм, их содержание и расположение на дашборде.
"В первую очередь были построены три текстбокса, в которых отразились ключевые
показатели"
"эффективности компании (самые важные итоговые цифры). Эти текстбоксы
формируют первый уровень"
дашборда (рисунок 1).
Рисунок 1. Ключевые показатели эффективности деятельности
"После было решено создать линейный график с маркерами, поскольку он наглядно
отражает динамику"
"показателя «Сборы по прямому страхованию». Построенный график приведен на
рисунке 2."
Вопросы студенческой науки Выпуск №4 (68), апрель 2022
366
Рисунок 2. Линейный график с маркерами
"Далее были созданы две круговые диаграммы, потому что такой вид представления
данных подходит"
для визуализации структуры целого. Построенные диаграммы отражены на рисунке 3.
Рисунок 3. Круговые диаграммы
"На приведённых круговых диаграммах отражены данные по двум показателям:
«Страховая премия по"
"добровольному страхованию» и «Страховая премия по обязательному страхованию
(кроме ОМС)». Линейный"
график с маркерами и круговые диаграммы представляют второй уровень дашборда.
"Рост страховых премий по добровольному и обязательному страхованиям в
совокупности определяет"
"рост обязательств страховой компании «Ингосстрах» перед страхователями и
усиленное развитие"
"инвестиционного страхования жизни и, следовательно, ставит перед одним из
лидеров добровольного"
"страхования задачу проведения политики, направленной на рост собственного
капитала."
"Для отражения показателей «Страхование физических лиц» и «Страхование
юридических лиц» были"
"выбраны диаграммы с областями и накоплением, которые представляют третий
уровень дашборда. Построенная"
диаграмма представлена на рисунке 4.
Рисунок 4. Диаграммы с областями и накоплением
"В итоге был сформирован и оформлен аналитический дашборд для акционеров СПАО
«Ингосстрах» (см."
рисунок 5).
Вопросы студенческой науки Выпуск №4 (68), апрель 2022
367
"Рисунок 5. Аналитический дашборд для управления СПАО «Ингосстрах»
Следует отметить, что благодаря функционалу программного продукта «Microsoft 
Excel» создание этой"
"аналитической панели проводилось без использования особых профессиональных
навыков и наличия"
специализированных знаний и, следовательно, существенных затрат времени.
"На основании выполненного исследования можно сделать вывод, что визуализация
данных – это"
"современный фактор эффективности деятельности компании. Правильно
разработанная управленческая"
"отчетность при помощи аналитического дашборда позволяет предоставить
руководству визуализированные"
данные для принятия быстрых управленческих решений.
"Сформированный визуальный отчет для СПАО «Ингосстрах» за 2020 год отражает
характеристику"
"основных направлений деятельности компании и позволяет сделать выводы о её
лидирующем положении на"
российском рынке страховых услуг.
"РАЗРАБОТКА WEB-ПРИЛОЖЕНИЯ ДЛЯ УПРАВЛЕНИЯ ПРОЕКТАМИ И КОНТРОЛЯ
ВЫПОЛНЕНИЯ ЗАДАЧ"
"В настоящее время абсолютно всем организациям, прямо или косвенно
связанным с информационными технологиями, требуется средство управления
задачами и проектами. Это набор инструментов, позволяющий прикреплять
новые задачи, следить за их выполнением, вести отсчёт времени, потраченный
на их них [1]."
"В связи с этим, компании, у которых нет денег на поддержку
программного обеспечения, прибегают к использованию бесплатных, в
большинстве случаев недоработанных проектов, или же пользуются
полноценными приложениями пробный период."
"Существующих решений достаточно много, но, как правило, они не
включают в себя средства общения между сотрудниками и руководителем."
"Вследствие их отсутствия, возникает необходимость прибегать к
дополнительным сервисам для обсуждения вопросов, возникающих по ходу
выполнения задач."
"Цель исследования преследует необходимость реализации следующего
ряда задач:"
анализ теоретических аспектов разработки,
"выбор инструментов для разработки, языков программирования,
разработка серверной и клиентской части приложения."
"Современный трекер должен обладать огромным функционалом,
позволяющим работать со всевозможными видами задач и подзадач, следить за
временем, потраченным на них, включать в себя инструменты для
делегирования обязанностей непосредственно внутри приложения, а также
иметь средство коммуникации между ячейками организации в виде общего
чата по конкретным задачам."
"Исходя из вышесказанного, можно сформулировать основные принципы,
которым должен соответствовать разрабатываемый трекер задач:
возможность создания новых дашбордов, задач, назначение
пользователей на определённые задачи, реализация замера времени
выполнения каждой из задач;"
"возможность использования средств обратной связи внутри каждой из
задач, с возможностью прикрепления файлов."
"В ходе исследования был проанализирован ряд программных продуктов,
осуществляющих контроль выполнения задач (Trello, Weeek, Yandex Tracker)."
"Рассмотренные продукты вышеуказанным критериям соответствуют не в
полной мере. В результате исследования все вышеуказанные требования в
разрабатываемом продукте были учтены."
"Реализация всех перечисленных выше условий обязательна для
выполнения. Это особенно важно для приложения, которое обеспечивает
контроль выполнения задач на предприятии [2]."
"Для реализации веб-приложения использовались следующие ресурсы:
база данных, backend (язык программирования python, фреймворк flask),
frontend (языки программирования JavaScript, JQuery, AJAX, WebSocket), в
качестве СУБД использовалась PostgreSQL [3]."
"Flask – фреймворк на языке программирования Python для создания
каркасов веб-приложений. AJAX и WebSocket получили широкое применение
в проекте за счет возможности осуществления обращения к серверу без
перезагрузки страницы путём осуществления асинхронных запросов в
реальном времени [4]."
"Система предусматривает роли для пользователей: руководитель и
сотрудник. Каждый тип наделен особыми правами. У руководителей
доступных возможностей будет гораздо больше. Среди них: возможность
добавления новой «доски», задач для выполнения, прикрепление (открепление)
пользователей на конкретные задачи, наделение пользователей правами."
"Сотрудники же будут иметь возможность просмотра задач, использовать
секундомер для контроля времени их выполнения, а также присоединяться к
проектам. Для тех и других реализована возможность открытия мессенджера
для обратной связи между типами пользователей, а также прикрепление файлов
и вложений."
"Серверная и клиентская части приложения взаимодействуют между собой
посредством запросов. Например, при заполнении пользователем формы ввода
данные упаковываются в REQUEST запрос и передаются на сервер, который в
свою очередь перенаправляет их в СУБД. Каждая форма для ввода имеет
проверку на корректность введенного текста, которая осуществляется
посредством регулярных выражений."
"В качестве примера серверной части приложения рассмотрим реализацию
функционала регистрации пользователя. После заполнения формы для
регистрации, отправляется запрос на сервер, выполняется проверка на
корректность введённых данных, проверка на существование электронной
почты, хэширования пароля (алгоритм осуществляется посредством модуля
hashlib – инструмента для реализации алгоритмов хеширования на языке
программирования Python [5]), после чего сервер произведёт запись данных в
СУБД, а пользователя перенаправит на страницу авторизации."
"Фрагмент программного кода, отвечающий за обработку данных формы
регистрации, приведён ниже:"
if request.method == 'POST':
"name = data[""name""]"
"email = data[""email""]"
"password_hash = data[""password""]"
"user = User.query.filter_by(email=email).first()
if user:"
flash('Email уже используется')
"return render_template(""registr1.html"")"
"email_correct = Email.query.filter_by(code=code).first()
if email_correct:"
email=email_correct.email
"new_data = User(name, email, password_hash, created_on, updated_on,
status)"
db.session.add(new_data)
db.session.commit()
return redirect('log')
"Основной задачей в процессе реализации клиентской части приложения
было создание коммуникативной среды для взаимодействия между ячейками
организации посредством асинхронных запросов. Для отправления и получения
сообщений чата приложения в реальном времени было использовано
односокетное TCP-соединение между клиентом и сервером, что позволило
мгновенно распределять двунаправленные сообщения."
"Фрагмент программного кода реализации данной технологии
посредством использования в приложении WebSocket, приведён ниже:
socket.on( 'connect', function() {"
socket.emit( 'my event', {
data: 'User Connected'
} )
"var form = $( '#ajax' ).on( 'submit', function( e ) {
e.preventDefault()"
let user_name = $( 'input.name' ).val()
"let user_input = $( 'textarea.message' ).val()
var now = new Date().toLocaleString()"
var todo = $( 'input.id_chat' ).val()
socket.emit( 'my event', {
user_name : user_name,
message : user_input,
now : now,
todo : todo,
mess : mess
} )
$( 'textarea.message' ).val( '' ).focus()
} )
} )
"В полях формы ввода пользователем вводится сообщение, сервером
считывается уникальных идентификатор пользователя, после чего происходит
двунаправленный запрос, выводящий новое сообщение пользователю и
отправляющий запрос на сервер для записи в БД."
"Разработанное приложение отвечает функциональным требованиям
большинства организаций, нуждающихся в контроле выполнения задач,
помогая руководителям следить за качеством выполненной сотрудниками
работы. Для повышения функциональности существующего программного
продукта может быть предложен ряд улучшений:"
"Добавление календаря событий для удобной визуализации
тайминговых процессов;"
"Разработка методики для расчёта коэффициента полезного действия
сотрудников на основе получаемых данных [6];"
"Генерация отчетной статистики за выбранный руководителем период
времени по выполненным сотрудниками задачам в конкретных проектах."
Выводы
"В ходе работы было разработано веб-приложение, которое сможет
обеспечить контроль над проектами, а также позволит пользователям внутри
приложения вести переговоры по поводу той или иной задачи в чате,
специально спроектированном под данное приложение. В приложении
применяются современные технологии для обработки асинхронных запросов, а
также используется система управления базами данных PosgreSQL для
безопасного хранения данных разработанной системы. Приложение
представляет собой готовый программный продукт, соответствующий
выдвинутым критериям."
"Предложенный трекер задач оснащён функционалом, который способен
осуществлять контроль за сотрудниками предприятия, адаптирован под любые
виды задач, вне зависимости от направления деятельности организации. В
отличие от своих аналогов обладает инструментом обратной связи между
ячейками организации, что избавит от необходимости прибегать к
дополнительному программному обеспечению."
"Следующим шагом разработки приложения будет включение в проект
функций для предоставления руководителю статистики по выполненным
сотрудниками задачам в конкретных проектах. Новые функции приложения
должны помочь руководителям выделять наиболее ценных сотрудников."
